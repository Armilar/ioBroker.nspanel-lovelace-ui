{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageGrid.ts"],
  "sourcesContent": ["import { rgb_dec565, colorScale0, colorScale10, GetIconColor, getDecfromRGBThree, hsvtodec } from '../const/Color';\nimport { Icons } from '../const/icon_mapping';\nimport { Page, PageInterface } from './Page';\nimport { PageItemDataitems, MessageItem } from '../types/pageItem';\nimport {\n    getIconEntryColor,\n    getIconEntryValue,\n    getTranslation,\n    getValueEntryBoolean,\n    getValueEntryNumber,\n    getValueEntryString,\n    getValueEntryTextOnOff,\n} from '../const/tools';\n\n//light, shutter, delete, text, button, switch, number,input_sel, timer und fan types\nexport class PageGrid extends Page {\n    constructor(config: PageInterface) {\n        super({ ...config, card: 'cardGrid' });\n    }\n\n    async getPageItem(item: PageItemDataitems, id: string): Promise<string> {\n        const message: Partial<MessageItem> = {};\n        message.displayName = (item.data.headline && (await item.data.headline.getString())) ?? '';\n        message.intNameEntity = id + '?' + item.role;\n        switch (item.role) {\n            case 'light':\n            case 'dimmer':\n            case 'socket':\n            case 'cie':\n            case 'rgb':\n            case 'ct':\n            case 'hue':\n            case 'rgbSingle': {\n                message.type = 'light';\n\n                const dimmer = item.data.dimmer && (await item.data.dimmer.getNumber());\n                const rgb =\n                    item.role == 'rgb'\n                        ? await getDecfromRGBThree(item)\n                        : item.data.color && (await item.data.color.getRGBDec());\n                const hue =\n                    item.role == 'hue' && item.data.hue ? hsvtodec(await item.data.hue.getNumber(), 1, 1) : null;\n                const v = item.data.entity.value ? await item.data.entity.value.getBoolean() : true;\n\n                switch (item.role) {\n                    case 'socket': {\n                        message.icon = Icons.GetIcon('power-socket-de');\n                        break;\n                    }\n                    default: {\n                        message.icon = Icons.GetIcon('lightbulb');\n                        break;\n                    }\n                }\n                if (v) {\n                    message.optionalValue = '1';\n                    message.iconColor = hue ?? rgb ?? (await GetIconColor(item, dimmer ?? 100));\n                    const i = item.data.icon.true.value ? await item.data.icon.true.value.getString() : null;\n                    if (i !== null) message.icon = i;\n                } else {\n                    message.optionalValue = '0';\n                    message.iconColor = await GetIconColor(item, false);\n                    const i = item.data.icon.false.value ? await item.data.icon.false.value.getString() : null;\n                    if (i !== null) message.icon = i;\n                }\n                message.displayName = (await getValueEntryTextOnOff(item.data.text, true)) ?? message.displayName;\n                return this.getItemMesssage(message);\n                break;\n            }\n            /*case 'cd': {\n                break;\n            }*/\n            case 'blind': {\n                message.type = 'shutter';\n\n                const value = await getValueEntryNumber(item.data.entity);\n                /*const min = (item.data.minValue && (await item.data.minValue.getNumber())) ?? null;\n                const max = (item.data.maxValue && (await item.data.maxValue.getNumber())) ?? null;\n                */\n                message.icon = Icons.GetIcon(\n                    (item.data.icon.true.value && (await item.data.icon.true.value.getString())) ?? 'window-open',\n                );\n                message.iconColor = await GetIconColor(item, value !== null ? value : true);\n                //const dimmer = item.data.dimmer && (await item.data.dimmer.getNumber());\n                /*let val = value;\n                if (min !== null && max !== null && val !== null) {\n                    val = Math.trunc(scale(val, min, max, 100, 0));\n                }*/\n                message.optionalValue = [\n                    Icons.GetIcon('arrow-up'), //up\n                    Icons.GetIcon('stop'), //stop\n                    Icons.GetIcon('arrow-down'), //down\n                    'enable', // up status\n                    'enable', // stop status\n                    'enable', // down status\n                ].join('|');\n                message.displayName = (await getValueEntryTextOnOff(item.data.text, true)) ?? message.displayName;\n                return this.getItemMesssage(message);\n                break;\n            }\n            case 'gate':\n            case 'door':\n            case 'window': {\n                message.type = 'text';\n\n                let value = await getValueEntryBoolean(item.data.entity);\n                if (value !== null) {\n                    // gate works revese true is closed -> invert value\n                    if (item.role === 'gate') value = !value;\n                    let icon = '';\n                    message.iconColor = await GetIconColor(item, value ?? true ? true : false);\n                    if (value) {\n                        icon =\n                            (item.data.icon.true.value && (await item.data.icon.true.value.getString())) ??\n                            (item.role === 'door'\n                                ? 'door-open'\n                                : item.role === 'window'\n                                  ? 'window-open-variant'\n                                  : 'garage-open');\n                        message.optionalValue = getTranslation(this.library, 'window', 'opened');\n                    } else {\n                        icon =\n                            (item.data.icon.false.value && (await item.data.icon.false.value.getString())) ??\n                            (item.role === 'door'\n                                ? 'door-closed'\n                                : item.role === 'window'\n                                  ? 'window-closed-variant'\n                                  : 'garage');\n                        message.optionalValue = getTranslation(this.library, 'window', 'closed');\n                    }\n                    message.displayName = (await getValueEntryTextOnOff(item.data.text, value)) ?? message.displayName;\n                    message.icon = Icons.GetIcon(icon);\n                    return this.getItemMesssage(message);\n                } else {\n                    this.log.error(`Missing data value for ${this.name}-${id} role:${item.role}`);\n                }\n                break;\n            }\n            /*case 'volumeGroup': {\n                break;\n            }\n            case 'volume': {\n                break;\n            }\n            case 'info':\n            case 'humidity':\n            case 'temperature':\n            case 'value.temperature':\n            case 'value.humidity':\n            case 'sensor.door':\n            case 'sensor.window':\n            case 'thermostat': {\n                break;\n            }\n            case 'warning': {\n                break;\n            }\n            case 'ct': {\n                break;\n            }\n            case 'cie': {\n                break;\n            }*/\n            case 'motion': {\n                message.type = 'text';\n                const value = await getValueEntryBoolean(item.data.entity);\n                if (value !== null) {\n                    message.iconColor = await GetIconColor(item, value ?? true ? true : false);\n                    message.icon = Icons.GetIcon(await getIconEntryValue(item.data.icon, value, 'motion-sensor'));\n                    message.optionalValue = getTranslation(this.library, value ? 'on' : 'off');\n                    message.displayName = (await getValueEntryTextOnOff(item.data.text, value)) ?? message.displayName;\n                    return this.getItemMesssage(message);\n                } else {\n                    this.log.error(`Missing data value for ${this.name}-${id} role:${item.role}`);\n                }\n                break;\n            }\n\n            case 'buttonSensor':\n            case 'switch': // ein button ist nicht true oder false sondern etwas das man dr\u00FCcken kann und ab dann ist es undefiniert.\n            // veraltet\n            case 'button': {\n                let value =\n                    (item.data.set && item.data.set.value1 && (await item.data.set.value1.getBoolean())) ?? null;\n                if (value === null && item.role === 'buttonSensor') value = true;\n                if (value !== null) {\n                    message.type = item.role === 'buttonSensor' ? 'input_sel' : 'button';\n                    message.iconColor = await GetIconColor(item, value);\n                    message.icon = Icons.GetIcon(await getIconEntryValue(item.data.icon, value, 'gesture-tap-button'));\n                    message.displayName = (await getValueEntryTextOnOff(item.data.text, value)) ?? '';\n                    message.optionalValue = (await getValueEntryString(item.data.entity)) ?? 'PRESS';\n                    return this.getItemMesssage(message);\n                } else {\n                    this.log.error(`Missing set value for ${this.name}-${id} role:${item.role}`);\n                }\n                break;\n            }\n            case 'value.time':\n            case 'level.timer': {\n                const value =\n                    (item.data.set && item.data.set.value1 && (await item.data.set.value1.getNumber())) ?? null;\n                if (value !== null) {\n                    message.type = 'timer';\n                    message.iconColor = await GetIconColor(item, value);\n                    message.icon = Icons.GetIcon(await getIconEntryValue(item.data.icon, true, 'gesture-tap-button'));\n                    message.optionalValue = (await getValueEntryTextOnOff(item.data.text, true)) ?? 'PRESS';\n                    return this.getItemMesssage(message);\n                } else {\n                    this.log.error(`Missing set value for ${this.name}-${id} role:${item.role}`);\n                }\n                break;\n            }\n            case 'value.alarmtime': {\n                const value =\n                    (item.data.set && item.data.set.value1 && (await item.data.set.value1.getNumber())) ?? null;\n                if (value !== null) {\n                    message.type = 'timer';\n\n                    // das ist im Grunde wie vorher nur das die Farbe in aus der Konfiguration benutzt wird, wenn vorhanden\n                    message.iconColor =\n                        ((await getValueEntryString(item.data.entityOptional)) ?? '') == 'paused'\n                            ? await getIconEntryColor(item.data.icon, true, String(rgb_dec565(colorScale10)))\n                            : await getIconEntryColor(item.data.icon, false, String(rgb_dec565(colorScale0)));\n                    message.displayName = new Date(\n                        ((await getValueEntryNumber(item.data.entity)) || 0) * 1000,\n                    ).toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit', second: '2-digit' });\n                    message.icon = Icons.GetIcon(await getIconEntryValue(item.data.icon, true, 'timer-outline'));\n                    message.optionalValue = (await getValueEntryTextOnOff(item.data.text, true)) ?? 'PRESS';\n                    return this.getItemMesssage(message);\n                } else {\n                    this.log.error(`Missing set value for ${this.name}-${id} role:${item.role}`);\n                }\n                break;\n            }\n\n            case 'level.mode.fan': {\n                message.type = 'fan';\n                const value = (await getValueEntryBoolean(item.data.entity)) ?? false;\n                message.iconColor = await GetIconColor(item, value);\n                message.icon = Icons.GetIcon(await getIconEntryValue(item.data.icon, value, 'fan'));\n                message.optionalValue = value ? '1' : '0';\n                break;\n            }\n            /*case 'lock': {\n                break;\n            }\n            case 'slider': {\n                break;\n            }\n            case 'switch.mode.wlan': {\n                break;\n            }\n            case 'media': {\n                break;\n            }\n            case 'timeTable': {\n                break;\n            }\n            case 'airCondition': {\n                break;\n            }*/\n        }\n\n        return '~delete~~~~~';\n    }\n}\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../../../src/lib/const/notifications.ts"],
  "sourcesContent": ["import { PageBaseConfig } from '../types/pages';\nimport * as Color from './Color';\n\nconst popupWelcome: PageBaseConfig = {\n    card: 'popupNotify',\n    dpInit: '',\n    alwaysOn: 'none',\n    uniqueID: '///WelcomePopup',\n    config: {\n        card: 'popupNotify',\n        data: {\n            entity1: { value: { type: 'state', dp: '0_userdata.0.example_state' } },\n            headline: { type: 'const', constVal: 'welcomeHToken' },\n            colorHeadline: { true: { color: { type: 'const', constVal: Color.Green } } },\n            buttonLeft: { type: 'const', constVal: '' },\n            colorButtonLeft: { true: { color: { type: 'const', constVal: Color.White } } },\n            buttonRight: { type: 'const', constVal: '' },\n            colorButtonRight: { true: { color: { type: 'const', constVal: Color.White } } },\n            text: { type: 'const', constVal: 'welcomeTToken' }, // text: { type: 'const', constVal: 'Text Test ${pl}' },\n            colorText: { true: { color: { type: 'const', constVal: Color.White } } },\n            timeout: { type: 'const', constVal: 3 },\n            // {placeholder: {text: '' oder dp: ''}} im Text muss dann ${dieserKeyStehtImText} stehen\n            // optionalValue: { type: 'const', constVal: { dieserKeyStehtImText: { text: 'das ist ein placeholder' } } },\n            //setValue1: { type: 'const', constVal: true }, // alleine ist es ein switch\n            //setValue2: { type: 'const', constVal: true }, // mit setValue2 wird 1, bei yes und 2 bei no auf true gesetzt\n        },\n    },\n    pageItems: [],\n    items: undefined,\n};\n\nconst popupNotification: PageBaseConfig = {\n    card: 'popupNotify',\n    dpInit: '',\n    alwaysOn: 'none',\n    uniqueID: '///popupNotification',\n    config: {\n        card: 'popupNotify',\n        data: {\n            entity1: { value: { type: 'internal', dp: 'cmd/popupNotification', read: 'return true' } },\n            headline: { type: 'internal', dp: 'cmd/popupNotification', read: 'return JSON.parse(val).headline' },\n            colorHeadline: { true: { color: { type: 'const', constVal: Color.Green } } },\n            buttonLeft: { type: 'const', constVal: 'nextF' },\n            colorButtonLeft: { true: { color: { type: 'const', constVal: Color.White } } },\n            buttonRight: { type: 'const', constVal: 'ok' },\n            colorButtonRight: { true: { color: { type: 'const', constVal: Color.White } } },\n            text: { type: 'internal', dp: 'cmd/popupNotification', read: 'return JSON.parse(val).text' }, // text: { type: 'const', constVal: 'Text Test ${pl}' },\n            colorText: { true: { color: { type: 'const', constVal: Color.White } } },\n            timeout: { type: 'const', constVal: 0 },\n            // {placeholder: {text: '' oder dp: ''}}\n            // optionalValue: { type: 'const', constVal: { pl: { text: 'das ist ein placeholder' } } },\n            setValue1: { type: 'internalState', dp: 'cmd/NotificationCleared' },\n            setValue2: { type: 'internalState', dp: 'cmd/NotificationNext' },\n        },\n    },\n    pageItems: [],\n    items: undefined,\n};\n\nconst popupNotification2: PageBaseConfig = {\n    card: 'popupNotify',\n    dpInit: '',\n    alwaysOn: 'none',\n    uniqueID: '///popupNotification2',\n    config: {\n        card: 'popupNotify',\n        data: {\n            entity1: { value: { type: 'internal', dp: 'cmd/popupNotification2', read: 'return true' } },\n            headline: { type: 'internal', dp: 'cmd/popupNotification2', read: 'return JSON.parse(val).headline' },\n            colorHeadline: { true: { color: { type: 'const', constVal: Color.Green } } },\n            buttonLeft: { type: 'const', constVal: 'nextF' },\n            colorButtonLeft: { true: { color: { type: 'const', constVal: Color.White } } },\n            buttonRight: { type: 'const', constVal: 'ok' },\n            colorButtonRight: { true: { color: { type: 'const', constVal: Color.Green } } },\n            text: { type: 'internal', dp: 'cmd/popupNotification2', read: 'return JSON.parse(val).text' }, // text: { type: 'const', constVal: 'Text Test ${pl}' },\n            colorText: { true: { color: { type: 'const', constVal: Color.White } } },\n            timeout: { type: 'const', constVal: 0 },\n            setValue1: { type: 'internalState', dp: 'cmd/NotificationCleared2' },\n            setValue2: { type: 'internalState', dp: 'cmd/NotificationNext2' },\n        },\n    },\n    pageItems: [],\n    items: undefined,\n};\n\nexport const systemNotifications: PageBaseConfig[] = [popupWelcome, popupNotification, popupNotification2];\n"],
  "mappings": "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",
  "names": []
}

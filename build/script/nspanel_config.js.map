{
  "version": 3,
  "sources": ["../../src/script/nspanel_config.ts"],
  "sourcesContent": ["export const HMIOff: RGB = { red: 68, green: 115, blue: 158 }; // Blue-Off - Original Entity Off\nexport const HMIOn: RGB = { red: 3, green: 169, blue: 244 }; // Blue-On\nexport const HMIDark: RGB = { red: 29, green: 29, blue: 29 }; // Original Background Color\nexport const Off: RGB = { red: 253, green: 128, blue: 0 }; // Orange-Off - nicer color transitions\nexport const On: RGB = { red: 253, green: 216, blue: 53 };\nexport const MSRed: RGB = { red: 251, green: 105, blue: 98 };\nexport const MSYellow: RGB = { red: 255, green: 235, blue: 156 };\nexport const MSGreen: RGB = { red: 121, green: 222, blue: 121 };\nexport const Red: RGB = { red: 255, green: 0, blue: 0 };\nexport const White: RGB = { red: 255, green: 255, blue: 255 };\nexport const Yellow: RGB = { red: 255, green: 255, blue: 0 };\nexport const Green: RGB = { red: 0, green: 255, blue: 0 };\nexport const Blue: RGB = { red: 0, green: 0, blue: 255 };\nexport const DarkBlue: RGB = { red: 0, green: 0, blue: 136 };\nexport const Gray: RGB = { red: 136, green: 136, blue: 136 };\nexport const Black: RGB = { red: 0, green: 0, blue: 0 };\nexport const Cyan: RGB = { red: 0, green: 255, blue: 255 };\nexport const Magenta: RGB = { red: 255, green: 0, blue: 255 };\nexport const colorSpotify: RGB = { red: 30, green: 215, blue: 96 };\nexport const colorAlexa: RGB = { red: 49, green: 196, blue: 243 };\nexport const colorSonos: RGB = { red: 216, green: 161, blue: 88 };\nexport const colorRadio: RGB = { red: 255, green: 127, blue: 0 };\nexport const BatteryFull: RGB = { red: 96, green: 176, blue: 62 };\nexport const BatteryEmpty: RGB = { red: 179, green: 45, blue: 25 };\n\n//Menu Icon Colors\nexport const Menu: RGB = { red: 150, green: 150, blue: 100 };\nexport const MenuLowInd: RGB = { red: 255, green: 235, blue: 156 };\nexport const MenuHighInd: RGB = { red: 251, green: 105, blue: 98 };\n\n//Dynamische Indikatoren (Abstufung gr\u00FCn nach gelb nach rot)\nexport const colorScale0: RGB = { red: 99, green: 190, blue: 123 };\nexport const colorScale1: RGB = { red: 129, green: 199, blue: 126 };\nexport const colorScale2: RGB = { red: 161, green: 208, blue: 127 };\nexport const colorScale3: RGB = { red: 129, green: 217, blue: 126 };\nexport const colorScale4: RGB = { red: 222, green: 226, blue: 131 };\nexport const colorScale5: RGB = { red: 254, green: 235, blue: 132 };\nexport const colorScale6: RGB = { red: 255, green: 210, blue: 129 };\nexport const colorScale7: RGB = { red: 251, green: 185, blue: 124 };\nexport const colorScale8: RGB = { red: 251, green: 158, blue: 117 };\nexport const colorScale9: RGB = { red: 248, green: 131, blue: 111 };\nexport const colorScale10: RGB = { red: 248, green: 105, blue: 107 };\n\n//Screensaver Default Theme Colors\nexport const scbackground: RGB = { red: 0, green: 0, blue: 0 };\nexport const scbackgroundInd1: RGB = { red: 255, green: 0, blue: 0 };\nexport const scbackgroundInd2: RGB = { red: 121, green: 222, blue: 121 };\nexport const scbackgroundInd3: RGB = { red: 255, green: 255, blue: 0 };\nexport const sctime: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctimeAMPM: RGB = { red: 255, green: 255, blue: 255 };\nexport const scdate: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctMainIcon: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctMainText: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctForecast1: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctForecast2: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctForecast3: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctForecast4: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctF1Icon: RGB = { red: 255, green: 235, blue: 156 };\nexport const sctF2Icon: RGB = { red: 255, green: 235, blue: 156 };\nexport const sctF3Icon: RGB = { red: 255, green: 235, blue: 156 };\nexport const sctF4Icon: RGB = { red: 255, green: 235, blue: 156 };\nexport const sctForecast1Val: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctForecast2Val: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctForecast3Val: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctForecast4Val: RGB = { red: 255, green: 255, blue: 255 };\nexport const scbar: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctMainIconAlt: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctMainTextAlt: RGB = { red: 255, green: 255, blue: 255 };\nexport const sctTimeAdd: RGB = { red: 255, green: 255, blue: 255 };\n\n//Auto-Weather-Colors\nexport const swClearNight: RGB = { red: 150, green: 150, blue: 100 };\nexport const swCloudy: RGB = { red: 75, green: 75, blue: 75 };\nexport const swExceptional: RGB = { red: 255, green: 50, blue: 50 };\nexport const swFog: RGB = { red: 150, green: 150, blue: 150 };\nexport const swHail: RGB = { red: 200, green: 200, blue: 200 };\nexport const swLightning: RGB = { red: 200, green: 200, blue: 0 };\nexport const swLightningRainy: RGB = { red: 200, green: 200, blue: 150 };\nexport const swPartlycloudy: RGB = { red: 150, green: 150, blue: 150 };\nexport const swPouring: RGB = { red: 50, green: 50, blue: 255 };\nexport const swRainy: RGB = { red: 100, green: 100, blue: 255 };\nexport const swSnowy: RGB = { red: 150, green: 150, blue: 150 };\nexport const swSnowyRainy: RGB = { red: 150, green: 150, blue: 255 };\nexport const swSunny: RGB = { red: 255, green: 255, blue: 0 };\nexport const swWindy: RGB = { red: 150, green: 150, blue: 150 };\n\n/**\n * command for javascript adapter\n * sendTo('nspanel-lovelace-ui.0', 'config', Testconfig)\n */\n\nconst pageMediaTest: PageBaseConfig = {\n    //type: 'sonstiges',\n    card: 'cardMedia',\n    dpInit: 'alexa2.0.Echo-Devices.G091EV0704641J8R.Player',\n    initMode: 'auto',\n    alwaysOn: 'none',\n    config: {\n        card: 'cardMedia',\n        data: {\n            headline: {\n                type: 'const',\n                constVal: 'home',\n            },\n            alwaysOnDisplay: {\n                type: 'const',\n                constVal: 'test',\n            },\n            album: {\n                mode: 'auto',\n                type: 'state',\n                role: 'media.album',\n                dp: '',\n            },\n            titel: {\n                on: {\n                    type: 'const',\n                    constVal: true,\n                },\n                text: {\n                    mode: 'auto',\n                    type: 'triggered',\n                    role: 'media.title',\n                    dp: '',\n                },\n                color: {\n                    type: 'const',\n                    constVal: { red: 250, green: 2, blue: 3 },\n                },\n            },\n            duration: {\n                mode: 'auto',\n                type: 'state',\n                role: 'media.duration',\n                dp: '',\n            },\n            elapsed: {\n                mode: 'auto',\n                type: 'triggered',\n                role: ['media.elapsed', 'media.elapsed.text'],\n                dp: '',\n            },\n            volume: {\n                value: {\n                    mode: 'auto',\n                    type: 'triggered',\n                    role: ['level.volume'],\n                    response: 'now',\n                    scale: { min: 0, max: 100 },\n                    dp: '',\n                },\n            },\n            artist: {\n                on: {\n                    type: 'const',\n                    constVal: true,\n                },\n                text: {\n                    mode: 'auto',\n                    type: 'state',\n                    role: 'media.artist',\n                    dp: '',\n                },\n                color: undefined,\n                icon: {\n                    type: 'const',\n                    constVal: 'diameter',\n                },\n                list: undefined,\n            },\n            shuffle: {\n                mode: 'auto',\n                type: 'state',\n                role: 'media.mode.shuffle',\n                dp: '',\n            },\n            icon: {\n                type: 'const',\n                constVal: 'dialpad',\n            },\n            play: {\n                mode: 'auto',\n                type: 'state',\n                role: ['button.play'],\n                dp: '',\n            },\n            mediaState: {\n                mode: 'auto',\n                type: 'triggered',\n                role: ['media.state'],\n                dp: '',\n            },\n            stop: {\n                mode: 'auto',\n                type: 'state',\n                role: ['button.stop'],\n                dp: '',\n            },\n            pause: {\n                mode: 'auto',\n                type: 'state',\n                role: 'button.pause',\n                dp: '',\n            },\n            forward: {\n                mode: 'auto',\n                type: 'state',\n                role: 'button.next',\n                dp: '',\n            },\n            backward: {\n                mode: 'auto',\n                type: 'state',\n                role: 'button.prev',\n                dp: '',\n            },\n            logo: {\n                on: {\n                    type: 'const',\n                    constVal: true,\n                },\n                text: { type: 'const', constVal: '1' },\n                icon: { type: 'const', constVal: 'home' },\n                color: { type: 'const', constVal: { red: 250, blue: 250, green: 0 } },\n                list: undefined,\n                action: 'cross',\n            },\n            toolbox: [\n                {\n                    on: {\n                        type: 'const',\n                        constVal: true,\n                    },\n                    text: { type: 'const', constVal: 'Repeat' },\n                    icon: { type: 'const', constVal: 'repeat' },\n                    color: { type: 'const', constVal: { red: 123, blue: 112, green: 0 } },\n                    list: { type: 'state', dp: '', mode: 'auto', role: 'media.playlist' },\n                    action: 'cross',\n                },\n                {\n                    on: {\n                        type: 'const',\n                        constVal: true,\n                    },\n                    text: { type: 'const', constVal: '1' },\n                    icon: { type: 'const', constVal: 'home' },\n                    color: { type: 'const', constVal: { red: 123, blue: 112, green: 0 } },\n                    list: undefined,\n                    action: 'cross',\n                },\n                {\n                    on: {\n                        type: 'const',\n                        constVal: true,\n                    },\n                    text: { type: 'const', constVal: '1' },\n                    icon: { type: 'const', constVal: 'home' },\n                    color: { type: 'const', constVal: { red: 123, blue: 112, green: 0 } },\n                    list: undefined,\n                    action: 'cross',\n                },\n                {\n                    on: {\n                        type: 'const',\n                        constVal: false,\n                    },\n                    text: { type: 'const', constVal: '1' },\n                    icon: { true: { type: 'const', constVal: 'reply' }, false: { type: 'const', constVal: 'replay' } },\n                    color: { type: 'const', constVal: { red: 123, blue: 112, green: 0 } },\n                    list: undefined,\n                    action: 'cross',\n                },\n                {\n                    on: {\n                        type: 'const',\n                        constVal: false,\n                    },\n                    text: { type: 'const', constVal: '1' },\n                    icon: { type: 'const', constVal: 'home' },\n                    color: { type: 'const', constVal: { red: 123, blue: 112, green: 0 } },\n                    list: undefined,\n                    action: 'cross',\n                },\n                {\n                    on: {\n                        type: 'const',\n                        constVal: true,\n                    },\n                    text: { type: 'const', constVal: '1' },\n                    icon: { type: 'const', constVal: 'home' },\n                    color: { type: 'const', constVal: { red: 123, blue: 112, green: 0 } },\n                    list: undefined,\n                    action: 'cross',\n                },\n                {\n                    on: {\n                        type: 'const',\n                        constVal: true,\n                    },\n                    text: { type: 'const', constVal: '1' },\n                    icon: { type: 'const', constVal: 'home' },\n                    color: { type: 'const', constVal: { red: 123, blue: 112, green: 0 } },\n                    list: undefined,\n                    action: 'cross',\n                },\n                {\n                    on: {\n                        type: 'const',\n                        constVal: true,\n                    },\n                    text: { type: 'const', constVal: '1' },\n                    icon: { type: 'const', constVal: 'home' },\n                    color: { type: 'const', constVal: { red: 123, blue: 112, green: 0 } },\n                    list: undefined,\n                    action: 'cross',\n                },\n            ],\n        },\n    },\n    items: undefined,\n    pageItems: [\n        {\n            role: 'text.list',\n            type: 'input_sel',\n            dpInit: undefined,\n            initMode: 'custom',\n            data: {\n                color: {\n                    true: {\n                        type: 'const',\n                        constVal: HMIOn,\n                    },\n                    false: undefined,\n                    scale: undefined,\n                },\n                icon: {\n                    true: {\n                        value: { type: 'const', constVal: 'home' },\n                        color: { type: 'const', constVal: Green },\n                    },\n                    false: {\n                        value: { type: 'const', constVal: 'fan' },\n                        color: { type: 'const', constVal: Red },\n                    },\n                    scale: undefined,\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entity1: {\n                    value: {\n                        type: 'const',\n                        constVal: true,\n                    },\n                    decimal: undefined,\n                    factor: undefined,\n                    unit: undefined,\n                },\n                text: {\n                    true: undefined,\n                    false: undefined,\n                },\n                /**\n                 * valueList string[]/stringify oder string?string?string?string stelle korreliert mit setList  {input_sel}\n                 */\n                valueList: { type: 'const', constVal: 'home?butter' },\n                /**\n                 * setList: {id:Datenpunkt, value: zu setzender Wert}[] bzw. stringify  oder ein String nach dem Muster datenpunkt?Wert|Datenpunkt?Wert {input_sel}\n                 */\n                setList: { type: 'const', constVal: '0_userdata.0.test?1|0_userdata.0.test?2' },\n            },\n        },\n        {\n            role: 'text.list',\n            type: 'button',\n            dpInit: undefined,\n            initMode: 'custom',\n            data: {\n                color: {\n                    true: {\n                        type: 'const',\n                        constVal: HMIOn,\n                    },\n                    false: undefined,\n                    scale: undefined,\n                },\n                icon: {\n                    true: {\n                        value: { type: 'const', constVal: 'home' },\n                        color: { type: 'const', constVal: Green },\n                    },\n                    false: {\n                        value: { type: 'const', constVal: 'fan' },\n                        color: { type: 'const', constVal: Red },\n                    },\n                    scale: undefined,\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entity1: {\n                    value: {\n                        type: 'const',\n                        constVal: true,\n                    },\n                    decimal: undefined,\n                    factor: undefined,\n                    unit: undefined,\n                },\n                text: {\n                    true: undefined,\n                    false: undefined,\n                },\n                setValue1: undefined,\n            },\n        },\n    ],\n    uniqueID: 'media1',\n    useColor: false,\n};\nconst pageGridTest1: PageBaseConfig = {\n    //type: 'sonstiges',\n    card: 'cardGrid',\n    dpInit: '',\n    initMode: 'custom',\n    alwaysOn: 'none',\n    uniqueID: 'grid1',\n    useColor: false,\n    config: {\n        card: 'cardGrid',\n        data: {\n            headline: {\n                type: 'const',\n                constVal: '\u00DCberschrift',\n            },\n        },\n    },\n    pageItems: [\n        {\n            role: 'text.list',\n            type: 'input_sel',\n            dpInit: undefined,\n            initMode: 'custom',\n            data: {\n                color: {\n                    true: {\n                        type: 'const',\n                        constVal: HMIOn,\n                    },\n                    false: undefined,\n                    scale: undefined,\n                },\n                icon: {\n                    true: {\n                        value: { type: 'const', constVal: 'home' },\n                        color: { type: 'const', constVal: Green },\n                    },\n                    false: {\n                        value: { type: 'const', constVal: 'fan' },\n                        color: { type: 'const', constVal: Red },\n                    },\n                    scale: undefined,\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entity1: {\n                    value: {\n                        type: 'const',\n                        constVal: true,\n                    },\n                    decimal: undefined,\n                    factor: undefined,\n                    unit: undefined,\n                },\n                text: {\n                    true: undefined,\n                    false: undefined,\n                },\n                /**\n                 * valueList string[]/stringify oder string?string?string?string stelle korreliert mit setList  {input_sel}\n                 */\n                valueList: { type: 'const', constVal: 'home?butter' },\n                /**\n                 * setList: {id:Datenpunkt, value: zu setzender Wert}[] bzw. stringify  oder ein String nach dem Muster datenpunkt?Wert|Datenpunkt?Wert {input_sel}\n                 */\n                setList: { type: 'const', constVal: '0_userdata.0.test?1|0_userdata.0.test?2' },\n            },\n        },\n        {\n            role: 'text.list',\n            type: 'button',\n            dpInit: undefined,\n            initMode: 'custom',\n            data: {\n                color: {\n                    true: {\n                        type: 'const',\n                        constVal: HMIOn,\n                    },\n                    false: undefined,\n                    scale: undefined,\n                },\n                icon: {\n                    true: {\n                        value: { type: 'const', constVal: 'arrow-up' },\n                        color: { type: 'const', constVal: Blue },\n                    },\n                    false: {\n                        value: { type: 'const', constVal: 'fan' },\n                        color: { type: 'const', constVal: Red },\n                    },\n                    scale: undefined,\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entity1: {\n                    value: {\n                        type: 'const',\n                        constVal: true,\n                    },\n                    decimal: undefined,\n                    factor: undefined,\n                    unit: undefined,\n                },\n                text: {\n                    true: undefined,\n                    false: undefined,\n                },\n                setNavi: {\n                    type: 'const',\n                    constVal: '3',\n                },\n                setValue1: undefined,\n            },\n        },\n    ],\n    items: undefined,\n};\nconst pageGridTest2: PageBaseConfig = {\n    //type: 'sonstiges',\n    card: 'cardGrid',\n    dpInit: '',\n    initMode: 'custom',\n    alwaysOn: 'none',\n    uniqueID: 'grid2',\n    useColor: false,\n    config: {\n        card: 'cardGrid',\n        data: {\n            headline: {\n                type: 'const',\n                constVal: '\u00DCberschrift2',\n            },\n        },\n    },\n    items: undefined,\n    pageItems: [\n        {\n            role: 'text.list',\n            type: 'input_sel',\n            dpInit: undefined,\n            initMode: 'custom',\n            data: {\n                color: {\n                    true: {\n                        type: 'const',\n                        constVal: HMIOn,\n                    },\n                    false: undefined,\n                    scale: undefined,\n                },\n                icon: {\n                    true: {\n                        value: { type: 'const', constVal: 'fan' },\n                        color: { type: 'const', constVal: Green },\n                    },\n                    false: {\n                        value: { type: 'const', constVal: 'fan' },\n                        color: { type: 'const', constVal: Red },\n                    },\n                    scale: undefined,\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entity1: {\n                    value: {\n                        type: 'const',\n                        constVal: true,\n                    },\n                    decimal: undefined,\n                    factor: undefined,\n                    unit: undefined,\n                },\n                text: {\n                    true: undefined,\n                    false: undefined,\n                },\n                /**\n                 * valueList string[]/stringify oder string?string?string?string stelle korreliert mit setList  {input_sel}\n                 */\n                valueList: { type: 'const', constVal: 'home?butter' },\n                /**\n                 * setList: {id:Datenpunkt, value: zu setzender Wert}[] bzw. stringify  oder ein String nach dem Muster datenpunkt?Wert|Datenpunkt?Wert {input_sel}\n                 */\n                setList: { type: 'const', constVal: '0_userdata.0.test?1|0_userdata.0.test?2' },\n            },\n        },\n        {\n            role: 'text.list',\n            type: 'button',\n            dpInit: undefined,\n            initMode: 'custom',\n\n            data: {\n                color: {\n                    true: {\n                        type: 'const',\n                        constVal: HMIOn,\n                    },\n                    false: undefined,\n                    scale: undefined,\n                },\n                icon: {\n                    true: {\n                        value: { type: 'const', constVal: 'account' },\n                        color: { type: 'const', constVal: Green },\n                    },\n                    false: {\n                        value: { type: 'const', constVal: 'fan' },\n                        color: { type: 'const', constVal: Red },\n                    },\n                    scale: undefined,\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entity1: {\n                    value: {\n                        type: 'const',\n                        constVal: true,\n                    },\n                    decimal: undefined,\n                    factor: undefined,\n                    unit: undefined,\n                },\n                text: {\n                    true: undefined,\n                    false: undefined,\n                },\n\n                setValue1: undefined,\n            },\n        },\n    ],\n};\nconst pageGrid2Test2: PageBaseConfig = {\n    //type: 'sonstiges',\n    card: 'cardGrid2',\n    dpInit: '',\n    initMode: 'custom',\n    alwaysOn: 'none',\n    uniqueID: 'grid3',\n    useColor: false,\n    config: {\n        card: 'cardGrid2',\n        data: {\n            headline: {\n                type: 'const',\n                constVal: '\u00DCberschrift',\n            },\n        },\n    },\n    items: undefined,\n    pageItems: [\n        {\n            role: 'text.list',\n            type: 'input_sel',\n            dpInit: undefined,\n            initMode: 'custom',\n            data: {\n                color: {\n                    true: {\n                        type: 'const',\n                        constVal: HMIOn,\n                    },\n                    false: undefined,\n                    scale: undefined,\n                },\n                icon: {\n                    true: {\n                        value: { type: 'const', constVal: 'home' },\n                        color: { type: 'const', constVal: Green },\n                    },\n                    false: {\n                        value: { type: 'const', constVal: 'fan' },\n                        color: { type: 'const', constVal: Red },\n                    },\n                    scale: undefined,\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entity1: {\n                    value: {\n                        type: 'const',\n                        constVal: true,\n                    },\n                    decimal: undefined,\n                    factor: undefined,\n                    unit: undefined,\n                },\n                text: {\n                    true: undefined,\n                    false: undefined,\n                },\n                /**\n                 * valueList string[]/stringify oder string?string?string?string stelle korreliert mit setList  {input_sel}\n                 */\n                valueList: { type: 'const', constVal: 'home?butter' },\n                /**\n                 * setList: {id:Datenpunkt, value: zu setzender Wert}[] bzw. stringify  oder ein String nach dem Muster datenpunkt?Wert|Datenpunkt?Wert {input_sel}\n                 */\n                setList: { type: 'const', constVal: '0_userdata.0.test?1|0_userdata.0.test?2' },\n            },\n        },\n        {\n            role: 'text.list',\n            type: 'button',\n            dpInit: undefined,\n            initMode: 'custom',\n\n            data: {\n                color: {\n                    true: {\n                        type: 'const',\n                        constVal: HMIOn,\n                    },\n                    false: undefined,\n                    scale: undefined,\n                },\n                icon: {\n                    true: {\n                        value: { type: 'const', constVal: 'home' },\n                        color: { type: 'const', constVal: Green },\n                    },\n                    false: {\n                        value: { type: 'const', constVal: 'fan' },\n                        color: { type: 'const', constVal: Red },\n                    },\n                    scale: undefined,\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entity1: {\n                    value: {\n                        type: 'const',\n                        constVal: true,\n                    },\n                    decimal: undefined,\n                    factor: undefined,\n                    unit: undefined,\n                },\n                text: {\n                    true: undefined,\n                    false: undefined,\n                },\n                setValue1: undefined,\n            },\n        },\n    ],\n};\nconst pageThermoTest: PageBaseConfig = {\n    card: 'cardThermo',\n    initMode: 'auto',\n    uniqueID: 'thermo1',\n    dpInit: '',\n    alwaysOn: 'none',\n    pageItems: [\n        {\n            role: 'text.list',\n            type: 'input_sel',\n            dpInit: undefined,\n            initMode: 'custom',\n            data: {\n                entity1: {\n                    value: {\n                        type: 'state',\n                        dp: '0_userdata.0.statesTest',\n                    },\n                    decimal: undefined,\n                    factor: undefined,\n                    unit: undefined,\n                },\n                headline: {\n                    type: 'const',\n                    constVal: 'Test',\n                },\n                /**\n                 * valueList string[]/stringify oder string?string?string?string stelle korreliert mit setList  {input_sel}\n                 */\n                //valueList: { type: 'const', constVal: 'home?butter' },\n                /**\n                 * setList: {id:Datenpunkt, value: zu setzender Wert}[] bzw. stringify  oder ein String nach dem Muster datenpunkt?Wert|Datenpunkt?Wert {input_sel}\n                 */\n                //setList: { type: 'const', constVal: '0_userdata.0.test?1|0_userdata.0.test?2' },\n            },\n        },\n        {\n            role: 'text.list',\n            type: 'button',\n            dpInit: undefined,\n            initMode: 'custom',\n            data: {\n                color: {\n                    true: {\n                        type: 'const',\n                        constVal: HMIOn,\n                    },\n                    false: undefined,\n                    scale: undefined,\n                },\n                icon: {\n                    true: {\n                        value: { type: 'const', constVal: 'arrow-up' },\n                        color: { type: 'const', constVal: Blue },\n                    },\n                    false: {\n                        value: { type: 'const', constVal: 'fan' },\n                        color: { type: 'const', constVal: Red },\n                    },\n                    scale: undefined,\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entity1: {\n                    value: {\n                        type: 'const',\n                        constVal: true,\n                    },\n                    decimal: undefined,\n                    factor: undefined,\n                    unit: undefined,\n                },\n                text: {\n                    true: undefined,\n                    false: undefined,\n                },\n                setNavi: {\n                    type: 'const',\n                    constVal: '3',\n                },\n                setValue1: undefined,\n            },\n        },\n    ],\n    config: {\n        card: 'cardThermo',\n        data: {\n            headline: {\n                type: 'const',\n                constVal: 'headline',\n            },\n            current: {\n                type: 'const',\n                constVal: '20',\n            },\n            unit: {\n                type: 'const',\n                constVal: '\u00B0C',\n            },\n            text1: {\n                type: 'const',\n                constVal: 'text1',\n            },\n            text2: {\n                type: 'const',\n                constVal: 'text2',\n            },\n            minTemp: {\n                type: 'const',\n                constVal: '10',\n            },\n            maxTemp: {\n                type: 'const',\n                constVal: '60',\n            },\n            tempStep: {\n                type: 'const',\n                constVal: '5',\n            },\n            set1: { type: 'state', dp: '0_userdata.0.number1' },\n            //set2: { type: 'state', dp: '0_userdata.0.number2' },\n        },\n    },\n    items: undefined,\n    useColor: false,\n};\nconst pageScreensaverTest: ScreensaverConfig = {\n    card: 'screensaver',\n    // mode of screensaver\n    mode: 'advanced',\n    // in 0 no rotation otherwise < 3 sec = 3 sec for testing -\n    rotationTime: 0,\n    // Config of Entitys\n    entitysConfig: {\n        favoritEntity: [\n            {\n                entityIconSelect: undefined,\n                entityValue: {\n                    value: { type: 'triggered', dp: 'accuweather.0.Current.Temperature' },\n                    decimal: {\n                        type: 'const',\n                        constVal: null,\n                    },\n                    factor: undefined,\n                    unit: {\n                        type: 'const',\n                        constVal: '\u00B0C',\n                    },\n                },\n                entityDateFormat: {\n                    type: 'const',\n                    constVal: null,\n                },\n\n                entityIcon: {\n                    true: {\n                        value: {\n                            type: 'state',\n\n                            /** How to use\n                             * this run its own this. U dont have accress to variables that no definied for this.\n                             * Color: in a import of color.ts\n                             * val: is the incoming value - raw\n                             *\n                             * The best thing is to write the function with () => { here }. Then remove the () => {}\n                             * and convert it into a template literal, using ``. A return is mandatory.\n                             */\n                            read: `{\n                        switch (val) {\n                            case 30: // Hot\n                                return 'weather-sunny-alert'; // exceptional\n\n                            case 24: // Ice\n                            case 31: // Cold\n                                return 'snowflake-alert'; // exceptional\n\n                            case 7: // Cloudy\n                            case 8: // Dreary (Overcast)\n                            case 38: // Mostly Cloudy\n                                return 'weather-cloudy'; // cloudy\n\n                            case 11: // fog\n                                return 'weather-fog'; // fog\n\n                            case 25: // Sleet\n                                return 'weather-hail'; // Hail\n\n                            case 15: // T-Storms\n                                return 'weather-lightning'; // lightning\n\n                            case 16: // Mostly Cloudy w/ T-Storms\n                            case 17: // Partly Sunny w/ T-Storms\n                            case 41: // Partly Cloudy w/ T-Storms\n                            case 42: // Mostly Cloudy w/ T-Storms\n                                return 'weather-lightning-rainy'; // lightning-rainy\n\n                            case 33: // Clear\n                            case 34: // Mostly Clear\n                            case 37: // Hazy Moonlight\n                                return 'weather-night';\n\n                            case 3: // Partly Sunny\n                            case 4: // Intermittent Clouds\n                            case 6: // Mostly Cloudy\n                            case 35: // Partly Cloudy\n                            case 36: // Intermittent Clouds\n                                return 'weather-partly-cloudy'; // partlycloudy\n\n                            case 18: // pouring\n                                return 'weather-pouring'; // pouring\n\n                            case 12: // Showers\n                            case 13: // Mostly Cloudy w/ Showers\n                            case 14: // Partly Sunny w/ Showers\n                            case 26: // Freezing Rain\n                            case 39: // Partly Cloudy w/ Showers\n                            case 40: // Mostly Cloudy w/ Showers\n                                return 'weather-rainy'; // rainy\n\n                            case 19: // Flurries\n                            case 20: // Mostly Cloudy w/ Flurries\n                            case 21: // Partly Sunny w/ Flurries\n                            case 22: // Snow\n                            case 23: // Mostly Cloudy w/ Snow\n                            case 43: // Mostly Cloudy w/ Flurries\n                            case 44: // Mostly Cloudy w/ Snow\n                                return 'weather-snowy'; // snowy\n\n                            case 29: // Rain and Snow\n                                return 'weather-snowy-rainy'; // snowy-rainy\n\n                            case 1: // Sunny\n                            case 2: // Mostly Sunny\n                            case 5: // Hazy Sunshine\n                                return 'weather-sunny'; // sunny\n\n                            case 32: // windy\n                                return 'weather-windy'; // windy\n\n                            default:\n                                return 'alert-circle-outline';\n                        }\n                    }`,\n\n                            dp: 'accuweather.0.Current.WeatherIcon',\n                        },\n                        color: {\n                            type: 'triggered',\n                            dp: 'accuweather.0.Current.WeatherIcon',\n                            read: `switch (val) {\n                        case 24: // Ice\n                        case 30: // Hot\n                        case 31: // Cold\n                            return swExceptional; // exceptional\n\n                        case 7: // Cloudy\n                        case 8: // Dreary (Overcast)\n                        case 38: // Mostly Cloudy\n                            return swCloudy; // cloudy\n\n                        case 11: // fog\n                            return swFog; // fog\n\n                        case 25: // Sleet\n                            return swHail; // Hail\n\n                        case 15: // T-Storms\n                            return swLightning; // lightning\n\n                        case 16: // Mostly Cloudy w/ T-Storms\n                        case 17: // Partly Sunny w/ T-Storms\n                        case 41: // Partly Cloudy w/ T-Storms\n                        case 42: // Mostly Cloudy w/ T-Storms\n                            return swLightningRainy; // lightning-rainy\n\n                        case 33: // Clear\n                        case 34: // Mostly Clear\n                        case 37: // Hazy Moonlight\n                            return swClearNight;\n\n                        case 3: // Partly Sunny\n                        case 4: // Intermittent Clouds\n                        case 6: // Mostly Cloudy\n                        case 35: // Partly Cloudy\n                        case 36: // Intermittent Clouds\n                            return swPartlycloudy; // partlycloudy\n\n                        case 18: // pouring\n                            return swPouring; // pouring\n\n                        case 12: // Showers\n                        case 13: // Mostly Cloudy w/ Showers\n                        case 14: // Partly Sunny w/ Showers\n                        case 26: // Freezing Rain\n                        case 39: // Partly Cloudy w/ Showers\n                        case 40: // Mostly Cloudy w/ Showers\n                            return swRainy; // rainy\n\n                        case 19: // Flurries\n                        case 20: // Mostly Cloudy w/ Flurries\n                        case 21: // Partly Sunny w/ Flurries\n                        case 22: // Snow\n                        case 23: // Mostly Cloudy w/ Snow\n                        case 43: // Mostly Cloudy w/ Flurries\n                        case 44: // Mostly Cloudy w/ Snow\n                            return swSnowy; // snowy\n\n                        case 29: // Rain and Snow\n                            return swSnowyRainy; // snowy-rainy\n\n                        case 1: // Sunny\n                        case 2: // Mostly Sunny\n                        case 5: // Hazy Sunshine\n                            return swSunny; // sunny\n\n                        case 32: // windy\n                            return swWindy; // windy\n\n                        default:\n                            return White;\n                    }`,\n                        },\n                    },\n\n                    false: { value: undefined, color: undefined },\n\n                    scale: undefined,\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n\n                entityText: {\n                    true: undefined,\n                    false: undefined,\n                },\n            },\n        ],\n        leftEntity: [\n            {\n                entityValue: {\n                    value: {\n                        type: 'state',\n                        dp: 'accuweather.0.Current.WindSpeed',\n                    },\n                    decimal: {\n                        type: 'const',\n                        constVal: 1,\n                    },\n                    factor: {\n                        type: 'const',\n                        constVal: 1000 / 3600,\n                    },\n                    unit: {\n                        type: 'const',\n                        constVal: 'm/s',\n                    },\n                },\n                entityDateFormat: undefined,\n\n                entityIcon: {\n                    true: {\n                        value: {\n                            type: 'const',\n                            constVal: 'weather-windy',\n                        },\n                        color: undefined,\n                    },\n                    false: {\n                        value: undefined,\n                        color: undefined,\n                    },\n\n                    scale: {\n                        type: 'const',\n                        constVal: { val_min: 0, val_max: 80 },\n                    },\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n\n                entityIconSelect: undefined,\n\n                entityText: {\n                    true: {\n                        type: 'const',\n                        constVal: 'Wind',\n                    },\n                    false: undefined,\n                },\n            },\n            {\n                entityValue: {\n                    value: {\n                        type: 'state',\n                        dp: 'accuweather.0.Current.WindGust',\n                    },\n                    decimal: {\n                        type: 'const',\n                        constVal: 1,\n                    },\n                    factor: {\n                        type: 'const',\n                        constVal: 1000 / 3600,\n                    },\n                    unit: {\n                        type: 'const',\n                        constVal: 'm/s',\n                    },\n                },\n                entityDateFormat: undefined,\n                entityIcon: {\n                    true: {\n                        value: {\n                            type: 'const',\n                            constVal: 'weather-tornado',\n                        },\n                        color: undefined,\n                    },\n                    false: {\n                        value: undefined,\n                        color: undefined,\n                    },\n\n                    scale: {\n                        type: 'const',\n                        constVal: { val_min: 0, val_max: 7.2 },\n                    },\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entityIconSelect: undefined,\n                entityText: {\n                    true: {\n                        type: 'const',\n                        constVal: 'B\u00F6en',\n                    },\n                    false: undefined,\n                },\n            },\n            {\n                entityValue: {\n                    value: {\n                        type: 'state',\n                        dp: 'accuweather.0.Current.WindDirectionText',\n                    },\n                    decimal: {\n                        type: 'const',\n                        constVal: 0,\n                    },\n                    factor: undefined,\n                    unit: {\n                        type: 'const',\n                        constVal: '\u00B0',\n                    },\n                },\n                entityDateFormat: undefined,\n\n                entityIcon: {\n                    true: {\n                        value: {\n                            type: 'const',\n                            constVal: 'windsock',\n                        },\n                        color: {\n                            type: 'const',\n                            constVal: '#FF00FF',\n                        },\n                    },\n                    false: {\n                        value: undefined,\n                        color: undefined,\n                    },\n                    scale: undefined,\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entityIconSelect: undefined,\n\n                entityText: {\n                    true: {\n                        type: 'const',\n                        constVal: 'Windr.',\n                    },\n                    false: undefined,\n                },\n            },\n        ],\n        bottomEntity: [\n            {\n                entityValue: {\n                    value: {\n                        type: 'state',\n                        dp: 'accuweather.0.Daily.Day1.Sunrise',\n                        forceType: 'string',\n                    },\n                    decimal: {\n                        type: 'const',\n                        constVal: 0,\n                    },\n                    factor: {\n                        type: 'const',\n                        constVal: 1,\n                    },\n                    unit: {\n                        type: 'const',\n                        constVal: '\u00B0C',\n                    },\n                },\n\n                entityDateFormat: {\n                    type: 'const',\n                    constVal: JSON.stringify({ hour: '2-digit', minute: '2-digit' }),\n                },\n\n                entityIcon: {\n                    true: {\n                        value: {\n                            type: 'const',\n                            constVal: 'weather-sunset-up',\n                        },\n                        color: {\n                            type: 'const',\n                            constVal: Yellow,\n                        },\n                    },\n                    false: {\n                        value: undefined,\n                        color: {\n                            type: 'const',\n                            constVal: Blue,\n                        },\n                    },\n                    scale: undefined,\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n\n                entityIconSelect: undefined,\n\n                entityText: {\n                    true: {\n                        type: 'const',\n                        constVal: 'TokenSun',\n                    },\n                    false: undefined,\n                },\n            },\n            {\n                entityValue: {\n                    value: {\n                        type: 'state',\n                        dp: 'accuweather.0.Current.WindSpeed',\n                    },\n                    decimal: {\n                        type: 'const',\n                        constVal: 1,\n                    },\n                    factor: {\n                        type: 'const',\n                        constVal: 1000 / 3600,\n                    },\n                    unit: {\n                        type: 'const',\n                        constVal: 'm/s',\n                    },\n                },\n                entityDateFormat: undefined,\n\n                entityIcon: {\n                    true: {\n                        value: {\n                            type: 'const',\n                            constVal: 'weather-windy',\n                        },\n                        color: undefined,\n                    },\n                    false: {\n                        value: undefined,\n                        color: undefined,\n                    },\n\n                    scale: {\n                        type: 'const',\n                        constVal: { val_min: 0, val_max: 80 },\n                    },\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n\n                entityIconSelect: undefined,\n\n                entityText: {\n                    true: {\n                        type: 'const',\n                        constVal: 'Wind',\n                    },\n                    false: undefined,\n                },\n            },\n            {\n                entityValue: {\n                    value: {\n                        type: 'state',\n                        dp: 'accuweather.0.Current.WindGust',\n                    },\n                    decimal: {\n                        type: 'const',\n                        constVal: 1,\n                    },\n                    factor: {\n                        type: 'const',\n                        constVal: 1000 / 3600,\n                    },\n                    unit: {\n                        type: 'const',\n                        constVal: 'm/s',\n                    },\n                },\n                entityDateFormat: undefined,\n                entityIcon: {\n                    true: {\n                        value: {\n                            type: 'const',\n                            constVal: 'weather-tornado',\n                        },\n                        color: undefined,\n                    },\n                    false: {\n                        value: undefined,\n                        color: undefined,\n                    },\n\n                    scale: {\n                        type: 'const',\n                        constVal: { val_min: 0, val_max: 7.2 },\n                    },\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entityIconSelect: undefined,\n                entityText: {\n                    true: {\n                        type: 'const',\n                        constVal: 'B\u00F6en',\n                    },\n                    false: undefined,\n                },\n            },\n            {\n                entityValue: {\n                    value: {\n                        type: 'state',\n                        dp: 'accuweather.0.Current.WindDirectionText',\n                    },\n                    decimal: {\n                        type: 'const',\n                        constVal: 0,\n                    },\n                    factor: undefined,\n                    unit: {\n                        type: 'const',\n                        constVal: '\u00B0',\n                    },\n                },\n                entityDateFormat: undefined,\n\n                entityIcon: {\n                    true: {\n                        value: {\n                            type: 'const',\n                            constVal: 'windsock',\n                        },\n                        color: {\n                            type: 'const',\n                            constVal: '#FF00FF',\n                        },\n                    },\n                    false: {\n                        value: undefined,\n                        color: undefined,\n                    },\n                    scale: undefined,\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entityIconSelect: undefined,\n\n                entityText: {\n                    true: {\n                        type: 'const',\n                        constVal: 'Windr.',\n                    },\n                    false: undefined,\n                },\n            },\n            {\n                entityValue: {\n                    value: {\n                        type: 'state',\n                        dp: 'accuweather.0.Current.RelativeHumidity',\n                    },\n                    decimal: {\n                        type: 'const',\n                        constVal: 1,\n                    },\n                    factor: undefined,\n                    unit: {\n                        type: 'const',\n                        constVal: '%',\n                    },\n                },\n                entityDateFormat: undefined,\n\n                entityIcon: {\n                    true: {\n                        value: {\n                            type: 'const',\n                            constVal: 'water-percent',\n                        },\n                        color: undefined,\n                    },\n                    false: {\n                        value: undefined,\n                        color: undefined,\n                    },\n                    scale: {\n                        type: 'const',\n                        constVal: { val_min: 0, val_max: 100, val_best: 65 },\n                    },\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entityIconSelect: undefined,\n\n                entityText: {\n                    true: {\n                        type: 'const',\n                        constVal: 'Feuchte.',\n                    },\n                    false: undefined,\n                },\n            },\n            {\n                entityValue: {\n                    value: {\n                        type: 'state',\n                        dp: 'accuweather.0.Current.DewPoint',\n                    },\n                    decimal: {\n                        type: 'const',\n                        constVal: 1,\n                    },\n                    factor: undefined,\n                    unit: {\n                        type: 'const',\n                        constVal: '\u00B0C',\n                    },\n                },\n                entityDateFormat: undefined,\n\n                entityIcon: {\n                    true: {\n                        value: {\n                            type: 'const',\n                            constVal: 'thermometer-water',\n                        },\n                        color: {\n                            type: 'const',\n                            constVal: '#7799FF',\n                        },\n                    },\n                    false: {\n                        value: undefined,\n                        color: undefined,\n                    },\n                    scale: undefined,\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entityIconSelect: undefined,\n\n                entityText: {\n                    true: {\n                        type: 'const',\n                        constVal: 'Taup.',\n                    },\n                    false: undefined,\n                },\n            },\n        ],\n        alternateEntity: [],\n        indicatorEntity: [\n            {\n                entityValue: {\n                    value: {\n                        type: 'state',\n                        dp: 'accuweather.0.Daily.Day1.Sunrise',\n                        forceType: 'string',\n                    },\n                    decimal: {\n                        type: 'const',\n                        constVal: 0,\n                    },\n                    factor: {\n                        type: 'const',\n                        constVal: 1,\n                    },\n                    unit: {\n                        type: 'const',\n                        constVal: '\u00B0C',\n                    },\n                },\n\n                entityDateFormat: {\n                    type: 'const',\n                    constVal: JSON.stringify({ hour: '2-digit', minute: '2-digit' }),\n                },\n\n                entityIcon: {\n                    true: {\n                        value: {\n                            type: 'const',\n                            constVal: 'weather-sunset-up',\n                        },\n                        color: {\n                            type: 'const',\n                            constVal: Yellow,\n                        },\n                    },\n                    false: {\n                        value: undefined,\n                        color: {\n                            type: 'const',\n                            constVal: Blue,\n                        },\n                    },\n                    scale: undefined,\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n\n                entityIconSelect: undefined,\n\n                entityText: {\n                    true: {\n                        type: 'const',\n                        constVal: 'Sonne',\n                    },\n                    false: undefined,\n                },\n            },\n            {\n                entityValue: {\n                    value: {\n                        type: 'state',\n                        dp: 'accuweather.0.Current.WindGust',\n                    },\n                    decimal: {\n                        type: 'const',\n                        constVal: 1,\n                    },\n                    factor: {\n                        type: 'const',\n                        constVal: 1000 / 3600,\n                    },\n                    unit: {\n                        type: 'const',\n                        constVal: 'm/s',\n                    },\n                },\n                entityDateFormat: undefined,\n                entityIcon: {\n                    true: {\n                        value: {\n                            type: 'const',\n                            constVal: 'weather-tornado',\n                        },\n                        color: undefined,\n                    },\n                    false: {\n                        value: undefined,\n                        color: undefined,\n                    },\n\n                    scale: {\n                        type: 'const',\n                        constVal: { val_min: 0, val_max: 7.2 },\n                    },\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entityIconSelect: undefined,\n                entityText: {\n                    true: {\n                        type: 'const',\n                        constVal: 'B\u00F6en',\n                    },\n                    false: undefined,\n                },\n            },\n            {\n                entityValue: {\n                    value: {\n                        type: 'state',\n                        dp: 'accuweather.0.Current.WindDirectionText',\n                    },\n                    decimal: {\n                        type: 'const',\n                        constVal: 0,\n                    },\n                    factor: undefined,\n                    unit: {\n                        type: 'const',\n                        constVal: '\u00B0',\n                    },\n                },\n                entityDateFormat: undefined,\n\n                entityIcon: {\n                    true: {\n                        value: {\n                            type: 'const',\n                            constVal: 'windsock',\n                        },\n                        color: {\n                            type: 'const',\n                            constVal: '#FF00FF',\n                        },\n                    },\n                    false: {\n                        value: undefined,\n                        color: undefined,\n                    },\n                    scale: undefined,\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entityIconSelect: undefined,\n\n                entityText: {\n                    true: {\n                        type: 'const',\n                        constVal: 'Windr.',\n                    },\n                    false: undefined,\n                },\n            },\n            {\n                entityValue: {\n                    value: {\n                        type: 'state',\n                        dp: 'accuweather.0.Current.WindSpeed',\n                    },\n                    decimal: {\n                        type: 'const',\n                        constVal: 1,\n                    },\n                    factor: {\n                        type: 'const',\n                        constVal: 1000 / 3600,\n                    },\n                    unit: {\n                        type: 'const',\n                        constVal: 'm/s',\n                    },\n                },\n                entityDateFormat: undefined,\n\n                entityIcon: {\n                    true: {\n                        value: {\n                            type: 'const',\n                            constVal: 'weather-windy',\n                        },\n                        color: undefined,\n                    },\n                    false: {\n                        value: undefined,\n                        color: undefined,\n                    },\n\n                    scale: {\n                        type: 'const',\n                        constVal: { val_min: 0, val_max: 80 },\n                    },\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n\n                entityIconSelect: undefined,\n\n                entityText: {\n                    true: {\n                        type: 'const',\n                        constVal: 'Wind',\n                    },\n                    false: undefined,\n                },\n            },\n            {\n                entityValue: {\n                    value: {\n                        type: 'state',\n                        dp: 'accuweather.0.Current.WindGust',\n                    },\n                    decimal: {\n                        type: 'const',\n                        constVal: 1,\n                    },\n                    factor: {\n                        type: 'const',\n                        constVal: 1000 / 3600,\n                    },\n                    unit: {\n                        type: 'const',\n                        constVal: 'm/s',\n                    },\n                },\n                entityDateFormat: undefined,\n                entityIcon: {\n                    true: {\n                        value: {\n                            type: 'const',\n                            constVal: 'weather-tornado',\n                        },\n                        color: undefined,\n                    },\n                    false: {\n                        value: undefined,\n                        color: undefined,\n                    },\n\n                    scale: {\n                        type: 'const',\n                        constVal: { val_min: 0, val_max: 7.2 },\n                    },\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entityIconSelect: undefined,\n                entityText: {\n                    true: {\n                        type: 'const',\n                        constVal: 'B\u00F6en',\n                    },\n                    false: undefined,\n                },\n            },\n        ],\n        mrIconEntity: [\n            {\n                entityValue: {\n                    value: {\n                        type: 'state',\n                        dp: 'accuweather.0.Current.WindDirectionText',\n                    },\n                    decimal: {\n                        type: 'const',\n                        constVal: 0,\n                    },\n                    factor: undefined,\n                    unit: {\n                        type: 'const',\n                        constVal: '\u00B0',\n                    },\n                },\n                entityDateFormat: undefined,\n\n                entityIcon: {\n                    true: {\n                        value: {\n                            type: 'const',\n                            constVal: 'windsock',\n                        },\n                        color: {\n                            type: 'const',\n                            constVal: White,\n                        },\n                    },\n                    false: {\n                        value: undefined,\n                        color: undefined,\n                    },\n                    scale: undefined,\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entityIconSelect: undefined,\n\n                entityText: {\n                    true: {\n                        type: 'const',\n                        constVal: 'Windr.',\n                    },\n                    false: undefined,\n                },\n            },\n            {\n                entityValue: {\n                    value: {\n                        type: 'state',\n                        dp: 'accuweather.0.Current.WindDirectionText',\n                    },\n                    decimal: {\n                        type: 'const',\n                        constVal: 0,\n                    },\n                    factor: undefined,\n                    unit: {\n                        type: 'const',\n                        constVal: '\u00B0',\n                    },\n                },\n                entityDateFormat: undefined,\n\n                entityIcon: {\n                    true: {\n                        value: {\n                            type: 'const',\n                            constVal: 'windsock',\n                        },\n                        color: {\n                            type: 'const',\n                            constVal: '#FF00FF',\n                        },\n                    },\n                    false: {\n                        value: undefined,\n                        color: {\n                            type: 'const',\n                            constVal: '#FF00FF',\n                        },\n                    },\n                    scale: undefined,\n                    maxBri: undefined,\n                    minBri: undefined,\n                },\n                entityIconSelect: undefined,\n\n                entityText: {\n                    true: {\n                        type: 'const',\n                        constVal: 'Windr.',\n                    },\n                    false: undefined,\n                },\n            },\n        ],\n    },\n};\nexport const Testconfig: Partial<panelConfigPartial> = {\n    pages: [pageThermoTest, pageGridTest1, pageGrid2Test2, pageGridTest2, pageScreensaverTest, pageMediaTest],\n    // override by password.ts\n    navigation: [\n        {\n            name: 'main', //main ist die erste Seite\n            page: 'thermo1',\n            left: { single: '4' }, // Die 4 bezieht sich auf den name: 4\n            right: { single: '1', double: 'main' },\n        },\n        {\n            name: '1',\n            left: { single: '4' }, // Die 0 bezieht sich auf den name: 0\n            right: { single: '2' },\n            page: 'grid1', // das grid1 bezieht sich auf die uniqueID oben in pages\n        },\n        {\n            name: '2',\n            left: { single: '1' },\n            right: { single: '3' },\n            page: 'grid2',\n        },\n        {\n            name: '3',\n            left: { single: '2' },\n            right: { single: '4', double: 'main' },\n            page: 'media1',\n        },\n        {\n            name: '4',\n            left: { single: '3', double: '1' },\n            right: { single: '1', double: '2' },\n            page: 'grid3',\n        },\n    ],\n    topic: 'nspanel/ns_panel2',\n    name: 'Wohnzimmer',\n    config: {\n        // dat hier hat noch keine bedeutung glaube ich :)\n        momentLocale: '',\n        locale: 'de-DE',\n        iconBig1: false,\n        iconBig2: false,\n    },\n    timeout: 30, // dat kommt vom Admin\n};\n\n// TYPES\n\ntype PageBaseConfig = {\n    //    type: PlayerType;\n    card: Exclude<PageTypeCards, 'screensaver' | 'screensaver2'>;\n    initMode: 'auto' | 'custom';\n    uniqueID: string;\n    dpInit: string; // '' and initMode 'auto' throw an error\n    alwaysOn: 'none' | 'always' | 'action';\n    useColor: boolean;\n    pageItems: PageItemDataItemsOptions[];\n\n    //    mediaNamespace: string;\n    config: undefined | cardMediaDataItemOptions | cardGridDataItemOptions | cardThermoDataItemOptions;\n    items?: undefined;\n};\n\ntype cardGridDataItemOptions = {\n    card: 'cardGrid' | 'cardGrid2';\n    data: ChangeTypeOfKeys<PageGridBaseConfig, DataItemsOptions | undefined>;\n};\n\ntype cardThermoDataItemOptions = {\n    card: 'cardThermo';\n    data: ChangeTypeOfKeys<PageThermoBaseConfig, DataItemsOptions | undefined>;\n};\n\ntype cardMediaDataItemOptions = {\n    card: 'cardMedia';\n    data: ChangeTypeOfKeys<PageMediaBaseConfig, DataItemsOptions | undefined> & {\n        toolbox: (toolboxItem | undefined)[];\n    } & { logo: toolboxItem | undefined };\n};\n\ntype ChangeTypeOfKeys<Obj, N> = Obj extends\n    | object\n    | listItem\n    | PageTypeCards\n    | IconBoolean\n    | TextEntryType\n    | ValueEntryType\n    | RGB\n    | ColorEntryType\n    | IconScaleElement\n    | PageMediaBaseConfig\n    | SerialTypePageElements\n    ? Obj extends RGB | IconScaleElement\n        ? N\n        : {\n              [K in keyof Obj]: ChangeTypeOfKeys<Obj[K], N>;\n          }\n    : N;\ntype PageMediaBaseConfig = {\n    headline: string;\n    alwaysOnDisplay: boolean;\n    album: string;\n    titel: listItem;\n    duration: string;\n    elapsed: string;\n    artist: listItem;\n    shuffle: string;\n    volume: ScaledNumberType;\n    icon: string;\n    play: string;\n    mediaState: string;\n    stop: string;\n    pause: string;\n    forward: string;\n    backward: string;\n};\n\ntype PageGridBaseConfig = {\n    headline: string;\n};\n\ntype PageThermoBaseConfig = {\n    current: number;\n    auto?: boolean;\n    boost?: boolean;\n    error?: boolean;\n    humidity?: number;\n    manual?: boolean;\n    mode?: string;\n    party?: boolean;\n    unreach?: boolean;\n    windowopen?: boolean;\n    cool?: boolean;\n    heat?: boolean;\n    lowbat?: boolean;\n    maintain?: boolean;\n    power?: boolean;\n    set1: boolean;\n    set2?: boolean;\n    speed?: number;\n    swing?: number;\n    unit: string;\n    headline: string;\n    text1: string;\n    text2: string;\n    minTemp: number; // *10\n    maxTemp: number; // *10\n    tempStep: number; // *10\n    icon?: string;\n    color?: string;\n};\ninterface panelConfigPartial extends Partial<panelConfigTop> {\n    format?: Partial<Intl.DateTimeFormatOptions>;\n    controller: never;\n    topic: string;\n    name: string;\n    pages: PageConfigAll[];\n    navigation: NavigationConfig['navigationConfig'];\n    config: ScreensaverConfigType;\n}\ntype PageConfigAll = ScreensaverConfig | PageBaseConfig;\ninterface NavigationConfig {\n    adapter: never;\n    panel: never;\n    navigationConfig: NavigationItemConfig[];\n}\ntype ScreensaverConfigType = {\n    momentLocale: string;\n    locale: string; //Intl.DateTimeFormat;\n    iconBig1: boolean;\n    iconBig2: boolean;\n};\ntype NavigationItemConfig = {\n    name: string;\n    left?: {\n        single?: string;\n        double?: string;\n    };\n    right?: {\n        single?: string;\n        double?: string;\n    };\n    page: string;\n} | null;\ntype ScreensaverConfig = {\n    card: Extract<PageTypeCards, 'screensaver' | 'screensaver2'>;\n    mode: ScreensaverModeType;\n    entitysConfig: ScreensaverOptionsType;\n    rotationTime: number;\n};\ntype ScreensaverOptionsType = {\n    favoritEntity: Config['screensaver']['favoritEntity'];\n    leftEntity: Config['screensaver']['leftEntity'];\n    bottomEntity: Config['screensaver']['bottomEntity'];\n    alternateEntity: Config['screensaver']['alternateEntity'];\n    indicatorEntity: Config['screensaver']['indicatorEntity'];\n    mrIconEntity: Config['screensaver']['mrIconEntity'];\n};\ntype Config = {\n    leftEntity: boolean;\n    indicatorEntity: any;\n    mrIcon1Entity: any;\n    mrIcon2Entity: any;\n    panelRecvTopic: string;\n    panelSendTopic: string;\n    weatherEntity: string;\n    screensaver: {\n        favoritEntity: [ScreenSaverElement];\n        leftEntity: ScreenSaverElement[];\n        bottomEntity: ScreenSaverElement[];\n        alternateEntity: [ScreenSaverElement?];\n        indicatorEntity: ScreenSaverElement[];\n        mrIconEntity: [ScreenSaverElement, ScreenSaverElement];\n    };\n    defaultColor: RGB;\n    defaultOnColor: RGB;\n    defaultOffColor: RGB;\n    defaultBackgroundColor: RGB;\n};\ntype ScreenSaverElement = {\n    entityValue: ChangeTypeOfKeys<ValueEntryType, DataItemsOptions | undefined>;\n    entityDateFormat: ScreenSaverElementConfig;\n    entityIcon: ChangeTypeOfKeys<IconEntryType, DataItemsOptions | undefined>;\n    entityText: ChangeTypeOfKeys<TextEntryType, DataItemsOptions | undefined>;\n    entityIconSelect: ScreenSaverElementConfig;\n};\ntype DataItemsOptions = {\n    name?: string;\n    scale?: { min: number; max: number };\n} & (DataItemsOptionsConst | DataItemsOptionsState | DataItemsOptionsTriggered | DataItemsOptionsInternal);\n\ntype DataItemsOptionsAuto = {\n    mode: 'auto' | 'done'; // not set means custom\n    role: PageRole | PageRole[];\n};\ntype DataItemsOptionsCustom = {\n    mode?: 'custom'; // not set means custom\n    role?: string;\n};\n\ntype DataItemsOptionsConst = {\n    type: 'const';\n    role?: string;\n    constVal: StateValue | AllIcons;\n    state?: State | null; // use just inside of class\n    forceType?: 'string' | 'number' | 'boolean'; // force a type\n};\ntype DataItemsOptionsInternal = {\n    type: 'internal';\n    role?: string;\n    dp: internalDatapoints;\n    read?: string | ((val: any) => any);\n    write?: string | ((val: any) => any);\n};\ntype DataItemsOptionsState = (DataItemsOptionsAuto | DataItemsOptionsCustom) & {\n    type: 'state';\n    dp: string;\n    state?: State | null; // use just inside of class\n    substring?: [number, number | undefined]; // only used with getString()\n    forceType?: 'string' | 'number' | 'boolean'; // force a type\n    read?: string | ((val: any) => any);\n    write?: string | ((val: any) => any);\n    response?: 'now' | 'medium' | 'slow';\n};\ntype DataItemsOptionsTriggered = (DataItemsOptionsAuto | DataItemsOptionsCustom) & {\n    type: 'triggered';\n    dp: string;\n    state?: State | null; // use just inside of class\n    substring?: [number, number | undefined]; // only used with getString()\n    forceType?: 'string' | 'number' | 'boolean'; // force a type\n    read?: string | ((val: any) => any);\n    write?: string | ((val: any) => any);\n    response?: 'now' | 'medium' | 'slow';\n};\n\ntype internalDatapoints = 'Relais1' | 'Relais2';\n\ntype ScreensaverModeType = 'standard' | 'alternate' | 'advanced';\n\ninterface State extends Omit<ioBroker.State, 'val'> {\n    val: StateValue;\n}\ntype StateValue = ioBroker.StateValue | object;\ntype RGB = {\n    red: number;\n    green: number;\n    blue: number;\n};\nexport type PageItemButton = Pick<PageItemBase, 'setValue1' | 'text' | 'icon' | 'color' | 'entity1' | 'setNavi'>;\nexport type PageItemButtonDataItemsOptions = {\n    type: 'button';\n    data: ChangeTypeOfPageItem<PageItemButton, DataItemsOptions | undefined>;\n};\n\nexport type PageItemLight = Pick<\n    PageItemBase,\n    'setValue1' | 'text' | 'icon' | 'color' | 'entity1' | 'Red' | 'Green' | 'Blue' | 'saturation' | 'dimmer' | 'hue'\n>;\nexport type PageItemLightDataItemsOptions = {\n    type: 'light';\n    data: ChangeTypeOfPageItem<PageItemLight, DataItemsOptions | undefined>;\n};\n\nexport type PageItemInputSel = Pick<\n    PageItemBase,\n    'entity1' | 'text' | 'icon' | 'color' | 'headline' | 'valueList' | 'setList'\n>;\nexport type PageItemInputSelDataItemsOptions = {\n    type: 'input_sel';\n    data: ChangeTypeOfPageItem<PageItemInputSel, DataItemsOptions | undefined>;\n};\n\nexport type PageItemBase = {\n    headline?: string;\n    color?: ColorEntryType;\n    icon?: IconEntryType;\n    text?: TextEntryType;\n    entity1: ValueEntryType; // Readonly Werte die angezeigt werden soll.\n    entity2?: ValueEntryType; // Readonly Werte die angezeigt werden soll.\n    entity3?: ValueEntryType; // Readonly Werte die angezeigt werden soll.\n    text1?: TextEntryType;\n    text2?: TextEntryType;\n    text3?: TextEntryType;\n    setValue1?: string;\n    setValue2?: string;\n    setValue3?: string;\n    valueList?: number;\n    setNavi?: number;\n    setList?: number;\n    maxValue1?: number;\n    minValue1?: number;\n    minValue2?: number;\n    maxValue2?: number;\n    interpolateColor?: boolean;\n    dimmer?: number | boolean;\n    hue?: string;\n    saturation?: string;\n    useColor: string;\n    Red?: number;\n    Green?: number;\n    Blue?: number;\n};\n\nexport type PageTypeUnionTemplate = {\n    role: roles;\n    type: SerialTypePageElements;\n    data: {\n        headline?: string | undefined;\n        color?: RGB | undefined;\n        icon?: { true: { value: string; color: RGB | null }; false: { value: string; color: RGB | null } } | undefined;\n        text?: { true: string; false: string } | undefined;\n        entity1: true | undefined | 'invert' | '';\n        entity2?: true | undefined | 'invert';\n        entity3?: true | undefined | 'invert';\n        text1?: { true: string; false: string } | undefined;\n        text2?: { true: string; false: string } | undefined;\n        text3?: { true: string; false: string } | undefined;\n        setValue1?: true | undefined;\n        setValue2?: true | undefined;\n        setValue3?: true | undefined;\n        modeList?: true | undefined;\n        maxValue1?: number | undefined;\n        minValue1?: number | undefined;\n        minValue2?: number | undefined;\n        maxValue2?: number | undefined;\n        interpolateColor?: true | undefined;\n        dimmer?: true | undefined;\n        hue?: true | undefined;\n        saturation?: true | undefined;\n        useColor?: true | undefined;\n        RGB3?: true | undefined;\n        optionalData?: any[] | string | true | undefined; //shutter icons - string for true?false or just true\n    };\n};\n//XOR<XOR<A, B>, C>\n\nexport type PageItemUnion = {\n    role:\n        | 'socket'\n        | 'value.time'\n        | 'level.timer'\n        | 'level.mode.fan'\n        | 'value.alarmtime'\n        | 'light'\n        | 'dimmer'\n        | 'hue'\n        | 'ct'\n        | 'cie'\n        | 'rgbSingle'\n        | 'rgb'\n        | 'ct'\n        | 'blind'\n        | 'door'\n        | 'window'\n        | 'gate'\n        | 'motion'\n        | 'buttonSensor'\n        | 'button'\n        | 'media.repeat'\n        | 'text.list';\n    dpInit: string | undefined;\n    initMode: 'auto' | 'custom';\n    type: SerialTypePageElements;\n    data: PageItemBase;\n};\nexport type ChangeTypeOfPageItem<Obj, N> = Obj extends\n    | object\n    | IconBoolean\n    | TextEntryType\n    | ValueEntryType\n    | ColorEntryType\n    | PageItemBase\n    ? Obj extends undefined\n        ? undefined\n        : Obj extends RGB\n          ? N\n          : {\n                [K in keyof Obj]: ChangeTypeOfPageItem<Obj[K], N>;\n            }\n    : N;\n\nexport type PageItemDataItemsOptions = Omit<PageItemUnion, 'data' | 'type'> &\n    (PageItemButtonDataItemsOptions | PageItemInputSelDataItemsOptions | PageItemLightDataItemsOptions);\n\nexport type ColorEntryType = Record<BooleanUnion, RGB> & { scale?: IconScaleElement };\n\nexport type IconEntryType = Record<BooleanUnion, { value: string; color: RGB }> & {\n    scale: IconScaleElement | undefined;\n    maxBri: string;\n    minBri: string;\n};\n\nexport type TextEntryType = Record<BooleanUnion, string>;\n\nexport type ValueEntryType =\n    | {\n          value: number;\n          decimal: number;\n          factor: number;\n          unit: string;\n          minScale?: number;\n          maxScale?: number;\n      }\n    | undefined;\nexport type ScaledNumberType =\n    | {\n          value: number;\n          minScale?: number;\n          maxScale?: number;\n      }\n    | undefined;\ntype BooleanUnion = 'true' | 'false';\ntype IconBoolean = Record<BooleanUnion, string | undefined>;\n\nexport type SerialTypePageElements =\n    | 'button' //~button~button.entityName~3~17299~bt-name~bt-text\n    | 'light' // ~light~light.entityName~1~17299~Light1~0\n    | 'shutter' // ~shutter~cover.entityName~0~17299~Shutter2~iconUp|iconStop|iconDown\n    | 'text' // ~text~sensor.entityName~3~17299~Temperature~content\n    | 'input_sel' //~input_sel~input_select.entityName~3~17299~sel-name~sel-text\n    | 'number' //~number~input_number.entityName~4~17299~Number123~value|min|max\n    | 'switch' // ~switch~switch.entityName~4~17299~Switch1~0\n    | 'delete'; //~delete~~~~~\n\nexport type SerialTypePopup =\n    | 'button'\n    | 'light'\n    | 'shutter'\n    | 'text'\n    | 'input_sel'\n    | 'timer'\n    | 'number'\n    | 'fan'\n    | 'switch'\n    | 'delete';\n\nexport type roles =\n    | 'light'\n    | 'socket'\n    | 'dimmer'\n    | 'hue'\n    | 'rgb'\n    | 'rgbSingle'\n    | 'cd'\n    | 'blind'\n    | 'door'\n    | 'window'\n    | 'volumeGroup'\n    | 'volume'\n    | 'info'\n    | 'humidity'\n    | 'temperature'\n    | 'value.temperature'\n    | 'value.humidity'\n    | 'sensor.door'\n    | 'sensor.window'\n    | 'thermostat'\n    | 'warning'\n    | 'ct'\n    | 'cie'\n    | 'gate'\n    | 'motion'\n    | 'buttonSensor'\n    | 'button'\n    | 'value.time'\n    | 'level.timer'\n    | 'value.alarmtime'\n    | 'level.mode.fan'\n    | 'lock'\n    | 'slider'\n    | 'switch.mode.wlan'\n    | 'media'\n    | 'timeTable'\n    | 'airCondition';\n\nexport type IconScaleElement = {\n    val_min: number;\n    val_max: number;\n    val_best?: number;\n};\nexport type PageRole = PageMediaRoles;\nexport type PageTypeCards =\n    | 'cardChart'\n    | 'cardLChart'\n    | 'cardEntities'\n    | 'cardGrid'\n    | 'cardGrid2'\n    | 'cardThermo'\n    | 'cardMedia'\n    | 'cardUnlock'\n    | 'cardQR'\n    | 'cardAlarm'\n    | 'cardPower'\n    | 'screensaver'\n    | 'screensaver2'\n    | 'cardBurnRec'\n    | 'cardItemSpecial'; // besonders, interne Card zum verwalten von pageItems\ntype ScreenSaverElementConfig = DataItemsOptions | undefined;\nexport type listItem =\n    | {\n          on: string;\n          text: string;\n          color: ColorEntryType | string | undefined;\n          icon?: IconBoolean | string | undefined;\n          list?: string | undefined;\n      }\n    | undefined; // mean string start with getState(' and end with ').val\nexport type toolboxItem = ChangeTypeOfKeys<listItem, DataItemsOptions | undefined> & {\n    action: MediaToolBoxAction;\n};\n\nexport type MediaToolBoxAction =\n    | 'speaker'\n    | 'play'\n    | 'tool'\n    | 'track'\n    | 'favor'\n    | 'equal'\n    | 'repeat'\n    | 'seek'\n    | 'cross'\n    | 'nexttool';\ntype panelConfigTop = { CustomFormat: string; locale: Intl.LocalesArgument; timeout: number };\ntype PageMediaRoles =\n    | 'button.play'\n    | 'button.pause'\n    | 'button.next'\n    | 'button.prev'\n    | 'button.stop'\n    | 'button.volume.up'\n    | 'button.volume.down'\n    | 'media.seek' // (common.type=number) %\n    | 'media.mode.shuffle' //(common.type=number) 0 - none, 1 - all, 2 - one\n    | 'media.mode.repeat' //(common.type=boolean)\n    | 'media.state' //['play','stop','pause'] or [0 - pause, 1 - play, 2 - stop] or [true - playing/false - pause]\n    | 'media.artist'\n    | 'media.album'\n    | 'media.title'\n    | 'media.duration'\n    | 'media.elapsed.text'\n    | 'media.elapsed'\n    | 'media.mute'\n    | 'level.volume'\n    | 'media.album'\n    | 'media.playlist';\n"],
  "mappings": "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",
  "names": []
}

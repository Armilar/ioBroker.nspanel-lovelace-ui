{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageAlarm.ts"],
  "sourcesContent": ["import { Page, PageInterface } from '../classes/Page';\nimport { White } from '../const/Color';\nimport { genericStateObjects } from '../const/definition';\nimport {\n    deepAssign,\n    getEntryTextOnOff,\n    getIconEntryColor,\n    getIconEntryValue,\n    getPayload,\n    getScaledNumber,\n    getValueEntryNumber,\n    getValueEntryString,\n} from '../const/tools';\nimport * as pages from '../types/pages';\nimport { IncomingEvent } from '../types/types';\n\nconst PageAlarmMessageDefault: pages.PageAlarmMessage = {\n    event: 'entityUpd',\n    headline: 'Page Grid',\n    intNameEntity: '',\n    navigation: 'button~bSubPrev~~~~~button~bSubNext~~~~',\n    button1: '',\n    button2: '',\n    button3: '',\n    button4: '',\n    icon: '',\n    iconColor: '',\n    numpad: 'disable',\n    flashing: 'disable',\n};\n\n/**\n * untested\n */\nexport class PageAlarm extends Page {\n    config: pages.PageBaseConfig['config'];\n    items: pages.PageBaseConfig['items'];\n    private step: number = 1;\n    private headlinePos: number = 0;\n    private titelPos: number = 0;\n    private nextArrow: boolean = false;\n    private status: 'disarmed' | 'armed' | 'arming' | 'pending' | 'triggered' = 'disarmed';\n\n    constructor(config: PageInterface, options: pages.PageBaseConfig) {\n        super(config, options.pageItems);\n        if (options.config && options.config.card == 'cardPower') this.config = options.config;\n        this.minUpdateInterval = 500;\n    }\n\n    async init(): Promise<void> {\n        const config = { ...this.config };\n        // search states for mode auto\n        const tempConfig: Partial<pages.cardAlarmDataItemOptions> = this.dpInit\n            ? await this.panel.statesControler.getDataItemsFromAuto(this.dpInit, config)\n            : config;\n        // create Dataitems\n        //this.log.debug(JSON.stringify(tempConfig));\n        const tempItem: Partial<pages.cardAlarmDataItems> = await this.panel.statesControler.createDataItems(\n            tempConfig,\n            this,\n        );\n        this.items = tempItem as pages.cardAlarmDataItems;\n        // set card because we lose it\n        this.items.card = 'cardAlarm';\n        this.library.writedp(\n            `panel.${this.name}.alarm.${this.uniqueID}`,\n            undefined,\n            genericStateObjects.panel.panels.alarm.cardAlarm._channel,\n        );\n    }\n\n    public async update(): Promise<void> {\n        const message: Partial<pages.PageAlarmMessage> = {};\n        const items = this.items;\n        if (!items || items.card !== 'cardAlarm') return;\n        const data = items.data;\n        message.headline =\n            (this.items && this.items.data.headline && (await this.items.data.headline.getString())) ?? '';\n        message.navigation = this.getNavigation();\n        //const entity1 = await getValueEntryNumber(data.entity1);\n        message.button1 = (data.button1 && (await data.button1.getString())) ?? '';\n        message.button2 = (data.button1 && (await data.button1.getString())) ?? '';\n        message.button3 = (data.button1 && (await data.button1.getString())) ?? '';\n        message.button4 = (data.button1 && (await data.button1.getString())) ?? '';\n\n        message.icon = await getIconEntryValue(data.icon, true, '');\n        message.iconColor = await getIconEntryColor(data.icon, true, '');\n\n        this.library.writedp(\n            `panel.${this.name}.alarm.${this.uniqueID}.status`,\n            ['disarmed', 'armed', 'arming', 'pending', 'triggered'].indexOf(this.status),\n            genericStateObjects.panel.panels.alarm.cardAlarm.status,\n        );\n\n        this.sendToPanel(this.getMessage(message));\n    }\n\n    private async getElementUpdate(\n        item: pages.cardPowerDataItems['data']['leftBottom'],\n    ): Promise<undefined | Partial<pages.PagePowerMessageItem>> {\n        if (item === undefined) return undefined;\n\n        const message: Partial<pages.PagePowerMessageItem> = {};\n\n        const value = await getValueEntryNumber(item.value);\n        if (value === null) return undefined;\n\n        message.icon = (await getIconEntryValue(item.icon, value >= 0, '')) ?? undefined;\n        message.iconColor = (await getIconEntryColor(item.icon, value, White)) ?? undefined;\n        message.name = (await getEntryTextOnOff(item.text, value >= 0)) ?? undefined;\n        message.speed = (await getScaledNumber(item.speed)) ?? undefined;\n        message.value = (await getValueEntryString(item.value, value)) ?? undefined;\n\n        return message;\n    }\n    private getMessage(message: Partial<pages.PageAlarmMessage>): string {\n        let result: pages.PageAlarmMessage = PageAlarmMessageDefault;\n        result = deepAssign(result, message) as pages.PageAlarmMessage;\n        return getPayload('entityUpd', result.headline, result.navigation, '', '');\n    }\n\n    private getMessageItem(i: pages.PagePowerMessageItem | undefined): string {\n        if (!i) return getPayload('', '', '', '', '', '', '');\n        return getPayload('', '', i.icon ?? '', i.iconColor ?? '', i.name ?? '', i.value ?? '', String(i.speed ?? ''));\n    }\n    protected async onStateTrigger(): Promise<void> {\n        this.update();\n    }\n    async onButtonEvent(_event: IncomingEvent): Promise<void> {\n        //if (event.page && event.id && this.pageItems) {\n        //    this.pageItems[event.id as any].setPopupAction(event.action, event.opt);\n        //}\n    }\n}\n"],
  "mappings": "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",
  "names": []
}

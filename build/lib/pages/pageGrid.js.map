{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageGrid.ts"],
  "sourcesContent": ["import { Page, PageInterface } from '../classes/Page';\nimport { getPayload, getPayloadArray } from '../const/tools';\nimport * as pages from '../types/pages';\nimport { IncomingEvent } from '../types/types';\nimport { PageItem } from './pageItem';\n\nconst PageGridMessageDefault: pages.PageGridMessage = {\n    event: 'entityUpd',\n    headline: 'Page Grid',\n    navigation: 'button~bSubPrev~~~~~button~bSubNext~~~~',\n    options: ['~~~~~', '~~~~~', '~~~~~', '~~~~~', '~~~~~', '~~~~~'],\n};\nconst PageGrid2MessageDefault: pages.PageGridMessage = {\n    event: 'entityUpd',\n    headline: 'Page Grid',\n    navigation: 'button~bSubPrev~~~~~button~bSubNext~~~~',\n    options: ['~~~~~', '~~~~~', '~~~~~', '~~~~~', '~~~~~', '~~~~~', '~~~~~', '~~~~~'],\n};\nexport class PageGrid extends Page {\n    config: pages.PageBaseConfig['config'];\n    items: pages.PageBaseConfig['items'];\n    private step: number = 1;\n    private headlinePos: number = 0;\n    private titelPos: number = 0;\n    private nextArrow: boolean = false;\n    tempItem: PageItem | undefined;\n\n    constructor(config: PageInterface, options: pages.PageBaseConfig) {\n        super(config, options);\n        this.config = options.config;\n        if (options.items && (options.items.card == 'cardGrid' || options.items.card == 'cardGrid2'))\n            this.items = options.items;\n        this.minUpdateInterval = 2000;\n    }\n\n    async init(): Promise<void> {\n        const config = structuredClone(this.config);\n        // search states for mode auto\n        const tempConfig: Partial<pages.cardGridDataItems> = this.dpInit\n            ? await this.panel.statesControler.getDataItemsFromAuto(this.dpInit, config)\n            : config;\n        // create Dataitems\n        //this.log.debug(JSON.stringify(tempConfig));\n        const tempItem: Partial<pages.cardGridDataItems> = await this.panel.statesControler.createDataItems(\n            tempConfig,\n            this,\n        );\n        this.items = tempItem as pages.cardGridDataItems;\n        // set card because we lose it\n        this.items.card = this.card as 'cardGrid' | 'cardGrid2';\n        await super.init();\n    }\n\n    public async update(): Promise<void> {\n        const message: Partial<pages.PageGridMessage> = {};\n        message.options = [];\n        if (this.pageItems) {\n            const maxItems = this.card === 'cardGrid' ? 6 : 8;\n            for (let a = 0; a < maxItems; a++) {\n                const temp = this.pageItems[a];\n                if (temp) message.options[a] = await temp.getPageItemPayload();\n            }\n        }\n        message.headline =\n            (this.items && this.items.data.headline && (await this.items.data.headline.getString())) ?? '';\n        message.navigation = this.getNavigation();\n        const msg: pages.PageGridMessage = Object.assign(\n            this.card === 'cardGrid' ? PageGridMessageDefault : PageGrid2MessageDefault,\n            message,\n        );\n\n        this.sendToPanel(this.getMessage(msg));\n    }\n    private getMessage(message: pages.PageGridMessage): string {\n        return getPayload('entityUpd', message.headline, message.navigation, getPayloadArray(message.options));\n    }\n    protected async onStateTrigger(): Promise<void> {\n        this.update();\n    }\n    async onButtonEvent(_event: IncomingEvent): Promise<void> {\n        //if (event.page && event.id && this.pageItems) {\n        //    this.pageItems[event.id as any].setPopupAction(event.action, event.opt);\n        //}\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAoC;AACpC,mBAA4C;AAK5C,MAAM,yBAAgD;AAAA,EAClD,OAAO;AAAA,EACP,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,SAAS,CAAC,SAAS,SAAS,SAAS,SAAS,SAAS,OAAO;AAClE;AACA,MAAM,0BAAiD;AAAA,EACnD,OAAO;AAAA,EACP,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,SAAS,CAAC,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,OAAO;AACpF;AACO,MAAM,iBAAiB,iBAAK;AAAA,EAC/B;AAAA,EACA;AAAA,EACQ,OAAe;AAAA,EACf,cAAsB;AAAA,EACtB,WAAmB;AAAA,EACnB,YAAqB;AAAA,EAC7B;AAAA,EAEA,YAAY,QAAuB,SAA+B;AAC9D,UAAM,QAAQ,OAAO;AACrB,SAAK,SAAS,QAAQ;AACtB,QAAI,QAAQ,UAAU,QAAQ,MAAM,QAAQ,cAAc,QAAQ,MAAM,QAAQ;AAC5E,WAAK,QAAQ,QAAQ;AACzB,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EAEA,MAAM,OAAsB;AACxB,UAAM,SAAS,gBAAgB,KAAK,MAAM;AAE1C,UAAM,aAA+C,KAAK,SACpD,MAAM,KAAK,MAAM,gBAAgB,qBAAqB,KAAK,QAAQ,MAAM,IACzE;AAGN,UAAM,WAA6C,MAAM,KAAK,MAAM,gBAAgB;AAAA,MAChF;AAAA,MACA;AAAA,IACJ;AACA,SAAK,QAAQ;AAEb,SAAK,MAAM,OAAO,KAAK;AACvB,UAAM,MAAM,KAAK;AAAA,EACrB;AAAA,EAEA,MAAa,SAAwB;AArDzC;AAsDQ,UAAM,UAA0C,CAAC;AACjD,YAAQ,UAAU,CAAC;AACnB,QAAI,KAAK,WAAW;AAChB,YAAM,WAAW,KAAK,SAAS,aAAa,IAAI;AAChD,eAAS,IAAI,GAAG,IAAI,UAAU,KAAK;AAC/B,cAAM,OAAO,KAAK,UAAU;AAC5B,YAAI;AAAM,kBAAQ,QAAQ,KAAK,MAAM,KAAK,mBAAmB;AAAA,MACjE;AAAA,IACJ;AACA,YAAQ,YACH,UAAK,SAAS,KAAK,MAAM,KAAK,YAAa,MAAM,KAAK,MAAM,KAAK,SAAS,UAAU,MAApF,YAA2F;AAChG,YAAQ,aAAa,KAAK,cAAc;AACxC,UAAM,MAA6B,OAAO;AAAA,MACtC,KAAK,SAAS,aAAa,yBAAyB;AAAA,MACpD;AAAA,IACJ;AAEA,SAAK,YAAY,KAAK,WAAW,GAAG,CAAC;AAAA,EACzC;AAAA,EACQ,WAAW,SAAwC;AACvD,eAAO,yBAAW,aAAa,QAAQ,UAAU,QAAQ,gBAAY,8BAAgB,QAAQ,OAAO,CAAC;AAAA,EACzG;AAAA,EACA,MAAgB,iBAAgC;AAC5C,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,MAAM,cAAc,QAAsC;AAAA,EAI1D;AACJ;",
  "names": []
}

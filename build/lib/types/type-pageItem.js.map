{
  "version": 3,
  "sources": ["../../../src/lib/types/type-pageItem.ts"],
  "sourcesContent": ["import { Dataitem } from '../classes/data-item';\nimport { RGB } from './Color';\nimport * as Types from './types';\nexport type PageBaseItem = {\n    id?: string | null;\n    icon?: string;\n    icon2?: string;\n    onColor?: RGB;\n    offColor?: RGB;\n    useColor?: boolean;\n    interpolateColor?: boolean;\n    minValueBrightness?: number;\n    maxValueBrightness?: number;\n    minValueColorTemp?: number;\n    maxValueColorTemp?: number;\n    minValueLevel?: number;\n    maxValueLevel?: number;\n    minValueTilt?: number;\n    maxValueTilt?: number;\n    minValue?: number;\n    maxValue?: number;\n    stepValue?: number;\n    prefixName?: string;\n    suffixName?: string;\n    name?: string;\n    secondRow?: string;\n    buttonText?: string;\n    unit?: string;\n    navigate?: boolean;\n    colormode?: string;\n    colorScale?: Types.IconScaleElement;\n    //adapterPlayerInstance?: adapterPlayerInstanceType,\n    targetPage?: string;\n    modeList?: string[];\n    hidePassword?: boolean;\n    autoCreateALias?: boolean;\n    yAxis?: string;\n    yAxisTicks?: number[] | string;\n    xAxisDecorationId?: string;\n    useValue?: boolean;\n    monobutton?: boolean;\n    inSel_ChoiceState?: boolean;\n    iconArray?: string[];\n    fontSize?: number;\n    actionStringArray?: string[];\n    alwaysOnDisplay?: boolean;\n};\nexport type PageLightItem = {\n    type: 'light' | 'dimmer' | 'brightnessSlider' | 'hue' | 'rgb';\n    bri: PageItemMinMaxValue;\n    ct: PageItemMinMaxValue;\n    hue: PageItemMinMaxValue; //0-360\n    rgb: RGB;\n};\n\ntype PageItemMinMaxValue = { min: number; max: number };\nexport type PageItemColorSwitch = { on: RGB; off: RGB };\n\n/*export type PageMediaItem = ChangeTypeOfKeys<PageMediaItemBase, Dataitem>;\nexport type PageMediaItemBase = {\n    alwaysOnDisplay: boolean;\n    id: string | null;\n    vol: PageItemMinMaxValue;\n    adapterPlayerInstance: Types.adapterPlayerInstanceType;\n    mediaDevice: string;\n    colorMediaIcon: RGB;\n    colorMediaArtist: RGB;\n    colorMediaTitle: RGB;\n    speakerList: string[];\n    playList: string[];\n    equalizerList: string[];\n    repeatList: string[];\n    globalTracklist: string[];\n    crossfade: boolean;\n} & PageBaseItemMedia;*/\n\nexport type PageThermoItem =\n    | ({\n          popupThermoMode1?: string[];\n          popupThermoMode2?: string[];\n          popupThermoMode3?: string[];\n          popUpThermoName?: string[];\n          setThermoAlias?: string[];\n          setThermoDestTemp2?: string;\n      } & PageBaseItem)\n    | ({\n          popupThermoMode1?: string[];\n          popupThermoMode2?: string[];\n          popupThermoMode3?: string[];\n          popUpThermoName?: string[];\n          setThermoAlias?: string[];\n          setThermoDestTemp2?: string;\n      } & PageBaseItem);\nexport type IconBoolean = Record<Types.BooleanUnion, string | undefined>;\nexport type ThisCardMessageTypes = 'input_sel' | 'button';\n/*export type MessageIstemMedia extends = {\n    type?: Extract<Types.SerialType, ThisCardMessageTypes> | '';\n    intNameEntity: string;\n    iconNumber: 0 | 1 | 2 | 3 | 4 | 5; // media0 usw.\n    mode: MediaToolBoxAction;\n    icon: string;\n    iconColor: string;\n    dislayName: string;\n    optionalValue?: string;\n};*/\n\nexport type MessageItemMedia = Partial<MessageItem> & {\n    type?: Extract<Types.SerialType, ThisCardMessageTypes>;\n    iconNumber: 0 | 1 | 2 | 3 | 4 | 5; // media0 usw.\n    mode: MediaToolBoxAction;\n};\nexport interface MessageItem extends MessageItemInterface {\n    mainId?: string;\n    subId?: string;\n}\nexport type entityUpdateDetailMessage =\n    | {\n          type: '2Sliders';\n          entityName: string;\n          icon?: undefined;\n          slidersColor: string | 'disable';\n          buttonState: boolean | 'disable';\n          slider1Pos: number | 'disable';\n          slider2Pos: number | 'disable';\n          hueMode: boolean;\n          hue_translation: string | '';\n          slider2Translation: string | '';\n          slider1Translation: string | '';\n          popup: boolean;\n      }\n    | {\n          type: 'insel';\n          entityName: string;\n          textColor: string;\n          headline: string;\n          list: string;\n      };\n\nexport type entityUpdateDetailMessageType = '2Sliders' | 'insel';\n\nexport type entityUpdateDetailMessageTemplate2 = Record<\n    PageItemUnion['role'] | Types.roles,\n    entityUpdateDetailMessageTemplate\n>;\n\nexport type entityUpdateDetailMessageTemplate =\n    | {\n          type: '2Sliders';\n          slidersColor: RGB | false;\n          buttonState: true | false;\n          slider1Pos: number | false;\n          slider2Pos: number | false;\n          hueMode: boolean;\n          hue_translation: string | false;\n          slider2Translation: string | false;\n          slider1Translation: string | false;\n          popup: boolean;\n      }\n    | {\n          type: 'popupShutter';\n          slider1Pos: number | false;\n          slider2Pos: number | false;\n          textHeadline: string | false;\n          textStatus: string | false;\n          iconUp: string | false;\n          iconStop: string | false;\n          iconDown: string | false;\n          iconUpStatus: string | false;\n          iconStopStatus: string | false;\n          iconDownStatus: string | false;\n          textTilt: string | false;\n          iconTiltLeft: string | false;\n          iconTiltStop: string | false;\n          iconTiltRight: string | false;\n          iconTiltLeftStatus: string | false;\n          iconTiltStopStatus: string | false;\n          iconTiltRightStatus: string | false;\n      }\n    | {\n          type: 'insel';\n          value: boolean;\n          textColor: RGB;\n          textHeadline: string | false;\n          list: string[] | false;\n      };\nexport type messageItemAllInterfaces = MessageItemMedia | MessageItem;\nexport interface MessageItemInterface {\n    type: Types.SerialType;\n    intNameEntity: string;\n    icon: string;\n    iconColor: string;\n    displayName: string;\n    optionalValue: string;\n}\nexport type MediaToolBoxAction =\n    | 'speaker'\n    | 'play'\n    | 'tool'\n    | 'track'\n    | 'favor'\n    | 'equal'\n    | 'repeat'\n    | 'seek'\n    | 'cross'\n    | 'nexttool';\nexport type PageItemBase = {\n    headline?: string;\n    color: ColorEntryType;\n    icon: IconEntryType;\n    text?: TextEntryType;\n    entity1: ValueEntryType; // Readonly Werte die angezeigt werden soll.\n    entity2?: ValueEntryType; // Readonly Werte die angezeigt werden soll.\n    entity3?: ValueEntryType; // Readonly Werte die angezeigt werden soll.\n    text1: string;\n    text2?: string;\n    text3?: string;\n    setValue1: string;\n    setValue2?: string;\n    setValue3?: string;\n    modeList?: number;\n    maxValue1?: number;\n    minValue1?: number;\n    minValue2?: number;\n    maxValue2?: number;\n    interpolateColor?: boolean;\n    dimmer?: number | boolean;\n    hue?: string;\n    saturation?: string;\n    useColor: string;\n    Red?: number;\n    Green?: number;\n    Blue?: number;\n};\n//XOR<XOR<A, B>, C>\n\nexport type PageItemUnion = {\n    role:\n        | 'socket'\n        | 'value.time'\n        | 'level.timer'\n        | 'level.mode.fan'\n        | 'value.alarmtime'\n        | 'light'\n        | 'dimmer'\n        | 'hue'\n        | 'ct'\n        | 'cie'\n        | 'rgbSingle'\n        | 'rgb'\n        | 'ct'\n        | 'blind'\n        | 'door'\n        | 'window'\n        | 'gate'\n        | 'motion'\n        | 'buttonSensor'\n        | 'button'\n        | 'media.repeat'\n        | 'text.list';\n\n    type: 'light';\n    data: PageItemBase;\n};\nexport type ChangeTypeOfPageItem<Obj, N> = Obj extends\n    | object\n    | IconBoolean\n    | TextEntryType\n    | ValueEntryType\n    | ColorEntryType\n    | PageItemBase\n    ? Obj extends undefined\n        ? undefined\n        : Obj extends RGB\n          ? N\n          : {\n                [K in keyof Obj]: ChangeTypeOfPageItem<Obj[K], N>;\n            }\n    : N;\nexport type PageItemDataitems = Omit<PageItemUnion, 'data'> & {\n    data: ChangeTypeOfPageItem<PageItemUnion['data'], Dataitem | undefined>;\n};\n\nexport type ColorEntryType = Record<Types.BooleanUnion, RGB> & { scale?: Types.IconScaleElement };\n\nexport type IconEntryType = Record<Types.BooleanUnion, { value: string; color: RGB }> & {\n    scale: Types.IconScaleElement | undefined;\n    maxBri: string;\n    minBri: string;\n};\n\nexport type TextEntryType = Record<Types.BooleanUnion, string>;\n\nexport type ValueEntryType =\n    | {\n          value: number;\n          decimal: number;\n          factor: number;\n          unit: string;\n      }\n    | undefined;\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}

{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageNotification.ts"],
  "sourcesContent": ["import { Page, PageInterface } from '../classes/Page';\nimport { White } from '../const/Color';\nimport {\n    getIconEntryColor,\n    getIconEntryValue,\n    getPayload,\n    getValueEntryBoolean,\n    getValueEntryNumber,\n    setTriggeredToState,\n} from '../const/tools';\nimport * as pages from '../types/pages';\nimport { IncomingEvent } from '../types/types';\nimport { PageItem } from './pageItem';\n\nexport class PageNotify extends Page {\n    config: pages.PageBaseConfig['config'];\n    items: pages.PageBaseConfig['items'];\n    private lastpage: Page | undefined;\n    private step: number = 1;\n    private headlinePos: number = 0;\n    private titelPos: number = 0;\n    private nextArrow: boolean = false;\n    tempItem: PageItem | undefined;\n\n    constructor(config: PageInterface, options: pages.PageBaseConfig) {\n        super(config, options);\n        this.config = options.config;\n        if (options.items && (options.items.card == 'popupNotify' || options.items.card == 'popupNotify2'))\n            this.items = options.items;\n        this.minUpdateInterval = 1000;\n        this.neverDeactivateTrigger = true;\n    }\n\n    async init(): Promise<void> {\n        const config = structuredClone(this.config);\n        // search states for mode auto\n        const tempConfig: Partial<pages.cardNotifyDataItemOptions> = this.dpInit\n            ? await this.panel.statesControler.getDataItemsFromAuto(this.dpInit, config)\n            : config;\n        setTriggeredToState(tempConfig, ['entity1']);\n        // create Dataitems\n\n        const tempItem: Partial<pages.cardNotifyDataItems> = await this.panel.statesControler.createDataItems(\n            tempConfig,\n            this,\n        );\n        this.items = tempItem as pages.cardNotifyDataItems;\n        // set card because we lose it\n        this.items.card = this.card as any;\n        await super.init();\n    }\n\n    setLastPage(p: Page | undefined): void {\n        if (p !== this) this.lastpage = p;\n    }\n\n    public async update(): Promise<void> {\n        const message: Partial<pages.PageNotifyMessage> = {};\n        const items = this.items;\n        if (!items) return;\n        let value: number | boolean | null = null;\n        if (items.card === 'popupNotify' || items.card === 'popupNotify2') {\n            const data = items.data;\n            value = await getValueEntryNumber(data.entity1);\n            if (value === null) value = (await getValueEntryBoolean(data.entity1)) ?? true;\n\n            message.headline = this.library.getTranslation((data.headline && (await data.headline.getString())) ?? '');\n            message.hColor = await getIconEntryColor(data.colorHeadline, value, White);\n\n            message.blText = (data.buttonLeft && (await data.buttonLeft.getString())) ?? '';\n            message.blColor = await getIconEntryColor(data.colorButtonLeft, value, White);\n\n            message.brText = (data.buttonRight && (await data.buttonRight.getString())) ?? '';\n            message.brColor = await getIconEntryColor(data.colorButtonRight, value, White);\n\n            message.text = (data.text && (await data.text.getString())) ?? '';\n            message.textColor = await getIconEntryColor(data.colorText, value, White);\n\n            message.timeout = (data.timeout && (await data.timeout.getNumber())) ?? 0;\n        }\n        if (items.card === 'popupNotify') {\n            this.sendToPanel(this.getMessage(message));\n            return;\n        } else if (items.card === 'popupNotify2') {\n            const data = items.data;\n            message.fontSet = (data.textSize && (await data.textSize.getString())) ?? '';\n            message.icon = await getIconEntryValue(data.icon, value, '');\n            message.iconColor = await getIconEntryColor(data.icon, value, White);\n            this.sendToPanel(this.getMessage2(message));\n            return;\n        }\n    }\n    private getMessage(message: Partial<pages.PageNotifyMessage>): string {\n        return getPayload(\n            'entityUpdateDetail',\n            this.id,\n            message.headline ?? '',\n            message.hColor ?? '',\n            message.blText ?? '',\n            message.blColor ?? '',\n            message.brText ?? '',\n            message.brColor ?? '',\n            message.text ?? '',\n            message.textColor ?? '',\n            String(message.timeout ?? 0),\n        );\n    }\n    private getMessage2(message: Partial<pages.PageNotifyMessage>): string {\n        return getPayload(\n            'entityUpdateDetail',\n            this.id,\n            message.headline ?? '',\n            message.hColor ?? '',\n            message.blText ?? '',\n            message.blColor ?? '',\n            message.brText ?? '',\n            message.brColor ?? '',\n            message.text ?? '',\n            message.textColor ?? '',\n            String(message.timeout ?? 0),\n            message.fontSet ?? '0',\n            message.icon ?? '',\n            message.iconColor ?? '',\n        );\n    }\n    protected async onStateTrigger(): Promise<void> {\n        this.panel.setActivePage(this);\n    }\n    async onButtonEvent(_event: IncomingEvent): Promise<void> {\n        this.log.debug('we are here');\n        if (_event.action === 'notifyAction') {\n            const data = this.items && this.items.card === 'popupNotify' && this.items.data;\n            if (data) {\n                if (data.setValue2) {\n                    if (_event.opt === 'yes') data.setValue1 && (await data.setValue1.setStateTrue());\n                    else data.setValue2 && (await data.setValue2.setStateTrue());\n                } else data.setValue1 && (await data.setValue1.setStateAsync(_event.opt === 'yes'));\n            }\n        }\n        if (this.lastpage) this.panel.setActivePage(this.lastpage);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../../../src/lib/controller/controller.ts"],
  "sourcesContent": ["import * as MQTT from '../classes/mqtt';\nimport * as Library from '../classes/library';\nimport { StatesControler } from './states-controller';\nimport * as Panel from './panel';\nimport { genericStateObjects } from '../const/definition';\n\nexport class Controller extends Library.BaseClass {\n    mqttClient: MQTT.MQTTClientClass;\n    statesControler: StatesControler;\n    panels: Panel.Panel[] = [];\n    private minuteLoopTimeout: ioBroker.Timeout | undefined;\n    private dateUpdateTimeout: ioBroker.Timeout | undefined;\n\n    constructor(\n        adapter: Library.AdapterClassDefinition,\n        options: { mqttClient: MQTT.MQTTClientClass; name: string; panels: Partial<Panel.panelConfigPartial>[] },\n    ) {\n        super(adapter, options.name);\n        this.adapter.controller = this;\n        this.mqttClient = options.mqttClient;\n        this.statesControler = new StatesControler(this.adapter);\n\n        for (const panelConfig of options.panels) {\n            if (panelConfig === undefined) continue;\n            panelConfig.controller = this;\n            if (!Panel.isPanelConfig(panelConfig)) {\n                this.log.warn(`Panelconfig for ${panelConfig.name} is invalid!`);\n                continue;\n            }\n            const panel = new Panel.Panel(adapter, panelConfig);\n            this.panels.push(panel);\n        }\n    }\n\n    minuteLoop = async (): Promise<void> => {\n        if (this.unload) return;\n        this.statesControler.setInternalState('///time', await this.getCurrentTime(), true);\n        const diff = 60000 - (Date.now() % 60000) + 10;\n        this.minuteLoopTimeout = this.adapter.setTimeout(this.minuteLoop, diff);\n    };\n\n    /**\n     * Update Date 2 times per day because of daylight saving.\n     * @returns\n     */\n    dateUpdateLoop = async (): Promise<void> => {\n        if (this.unload) return;\n        this.statesControler.setInternalState('///date', await this.getCurrentTime(), true);\n        const d: Date = new Date();\n        d.setDate(d.getDate() + 1);\n        d.setHours(0, 0, 0);\n        const diff = d.getTime() - Date.now();\n        this.dateUpdateTimeout = this.adapter.setTimeout(this.dateUpdateLoop, diff);\n    };\n    getCurrentTime = async (): Promise<number> => {\n        return Date.now();\n    };\n\n    async init(): Promise<void> {\n        await this.statesControler.setInternalState(\n            '///time',\n            await this.getCurrentTime(),\n            true,\n            {\n                name: '',\n                type: 'number',\n                role: 'value.time',\n                read: true,\n                write: false,\n            },\n            this.getCurrentTime,\n        );\n        await this.statesControler.setInternalState(\n            '///date',\n            await this.getCurrentTime(),\n            true,\n            {\n                name: '',\n                type: 'number',\n                role: 'value.time',\n                read: true,\n                write: false,\n            },\n            this.getCurrentTime,\n        );\n        const newPanels = [];\n        // erzeuge \u00FCbergeordneten channel\n        this.library.writedp(`panels`, undefined, genericStateObjects.panel._channel);\n\n        for (const panel of this.panels)\n            if (await panel.isValid()) {\n                newPanels.push(panel);\n                await panel.init();\n            } else {\n                await panel.delete();\n                this.log.error(`Panel ${panel.name} has a invalid configuration.`);\n            }\n        this.panels = newPanels;\n        this.minuteLoop();\n        this.dateUpdateLoop();\n    }\n    async delete(): Promise<void> {\n        if (this.minuteLoopTimeout) this.adapter.clearTimeout(this.minuteLoopTimeout);\n        if (this.dateUpdateTimeout) this.adapter.clearTimeout(this.dateUpdateTimeout);\n        await super.delete();\n        for (const a of this.panels) await a.delete();\n    }\n}\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageNotification.ts"],
  "sourcesContent": ["import { Page, PageInterface } from '../classes/Page';\nimport { White } from '../const/Color';\nimport {\n    getIconEntryColor,\n    getIconEntryValue,\n    getPayload,\n    getValueEntryBoolean,\n    getValueEntryNumber,\n    setTriggeredToState,\n} from '../const/tools';\nimport * as pages from '../types/pages';\nimport { IncomingEvent } from '../types/types';\nimport { PageItem } from './pageItem';\n\nexport class PageNotify extends Page {\n    config: pages.PageBaseConfig['config'];\n    items: pages.PageBaseConfig['items'];\n    private lastpage: Page[] = [];\n    private step: number = 0;\n    private headlinePos: number = 0;\n    private titelPos: number = 0;\n    private nextArrow: boolean = false;\n    private rotationTimeout: ioBroker.Timeout | undefined;\n    tempItem: PageItem | undefined;\n\n    constructor(config: PageInterface, options: pages.PageBaseConfig) {\n        super(config, options);\n        this.config = options.config;\n        if (options.items && (options.items.card == 'popupNotify' || options.items.card == 'popupNotify2'))\n            this.items = options.items;\n        this.minUpdateInterval = 1000;\n        this.neverDeactivateTrigger = true;\n    }\n\n    async init(): Promise<void> {\n        const config = structuredClone(this.config);\n        // search states for mode auto\n        const tempConfig: Partial<pages.cardNotifyDataItemOptions> =\n            this.enums || this.dpInit\n                ? await this.panel.statesControler.getDataItemsFromAuto(this.dpInit, config, undefined, this.enums)\n                : config;\n        setTriggeredToState(tempConfig, ['entity1', 'optinalValue']);\n        // create Dataitems\n\n        const tempItem: Partial<pages.cardNotifyDataItems> = await this.panel.statesControler.createDataItems(\n            tempConfig,\n            this,\n        );\n        this.items = tempItem as pages.cardNotifyDataItems;\n        // set card because we lose it\n        this.items.card = this.card as any;\n        await super.init();\n        await this.panel.statesControler.activateTrigger(this);\n    }\n\n    setLastPage(p: Page | undefined): void {\n        if (p !== this) {\n            if (p !== undefined) this.lastpage.push(p);\n            else this.lastpage = [];\n        }\n    }\n    removeLastPage(_p: Page | undefined): void {\n        this.lastpage = this.lastpage.filter((a) => a !== _p);\n        this.lastpage.forEach((a) => a.removeLastPage(_p));\n    }\n\n    /**\n     *\n     * @returns Build the view for nspanel.\n     */\n    public async update(): Promise<void> {\n        const message: Partial<pages.PageNotifyMessage> = {};\n        const items = this.items;\n        if (!items) return;\n        this.log.debug('update notification page!');\n        let value: number | boolean | null = null;\n        if (items.card === 'popupNotify' || items.card === 'popupNotify2') {\n            const data = items.data;\n            value = await getValueEntryNumber(data.entity1);\n            if (value === null) value = (await getValueEntryBoolean(data.entity1)) ?? true;\n\n            message.headline = (data.headline && (await data.headline.getTranslatedString())) ?? '';\n            message.hColor = await getIconEntryColor(data.colorHeadline, value, White);\n\n            message.blText = (data.buttonLeft && (await data.buttonLeft.getTranslatedString())) ?? '';\n            message.blColor = await getIconEntryColor(data.colorButtonLeft, value, White);\n\n            message.brText = (data.buttonRight && (await data.buttonRight.getTranslatedString())) ?? '';\n            message.brColor = await getIconEntryColor(data.colorButtonRight, value, White);\n\n            message.text = (data.text && (await data.text.getTranslatedString())) ?? '';\n\n            message.textColor = await getIconEntryColor(data.colorText, value, White);\n\n            const placeholder = (data.optionalValue && (await data.optionalValue.getObject())) ?? null;\n            if (placeholder && pages.isPlaceholderType(placeholder)) {\n                for (const key in placeholder) {\n                    const target = placeholder[key];\n                    let val = (target.dp && (await this.panel.statesControler.getStateVal(target.dp))) ?? '';\n                    if (val === '') val = target.text ?? '';\n                    message.headline = message.headline.replaceAll(\n                        '${' + key + '}',\n                        this.library.getTranslation(val as string),\n                    );\n                    message.text = message.text.replaceAll(\n                        '${' + key + '}',\n                        this.library.getTranslation(val as string),\n                    );\n                }\n            }\n            if (message.text) message.text = message.text.replaceAll('\\n', '\\r\\n').replaceAll('/r/n', '\\r\\n');\n            const maxLineCount = 8;\n            let lines = 0;\n            if (message.text && (lines = message.text.split('\\r\\n').length) > maxLineCount) {\n                let test = 0;\n                let counter = 0;\n                let pos = 0;\n                this.step = this.step % (lines + 1);\n\n                const currentPos = this.step;\n                const text = message.text + '\\r\\n' + '\\r\\n' + message.text;\n                message.text = '';\n                while (test++ < 100) {\n                    const pos2 = text.indexOf('\\r\\n', pos) + 2;\n                    if (pos2 == -1) {\n                        message.text += text.slice(pos);\n                        break;\n                    }\n                    if (counter >= currentPos) {\n                        message.text = message.text + text.slice(pos, pos2);\n                    }\n                    counter++;\n                    if (counter >= currentPos + maxLineCount) break;\n                    pos = pos2;\n                }\n                if (!this.rotationTimeout) this.rotationTimeout = this.adapter.setTimeout(this.rotation, 3000);\n            }\n\n            message.timeout = (data.timeout && (await data.timeout.getNumber())) ?? 0;\n        }\n        if (items.card === 'popupNotify') {\n            this.sendToPanel(this.getMessage(message));\n            return;\n        } else if (items.card === 'popupNotify2') {\n            const data = items.data;\n            message.fontSet = (data.textSize && (await data.textSize.getString())) ?? '';\n            message.icon = await getIconEntryValue(data.icon, value, '');\n            message.iconColor = await getIconEntryColor(data.icon, value, White);\n            this.sendToPanel(this.getMessage2(message));\n            return;\n        }\n    }\n    private getMessage(message: Partial<pages.PageNotifyMessage>): string {\n        return getPayload(\n            'entityUpdateDetail',\n            this.id,\n            message.headline ?? '',\n            message.hColor ?? '',\n            message.blText ?? '',\n            message.blColor ?? '',\n            message.brText ?? '',\n            message.brColor ?? '',\n            message.text ?? '',\n            message.textColor ?? '',\n            String(message.timeout ?? 0),\n        );\n    }\n    private getMessage2(message: Partial<pages.PageNotifyMessage>): string {\n        return getPayload(\n            'entityUpdateDetail',\n            this.id,\n            message.headline ?? '',\n            message.hColor ?? '',\n            message.blText ?? '',\n            message.blColor ?? '',\n            message.brText ?? '',\n            message.brColor ?? '',\n            message.text ?? '',\n            message.textColor ?? '',\n            String(message.timeout ?? 0),\n            message.fontSet ?? '0',\n            message.icon ?? '',\n            message.iconColor ?? '',\n        );\n    }\n\n    /**\n     * Rotate text in view\n     * @returns\n     */\n    private rotation = async (): Promise<void> => {\n        if (!this.visibility) {\n            this.rotationTimeout = undefined;\n            return;\n        }\n        this.step++;\n        await this.update();\n        this.rotationTimeout = this.adapter.setTimeout(await this.rotation, 1500);\n    };\n    async delete(): Promise<void> {\n        if (this.rotationTimeout) this.adapter.clearTimeout(this.rotationTimeout);\n        this.rotationTimeout = undefined;\n        await super.delete();\n    }\n    protected async onStateTrigger(_dp: string): Promise<void> {\n        this.step = 0;\n        if (this.rotationTimeout) this.adapter.clearTimeout(this.rotationTimeout);\n        this.rotationTimeout = undefined;\n        this.log.debug('state triggerd ' + _dp);\n        /*if (_dp.includes('popupNotification'))*/ this.panel.setActivePage(this);\n    }\n    async onButtonEvent(_event: IncomingEvent): Promise<void> {\n        if (_event.action === 'notifyAction') {\n            const data = this.items && this.items.card === 'popupNotify' && this.items.data;\n            if (data) {\n                if (data.setValue2) {\n                    if (_event.opt === 'yes') data.setValue1 && data.setValue1.setStateTrue();\n                    else data.setValue2 && data.setValue2.setStateTrue();\n                } else data.setValue1 && data.setValue1.setStateAsync(_event.opt === 'yes');\n            }\n        } else {\n            if (this.name.includes('///popupNotification'))\n                this.lastpage = this.lastpage.filter((a) => !a.name.includes('///popupNotification'));\n            const p = this.lastpage.pop();\n            if (p) {\n                p.removeLastPage(this);\n                this.log.debug('Set active page from popup to ' + p.name);\n                await this.panel.setActivePage(p);\n            } else {\n                const page = this.panel.navigation.getCurrentPage();\n                this.log.debug('Set active page from currentpage to ' + page.name);\n                await this.panel.setActivePage(page);\n            }\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": []
}

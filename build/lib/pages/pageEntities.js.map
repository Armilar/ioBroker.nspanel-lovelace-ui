{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageEntities.ts"],
  "sourcesContent": ["import { Page, PageInterface } from '../classes/Page';\nimport { Green, HMIOn, Red, rgb_dec565 } from '../const/Color';\nimport { Icons } from '../const/icon_mapping';\nimport { getPayload, getPayloadArray } from '../const/tools';\nimport * as pages from '../types/pages';\nimport { PageItemDataItemsOptions } from '../types/type-pageItem';\nimport { IncomingEvent } from '../types/types';\nimport { PageItem } from './pageItem';\n\nconst PageEntitiesMessageDefault: pages.PageEntitiesMessage = {\n    event: 'entityUpd',\n    headline: 'Page Entities',\n    navigation: 'button~bSubPrev~~~~~button~bSubNext~~~~',\n    options: ['~~~~~', '~~~~~', '~~~~~', '~~~~~', '~~~~~'],\n};\n\nexport class PageEntities extends Page {\n    config: pages.PageBaseConfig['config'];\n    items: pages.PageBaseConfig['items'];\n    private maxItems: number = 4;\n    private step: number = 0;\n    private headlinePos: number = 0;\n    private titelPos: number = 0;\n    private nextArrow: boolean = false;\n    private lastNavClick: number = 0;\n    tempItems: (PageItem | undefined)[] | undefined;\n\n    constructor(config: PageInterface, options: pages.PageBaseConfig) {\n        super(config, options);\n        this.config = options.config;\n        if (options.items && options.items.card == 'cardEntities') this.items = options.items;\n        this.minUpdateInterval = 2000;\n    }\n\n    async init(): Promise<void> {\n        const config = structuredClone(this.config);\n        // search states for mode auto\n        const tempConfig: Partial<pages.cardEntitiesDataItemOptions> =\n            this.enums || this.dpInit\n                ? await this.panel.statesControler.getDataItemsFromAuto(this.dpInit, config, undefined, this.enums)\n                : config;\n        // create Dataitems\n        //this.log.debug(JSON.stringify(tempConfig));\n        const tempItem: Partial<pages.cardEntitiesDataItems> = await this.panel.statesControler.createDataItems(\n            tempConfig,\n            this,\n        );\n        this.items = tempItem as pages.cardEntitiesDataItems;\n        // set card because we lose it\n        this.items.card = this.card as 'cardEntities';\n        await super.init();\n    }\n\n    public async update(): Promise<void> {\n        if (!this.visibility) return;\n        const message: Partial<pages.PageEntitiesMessage> = {};\n        message.options = [];\n        if (this.pageItems) {\n            if (this.config && this.config.card == 'cardEntities') {\n                if (this.config.scrolltype === 'page') {\n                    let maxItems = this.maxItems;\n                    let a = 0;\n                    if (this.pageItems.length > maxItems) {\n                        a = maxItems * this.step;\n                        maxItems = a + maxItems;\n                    }\n                    let b = 0;\n                    let pageItems = this.pageItems;\n\n                    /**\n                     * Live update von gefilterten Adaptern.\n                     */\n                    if (this.config.cardRole === 'adapterOff') {\n                        this.tempItems = [];\n                        for (const a of this.pageItems) {\n                            if (\n                                a &&\n                                a.dataItems &&\n                                a.dataItems.data &&\n                                'entity1' in a.dataItems.data &&\n                                a.dataItems.data.entity1 &&\n                                a.dataItems.data.entity1.value &&\n                                !(await a.dataItems.data.entity1.value.getBoolean())\n                            )\n                                this.tempItems.push(a);\n                        }\n                        pageItems = this.tempItems;\n                    }\n                    for (; a < maxItems; a++) {\n                        const temp = pageItems[a];\n                        message.options[b++] = temp ? await temp.getPageItemPayload() : '~~~~~';\n                    }\n                } else {\n                    let a = this.step;\n                    for (; a < this.maxItems + this.step; a++) {\n                        const temp = this.pageItems[a];\n                        message.options[a - this.step] = temp ? await temp.getPageItemPayload() : '~~~~~';\n                    }\n                }\n            }\n        }\n        message.headline = this.library.getTranslation(\n            (this.items && this.items.data.headline && (await this.items.data.headline.getString())) ?? '',\n        );\n        message.navigation = this.getNavigation();\n        const msg: pages.PageEntitiesMessage = Object.assign(structuredClone(PageEntitiesMessageDefault), message);\n\n        this.sendToPanel(this.getMessage(msg));\n    }\n    private getMessage(message: pages.PageEntitiesMessage): string {\n        return getPayload('entityUpd', message.headline, message.navigation, getPayloadArray(message.options));\n    }\n    protected async onStateTrigger(): Promise<void> {\n        await this.update();\n    }\n    async onButtonEvent(_event: IncomingEvent): Promise<void> {}\n\n    private async handleCardRole(): Promise<void> {\n        if (!this.config || this.config.card !== 'cardEntities' || !this.config.cardRole) return;\n        switch (this.config.cardRole) {\n            case 'adapterOff':\n            case 'adapter': {\n                const list = await this.adapter.getObjectViewAsync('system', 'instance', {\n                    startkey: `system.adapter`,\n                    endkey: `system.adapter}`,\n                });\n                if (!list) return;\n                this.pageItemConfig = [];\n                for (const item of list.rows) {\n                    const obj = item.value;\n                    let n = obj.common.titleLang && obj.common.titleLang[this.library.getLocalLanguage()];\n                    n = n ? n : obj.common.titleLang && obj.common.titleLang['en'];\n                    n = n ? n : obj.common.name;\n\n                    const pi: PageItemDataItemsOptions = {\n                        role: 'text.list',\n                        type: 'text',\n                        dpInit: '',\n\n                        data: {\n                            icon: {\n                                true: {\n                                    value: { type: 'const', constVal: 'power' },\n                                    color: { type: 'const', constVal: Green },\n                                },\n                                false: {\n                                    value: { type: 'const', constVal: 'power-off' },\n                                    color: { type: 'const', constVal: Red },\n                                },\n                                scale: undefined,\n                                maxBri: undefined,\n                                minBri: undefined,\n                            },\n                            entity1: {\n                                value: {\n                                    type: 'triggered',\n                                    dp: `${item.id}.alive`,\n                                },\n                            },\n                            text: {\n                                true: { type: 'const', constVal: n },\n                                false: undefined,\n                            },\n                            text1: {\n                                true: { type: 'const', constVal: obj.common.version },\n                                false: undefined,\n                            },\n                        },\n                    };\n                    this.pageItemConfig.push(pi);\n                }\n                break;\n            }\n        }\n    }\n    protected async onVisibilityChange(val: boolean): Promise<void> {\n        if (val) {\n            await this.handleCardRole();\n        }\n        await super.onVisibilityChange(val);\n    }\n\n    goLeft(): void {\n        if (!this.config || this.config.card !== 'cardEntities') return;\n        if (this.config.scrolltype === 'page') {\n            this.goLeftP();\n            return;\n        }\n        if (--this.step < 0 && Date.now() - this.lastNavClick > 300) {\n            this.step = 0;\n            this.panel.navigation.goLeft();\n        } else this.update();\n        this.lastNavClick = Date.now();\n    }\n    goRight(): void {\n        if (!this.config || this.config.card !== 'cardEntities') return;\n        if (this.config.scrolltype === 'page') {\n            this.goRightP();\n            return;\n        }\n        const length = this.tempItems ? this.tempItems.length : this.pageItems ? this.pageItems.length : 0;\n        if (++this.step + this.maxItems > length && Date.now() - this.lastNavClick > 300) {\n            this.step--;\n            this.panel.navigation.goRight();\n        } else this.update();\n        this.lastNavClick = Date.now();\n    }\n    protected getNavigation(): string {\n        if (!this.config || this.config.card !== 'cardEntities') return '';\n        if (this.config.scrolltype === 'page') {\n            return this.getNavigationP();\n        }\n        const length = this.tempItems ? this.tempItems.length : this.pageItems ? this.pageItems.length : 0;\n        if (this.maxItems >= length) {\n            return super.getNavigation();\n        }\n        let left = '';\n        let right = '';\n        if (this.step <= 0) {\n            left = this.panel.navigation.buildNavigationString('left');\n        }\n        if (this.step + this.maxItems >= length) {\n            right = this.panel.navigation.buildNavigationString('right');\n        }\n        if (!left)\n            left = getPayload('button', 'bSubPrev', Icons.GetIcon('arrow-up-bold'), String(rgb_dec565(HMIOn)), '', '');\n\n        if (!right)\n            right = getPayload(\n                'button',\n                'bSubNext',\n                Icons.GetIcon('arrow-down-bold'),\n                String(rgb_dec565(HMIOn)),\n                '',\n                '',\n            );\n\n        return getPayload(left, right);\n    }\n    goLeftP(): void {\n        if (--this.step < 0) {\n            this.step = 0;\n            this.panel.navigation.goLeft();\n        } else this.update();\n    }\n    goRightP(): void {\n        const length = this.tempItems ? this.tempItems.length : this.pageItems ? this.pageItems.length : 0;\n        if (++this.step * this.maxItems >= length) {\n            this.step--;\n            this.panel.navigation.goRight();\n        } else this.update();\n    }\n    protected getNavigationP(): string {\n        const length = this.tempItems ? this.tempItems.length : this.pageItems ? this.pageItems.length : 0;\n        if (this.maxItems >= length) {\n            return super.getNavigation();\n        }\n        let left = '';\n        let right = '';\n        if (this.step <= 0) {\n            left = this.panel.navigation.buildNavigationString('left');\n        }\n        if ((this.step + 1) * this.maxItems >= length) {\n            right = this.panel.navigation.buildNavigationString('right');\n        }\n        if (!left)\n            left = getPayload(\n                'button',\n                'bSubPrev',\n                Icons.GetIcon('arrow-up-bold-outline'),\n                String(rgb_dec565(HMIOn)),\n                '',\n                '',\n            );\n\n        if (!right)\n            right = getPayload(\n                'button',\n                'bSubNext',\n                Icons.GetIcon('arrow-down-bold-outline'),\n                String(rgb_dec565(HMIOn)),\n                '',\n                '',\n            );\n\n        return getPayload(left, right);\n    }\n}\n"],
  "mappings": "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",
  "names": ["a"]
}

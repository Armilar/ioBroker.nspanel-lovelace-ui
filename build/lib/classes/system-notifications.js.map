{
  "version": 3,
  "sources": ["../../../src/lib/classes/system-notifications.ts"],
  "sourcesContent": ["import { GetNotificationsResponse, HostId, notification } from '../types/system-notifications';\nimport { AdapterClassDefinition, BaseClass } from './library';\n\nexport class SystemNotifications extends BaseClass {\n    private language: ioBroker.Languages;\n    private notifications: notification[] = [];\n    private messageTimeout: ioBroker.Timeout | undefined;\n    private count: number = 0;\n\n    constructor(adapter: AdapterClassDefinition) {\n        super(adapter, 'system-notifcations');\n        this.language = this.adapter.library.getLocalLanguage();\n    }\n    public async init(): Promise<void> {\n        await this.adapter.subscribeForeignStatesAsync('system.host.*.notifications.*');\n        const obj = await this.adapter.getObjectAsync(`${this.adapter.namespace}.panels`);\n        if (obj) {\n            this.notifications = (obj.native && obj.native.SystemNotifications) || [];\n        }\n\n        await this.handleIobrokerNotifications();\n    }\n    async delete(): Promise<void> {\n        await this.writeConfig();\n        await super.delete();\n        if (this.messageTimeout) this.adapter.clearTimeout(this.messageTimeout);\n        this.messageTimeout = undefined;\n    }\n    /**\n     * write config data to object\n     */\n    private async writeConfig(): Promise<void> {\n        const obj = await this.adapter.getObjectAsync(`${this.adapter.namespace}.panels`);\n        if (obj && obj.native) {\n            obj.native.SystemNotifications = this.notifications;\n            await this.adapter.setObjectAsync(`${this.adapter.namespace}.panels`, obj);\n        }\n    }\n\n    /**\n     * Get all existing hosts of this installation\n     */\n    private async getAllHosts(): Promise<HostId[]> {\n        const res = await this.adapter.getObjectViewAsync('system', 'host', {\n            startkey: 'system.host.',\n            endkey: 'system.host.\\u9999',\n        });\n\n        return res.rows.map((host) => host.id as HostId);\n    }\n    /**\n     * Is called if a subscribed state changes\n     */\n    public async onStateChange(id: string, _state: ioBroker.State | null | undefined): Promise<void> {\n        if (id.startsWith('system.host')) {\n            const hostName = id.split('.')[2];\n            this.log.info(`New notification on \"${hostName}\" detected`);\n            await this.handleIobrokerNotifications([`system.host.${hostName}`]);\n        }\n    }\n    /**\n     * Checks for existing notifications and handles them according to the configuration\n     *\n     * @param hosts names of the hosts to handle notifications for, if omitted all hosts are used\n     */\n    private async handleIobrokerNotifications(hosts?: HostId[]): Promise<void> {\n        hosts = hosts || (await this.getAllHosts());\n\n        for (const host of hosts) {\n            this.log.debug(`Request notifications from \"${host}\"`);\n\n            const { result: notifications } = (await this.adapter.sendToHostAsync(\n                host,\n                'getNotifications',\n                {},\n            )) as unknown as GetNotificationsResponse;\n\n            this.log.debug(`Received notifications from \"${host}\": ${JSON.stringify(notifications)}`);\n\n            const msgs: notification[] = [];\n            for (const k in notifications) {\n                const sub = notifications[k];\n                for (const c in sub.categories) {\n                    msgs.push({\n                        id: `${k}.${c}`,\n                        headline: sub.categories[c].name[this.language],\n                        text: sub.categories[c].description[this.language],\n                        version: 0,\n                        severity: sub.categories[c].severity,\n                        ts: 0,\n                        cleared: false,\n                    });\n                }\n            }\n            for (const m of msgs) await this.sendNotifications(m);\n        }\n    }\n\n    private async sendNotifications(notify: notification): Promise<void> {\n        if (\n            this.notifications.some((a) => {\n                if (a.id === notify.id && a.ts === notify.ts && a.severity == notify.severity) return true;\n            })\n        )\n            return;\n        this.notifications.push(notify);\n\n        if (this.messageTimeout) return;\n        this.messageTimeout = this.adapter.setTimeout(() => {\n            this.notifications.sort((a, b) => {\n                if (a.severity === b.severity) return 0;\n                if (a.severity === 'alert') return 1;\n                if (b.severity === 'alert') return -1;\n                return 0;\n            });\n            this.count = this.notifications.filter((a) => !a.cleared).length;\n            if (this.notifications.some((a) => !a.cleared))\n                this.adapter.controller && this.adapter.controller.notificationToPanel();\n        }, 2500);\n    }\n\n    /**\n     * name\n     */\n    public async clearNotification(index: number): Promise<void> {\n        if (this.notifications[index]) {\n            this.notifications[index].cleared = true;\n            await this.writeConfig();\n        }\n    }\n    public getNotification(index: number): { headline: string; text: string } | null {\n        if (this.notifications[index]) {\n            let currentNotify = 0;\n            this.notifications.forEach((a) => !a.cleared && currentNotify <= index && currentNotify++);\n            let { headline, text } = this.notifications[index];\n            const line = 46;\n            let counter = 0;\n            let a = 0;\n            let olda = a;\n            while (counter++ < 10) {\n                if (a + line >= text.length) break;\n                a = text.lastIndexOf(' ', line + a);\n                if (olda === a) break;\n                olda = a;\n                text = text.slice(0, a) + '\\n' + text.slice(++a);\n            }\n            headline += '\\n';\n            text = headline + '\\n' + text;\n            return {\n                headline: `${this.library.getTranslation('Notification')} (${currentNotify}/${this.count})`,\n                text,\n            };\n        }\n        return null;\n    }\n    /**\n     *\n     * @param index\n     * @returns\n     */\n    public getNotificationIndex(index: number): number {\n        if (index === -1) index = 0;\n        const l = this.notifications.length;\n        if (index >= 0) {\n            for (index; index < l; index++) {\n                if (this.notifications[index] && !this.notifications[index].cleared) break;\n            }\n            if (this.notifications[index] && !this.notifications[index].cleared) {\n                return index;\n            }\n        }\n        return -1;\n    }\n}\n"],
  "mappings": "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",
  "names": ["a"]
}

{
  "version": 3,
  "sources": ["../../../src/lib/types/type-pageItem.ts"],
  "sourcesContent": ["import { Dataitem } from '../classes/data-item';\nimport { RGB } from './Color';\nimport { ChangeTypeOfKeys } from './pages';\nimport * as Types from './types';\n\nexport type PageLightItem = {\n    type: 'light' | 'dimmer' | 'brightnessSlider' | 'hue' | 'rgb';\n    bri: PageItemMinMaxValue;\n    ct: PageItemMinMaxValue;\n    hue: PageItemMinMaxValue; //0-360\n    rgb: RGB;\n};\n\ntype PageItemMinMaxValue = { min: number; max: number };\nexport type PageItemColorSwitch = { on: RGB; off: RGB };\n\nexport type IconBoolean = Record<Types.BooleanUnion, string | undefined>;\nexport type ThisCardMessageTypes = 'input_sel' | 'button';\n\nexport interface MessageItem extends MessageItemInterface {\n    mainId?: string;\n    subId?: string;\n}\nexport type entityUpdateDetailMessage =\n    | {\n          type: '2Sliders';\n          entityName: string;\n          icon?: string;\n          slidersColor: string | 'disable';\n          buttonState: boolean | 'disable';\n          slider1Pos: number | 'disable';\n          slider2Pos: number | 'disable';\n          hueMode: boolean;\n          hue_translation: string | '';\n          slider2Translation: string | '';\n          slider1Translation: string | '';\n          popup: boolean;\n      }\n    | {\n          type: 'insel';\n          entityName: string;\n          textColor: string;\n          currentState: string;\n          list: string;\n      }\n    | {\n          type: 'popupThermo';\n          headline: string;\n          entityName: string;\n          currentState: string;\n          list: string;\n      }\n    | ({\n          type: 'popupLight';\n      } & Record<\n          | 'entityName'\n          | 'icon'\n          | 'iconColor'\n          | 'power'\n          | 'sliderBriPos'\n          | 'sliderCtPos'\n          | 'colorMode'\n          | 'colorIdentifier'\n          | 'ctIdentifier'\n          | 'briIdentifier'\n          | 'effect_supported',\n          string\n      >)\n    | ({ type: 'popupShutter' } & Record<\n          | 'entityName'\n          | 'pos1'\n          | 'text2'\n          | 'pos1text'\n          | 'icon'\n          | 'iconL1'\n          | 'iconM1'\n          | 'iconR1'\n          | 'statusL1'\n          | 'statusM1'\n          | 'statusR1'\n          | 'pos2text'\n          | 'iconL2'\n          | 'iconM2'\n          | 'iconR2'\n          | 'statusL2'\n          | 'statusM2'\n          | 'statusR2'\n          | 'pos2',\n          string\n      >);\n\nexport type entityUpdateDetailMessageType = '2Sliders' | 'insel';\n\nexport type entityUpdateDetailMessageTemplate2 = Record<\n    PageItemUnion['role'] | Types.roles,\n    entityUpdateDetailMessageTemplate\n>;\n\nexport type entityUpdateDetailMessageTemplate =\n    | {\n          type: '2Sliders';\n          slidersColor: RGB | false;\n          buttonState: true | false;\n          slider1Pos: number | false;\n          slider2Pos: number | false;\n          hueMode: boolean;\n          hue_translation: string | false;\n          slider2Translation: string | false;\n          slider1Translation: string | false;\n          popup: boolean;\n      }\n    | {\n          type: 'popupShutter';\n          slider1Pos: number | false;\n          slider2Pos: number | false;\n          textHeadline: string | false;\n          textStatus: string | false;\n          iconUp: string | false;\n          iconStop: string | false;\n          iconDown: string | false;\n          iconUpStatus: string | false;\n          iconStopStatus: string | false;\n          iconDownStatus: string | false;\n          textTilt: string | false;\n          iconTiltLeft: string | false;\n          iconTiltStop: string | false;\n          iconTiltRight: string | false;\n          iconTiltLeftStatus: string | false;\n          iconTiltStopStatus: string | false;\n          iconTiltRightStatus: string | false;\n      }\n    | {\n          type: 'insel';\n          value: boolean;\n          textColor: RGB;\n          textHeadline: string | false;\n          list: string[] | false;\n      };\nexport interface MessageItemInterface {\n    type: Types.SerialTypePopup;\n    intNameEntity: string;\n    icon: string;\n    iconColor: string;\n    displayName: string;\n    optionalValue: string;\n}\nexport type MediaToolBoxAction =\n    | 'speaker'\n    | 'play'\n    | 'tool'\n    | 'track'\n    | 'favor'\n    | 'equal'\n    | 'repeat'\n    | 'seek'\n    | 'cross'\n    | 'nexttool';\nexport type PageItemDataItems = Omit<PageItemUnion, 'data' | 'type'> &\n    (\n        | PageItemNumberDataItems\n        | PageItemButtonDataItems\n        | PageItemShutterDataItems\n        | PageItemInputSelDataItems\n        | PageItemLightDataItems\n        | PageItemTextDataItems\n    );\n\nexport type PageItemDataItemsOptions = Omit<PageItemUnion, 'data' | 'type'> &\n    (\n        | PageItemButtonDataItemsOptions\n        | PageItemShutterDataItemsOptions\n        | PageItemInputSelDataItemsOptions\n        | PageItemLightDataItemsOptions\n        | PageItemNumberDataItemsOptions\n        | PageItemTextDataItemsOptions\n    );\n\nexport type PageItemText = Pick<PageItemBase, 'entity1' | 'text' | 'text1' | 'icon'>;\nexport type PageItemTextDataItemsOptions = {\n    type: 'text';\n    data: ChangeTypeOfKeys<PageItemText, Types.DataItemsOptions | undefined>;\n};\nexport type PageItemTextDataItems = {\n    type: 'text';\n    data: ChangeTypeOfKeys<PageItemText, Dataitem | undefined>;\n};\n\nexport type PageItemNumber = Pick<PageItemBase, 'entity1' | 'text' | 'icon'>;\nexport type PageItemNumberDataItemsOptions = {\n    type: 'number';\n    data: ChangeTypeOfKeys<PageItemNumber, Types.DataItemsOptions | undefined>;\n};\nexport type PageItemNumberDataItems = {\n    type: 'number';\n    data: ChangeTypeOfKeys<PageItemNumber, Dataitem | undefined>;\n};\n\nexport type PageItemButton = Pick<PageItemBase, 'setValue1' | 'text' | 'icon' | 'color' | 'entity1' | 'setNavi'>;\nexport type PageItemButtonDataItemsOptions = {\n    type: 'button';\n    data: ChangeTypeOfKeys<PageItemButton, Types.DataItemsOptions | undefined>;\n};\nexport type PageItemButtonDataItems = {\n    type: 'button';\n    data: ChangeTypeOfKeys<PageItemButton, Dataitem | undefined>;\n};\n\nexport type PageItemLight = Pick<\n    PageItemBase,\n    | 'valueList'\n    | 'setList'\n    | 'text1'\n    | 'text2'\n    | 'text3'\n    | 'icon'\n    | 'color'\n    | 'entity1'\n    | 'Red'\n    | 'Green'\n    | 'Blue'\n    | 'saturation'\n    | 'dimmer'\n    | 'hue'\n    | 'entityInSel'\n    | 'ct'\n    | 'headline'\n    | 'colorMode'\n>;\nexport type PageItemLightDataItemsOptions = {\n    type: 'light';\n    data: ChangeTypeOfKeys<PageItemLight, Types.DataItemsOptions | undefined>;\n};\nexport type PageItemLightDataItems = {\n    type: 'light';\n    data: ChangeTypeOfKeys<PageItemLight, Dataitem | undefined>;\n};\n\nexport type PageItemInputSel = Pick<\n    PageItemBase,\n    'entityInSel' | 'text' | 'icon' | 'color' | 'headline' | 'valueList' | 'setList'\n>;\n\nexport type PageItemInputSelDataItemsOptions = {\n    type: 'input_sel';\n    data: ChangeTypeOfKeys<PageItemInputSel, Types.DataItemsOptions | undefined>;\n};\n\nexport type PageItemInputSelDataItems = {\n    type: 'input_sel';\n    data: ChangeTypeOfKeys<PageItemInputSel, Dataitem | undefined>;\n};\n\nexport type PageItemShutter = Pick<\n    PageItemBase,\n    | 'up'\n    | 'down'\n    | 'stop'\n    | 'up2'\n    | 'down2'\n    | 'stop2'\n    | 'entity1'\n    | 'entity2'\n    | 'text'\n    | 'text1'\n    | 'text2'\n    | 'icon'\n    | 'color'\n    | 'headline'\n    | 'valueList'\n    | 'setList'\n>;\nexport type PageItemShutterDataItemsOptions = {\n    type: 'shutter';\n    data: ChangeTypeOfKeys<PageItemShutter, Types.DataItemsOptions | undefined>;\n};\nexport type PageItemShutterDataItems = {\n    type: 'shutter';\n    data: ChangeTypeOfKeys<PageItemShutter, Dataitem | undefined>;\n};\n\nexport type PageItemBase = {\n    headline?: string;\n    color?: ColorEntryType;\n    icon?: IconEntryType;\n    text?: TextEntryType;\n    entityInSel: ValueEntryType;\n    entity1: ValueEntryType; // Readonly Werte die angezeigt werden soll. wird immer f\u00FCr insel verwendet\n    entity2?: ValueEntryType; // Readonly Werte die angezeigt werden soll.\n    entity3?: ValueEntryType; // Readonly Werte die angezeigt werden soll.\n    text1?: TextEntryType;\n    text2?: TextEntryType;\n    text3?: TextEntryType;\n    setValue1?: string;\n    setValue2?: string;\n    setValue3?: string;\n    valueList?: number;\n    setNavi?: number;\n    setList?: number;\n    maxValue1?: number;\n    minValue1?: number;\n    minValue2?: number;\n    maxValue2?: number;\n    interpolateColor?: boolean;\n    dimmer?: ScaledNumberType;\n    ct?: ScaledNumberType;\n    hue?: string;\n    colorMode: boolean; // true rgb, false ct\n    saturation?: string;\n    useColor: string;\n    Red?: number;\n    Green?: number;\n    Blue?: number;\n    up: number;\n    stop?: number;\n    down: number;\n    up2?: number;\n    stop2?: number;\n    down2?: number;\n};\n\nexport type PageTypeUnionTemplate = {\n    role: Types.roles;\n    type: Types.SerialTypePageElements;\n    data: {\n        headline?: string | undefined;\n        color?: RGB | undefined;\n        icon?: { true: { value: string; color: RGB | null }; false: { value: string; color: RGB | null } } | undefined;\n        text?: { true: string; false: string } | undefined;\n        entity1: true | undefined | 'invert' | '';\n        entity2?: true | undefined | 'invert';\n        entity3?: true | undefined | 'invert';\n        text1?: { true: string; false: string } | undefined;\n        text2?: { true: string; false: string } | undefined;\n        text3?: { true: string; false: string } | undefined;\n        setValue1?: true | undefined;\n        setValue2?: true | undefined;\n        setValue3?: true | undefined;\n        modeList?: true | undefined;\n        maxValue1?: number | undefined;\n        minValue1?: number | undefined;\n        minValue2?: number | undefined;\n        maxValue2?: number | undefined;\n        interpolateColor?: true | undefined;\n        dimmer?: true | undefined;\n        hue?: true | undefined;\n        saturation?: true | undefined;\n        useColor?: true | undefined;\n        RGB3?: true | undefined;\n        optionalData?: any[] | string | true | undefined; //shutter icons - string for true?false or just true\n    };\n};\n//XOR<XOR<A, B>, C>\n\nexport type PageItemUnion = {\n    role:\n        | 'socket'\n        | 'value.time'\n        | 'level.timer'\n        | 'level.mode.fan'\n        | 'value.alarmtime'\n        | 'light'\n        | 'dimmer'\n        | 'hue'\n        | 'ct'\n        | 'cie'\n        | 'rgbSingle'\n        | 'rgb'\n        | 'ct'\n        | 'blind'\n        | 'door'\n        | 'window'\n        | 'gate'\n        | 'motion'\n        | 'buttonSensor'\n        | 'button'\n        | 'media.repeat'\n        | 'text.list'\n        | 'arrow'\n        | 'spotify-playlist';\n    dpInit: string;\n    type: Types.SerialTypePageElements;\n    data: PageItemBase;\n};\n\nexport type ColorEntryType = Record<Types.BooleanUnion, RGB | undefined> & { scale?: Types.IconScaleElement };\n\nexport type IconEntryType =\n    | (Partial<Record<Types.BooleanUnion, { value: string; color: RGB; text?: string }>> & {\n          scale?: Types.IconScaleElement | undefined;\n          maxBri?: string;\n          minBri?: string;\n      })\n    | undefined;\n\nexport type TextEntryType = Record<Types.BooleanUnion, string>;\n\nexport type ValueEntryType =\n    | {\n          value: number;\n          decimal?: number;\n          factor?: number;\n          unit?: string;\n          minScale?: number;\n          maxScale?: number;\n          set?: number;\n      }\n    | undefined;\nexport type ScaledNumberType =\n    | {\n          value: number;\n          minScale?: number;\n          maxScale?: number;\n          set?: number;\n          mode?: string; // atm 'kelvin' | 'mired'\n      }\n    | undefined;\nexport type listCommand = { id: string; value: string; command?: listCommandUnion };\ntype listCommandUnion = 'flip';\nexport function islistCommandUnion(F: any | listCommandUnion): F is listCommandUnion {\n    switch (F as listCommandUnion) {\n        case 'flip': {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport type spotifyPlaylist = Array<{\n    id: string;\n    title: string;\n    artistName: string;\n    artistArray: Array<{\n        id: string;\n        name: string;\n    }>;\n    album: {\n        id: string;\n        name: string;\n    };\n    durationMs: number;\n    duration: string;\n    addedAt: string;\n    addedBy: string;\n    discNumber: number;\n    episode: boolean;\n    explicit: boolean;\n    popularity: number;\n}>;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAkaO,SAAS,mBAAmB,GAAkD;AACjF,UAAQ,GAAuB;AAAA,IAC3B,KAAK,QAAQ;AACT,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAO;AACX;",
  "names": []
}

{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0..\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport { Library } from './lib/classes/library';\nimport 'source-map-support/register';\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\nimport * as MQTT from './lib/classes/mqtt';\nimport { Testconfig } from './lib/config';\nimport { Controller } from './lib/controller/controller';\nimport { Icons } from './lib/const/icon_mapping';\nimport { genericStateObjects } from './lib/const/definition';\n\nclass NspanelLovelaceUi extends utils.Adapter {\n    library: Library;\n    mqttClient: MQTT.MQTTClientClass | undefined;\n    mqttServer: MQTT.MQTTServerClass | undefined;\n    controller: Controller | undefined;\n    unload: boolean = false;\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'nspanel-lovelace-ui',\n            useFormatDate: true,\n        });\n        this.library = new Library(this);\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n        // init some propertys so we dont need undefined checks\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration...\n     */\n    private async onReady(): Promise<void> {\n        this.library = new Library(this);\n        if (!this.config.Testconfig2) {\n            if (this.config.onlyStartFromSystemConfig) {\n                this.log.warn('No configuration stopped!');\n                return;\n            }\n            this.log.warn('No configuration use dev test config!');\n            let testconfig = Testconfig;\n            try {\n                const path: string = './lib/config-custom.js';\n                testconfig = (await import(path)).Testconfig;\n            } catch (e) {}\n            this.config.Testconfig2 = testconfig;\n        }\n        if (\n            !this.config.Testconfig2 ||\n            !Array.isArray(this.config.Testconfig2) ||\n            !this.config.Testconfig2[0] ||\n            !this.config.Testconfig2[0].pages\n        ) {\n            this.log.warn('Adapter on hold, user restart needed!');\n            return;\n        }\n        try {\n            this.config.Testconfig2[0].pages![0] = this.config.Testconfig2[0].pages![0];\n            this.config.Testconfig2[0].timeout = this.config.timeout;\n        } catch (e) {\n            this.log.warn('Invalid configuration stopped!');\n            return;\n        }\n\n        if (\n            this.config.doubleClickTime === undefined ||\n            typeof this.config.doubleClickTime !== 'number' ||\n            !(this.config.doubleClickTime > 0)\n        )\n            this.config.doubleClickTime = 400;\n        //this.log.debug(JSON.stringify(this.config.Testconfig2[0].dpInit))\n\n        //this.config.Testconfig2[0].pages[1].dpInit = this.config.mediaid;\n        this.setTimeout(async () => {\n            //check config\n            Icons.adapter = this;\n\n            await this.library.init();\n            const states = await this.getStatesAsync('*');\n            await this.library.initStates(states);\n\n            // set all .info.nspanel.isOnline to false\n            for (const id in states) {\n                if (id.endsWith('.info.nspanel.isOnline'))\n                    await this.library.writedp(id, false, genericStateObjects.panel.panels.info.nspanel.isOnline);\n            }\n            this.log.debug('Check configuration!');\n            if (!(this.config.mqttIp && this.config.mqttPort && this.config.mqttUsername && this.config.mqttPassword)) {\n                this.log.error('Invalid admin configuration for mqtt!');\n                return;\n            }\n\n            /*const test = await this.getObjectViewAsync('system', 'instance', {\n                startkey: `system.adapter`,\n                endkey: `system.adapter}`,\n            });\n            this.log.debug(JSON.stringify(test));*/\n            this.mqttClient = new MQTT.MQTTClientClass(\n                this,\n                this.config.mqttIp,\n                this.config.mqttPort,\n                this.config.mqttUsername,\n                this.config.mqttPassword,\n                (topic, message) => {\n                    this.log.debug(topic + ' ' + message);\n                },\n            );\n            if (!this.mqttClient) return;\n            const testconfig = structuredClone(this.config.Testconfig2);\n            let counter = 0;\n            for (const a of testconfig) {\n                if (a && a.pages) {\n                    const names: string[] = [];\n                    for (const p of a.pages) {\n                        counter++;\n                        if (!('uniqueID' in p)) continue;\n                        if (p.card === 'screensaver' || p.card === 'screensaver2') {\n                            p.uniqueID = '#' + p.uniqueID;\n                        }\n                        if (names.indexOf(p.uniqueID) !== -1) throw new Error(`uniqueID ${p.uniqueID} is double!`);\n                        names.push(p.uniqueID);\n                    }\n                }\n            }\n            if (counter === 0) return;\n            //testconfig[0].name = this.config.name;\n            //testconfig[0].topic = this.config.topic;\n            const mem = process.memoryUsage().heapUsed / 1024;\n            this.log.debug(String(mem + 'k'));\n            this.controller = new Controller(this, {\n                mqttClient: this.mqttClient,\n                name: 'controller',\n                panels: testconfig,\n            });\n            await this.controller.init();\n            setInterval(() => {\n                this.log.debug(\n                    Math.trunc(mem) +\n                        'k/' +\n                        String(Math.trunc(process.memoryUsage().heapUsed / 1024)) +\n                        'k Start/Jetzt: ',\n                );\n            }, 60000);\n        }, 2500);\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances.\n     */\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            this.unload = true;\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n            if (this.controller) await this.controller.delete;\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (state) {\n            if (this.controller) {\n                this.controller.statesControler.onStateChange(id, state);\n            }\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Somee message was sent to this instance over message box. Used by email, pushover, text2speech, ........\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    private async onMessage(obj: ioBroker.Message): Promise<void> {\n        if (typeof obj === 'object' && obj.message) {\n            if (obj.command) {\n                // e.g. send email or pushover or whatever\n                this.log.info(JSON.stringify(obj));\n                if (obj.command == 'config') {\n                    const obj1 = await this.getForeignObjectAsync('system.adapter.' + this.namespace);\n                    if (\n                        obj1 &&\n                        obj1.native &&\n                        JSON.stringify(obj1.native.Testconfig2) !== JSON.stringify(obj.message)\n                    ) {\n                        obj1.native.Testconfig2 = obj.message;\n                        await this.setForeignObjectAsync('system.adapter.' + this.namespace, obj1);\n                    }\n                }\n                // Send response in callback if required\n                if (obj.callback) this.sendTo(obj.from, obj.command, [], obj.callback);\n            }\n        }\n    }\n\n    async writeStateExternalAsync(dp: string, val: ioBroker.StateValue): Promise<void> {\n        if (dp.startsWith(this.namespace)) return;\n        await this.setForeignStateAsync(dp, val, false);\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new NspanelLovelaceUi(options);\n} else {\n    // otherwise start the instance directly\n    (() => new NspanelLovelaceUi())();\n}\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../../../src/lib/classes/Page.ts"],
  "sourcesContent": ["import { Panel } from '../controller/panel';\nimport { BaseClassPage, BaseClassTriggerdInterface } from '../controller/states-controller';\nimport * as pages from '../types/pages';\nimport { ButtonActionType, IncomingEvent, PopupType, isPopupType } from '../types/types';\nimport { ScreensaverConfig } from '../pages/screensaver';\nimport { PageItem } from '../pages/pageItem';\nimport { PageItemDataItemsOptions } from '../types/type-pageItem';\n\nexport interface PageConfigInterface {\n    config: pages.PageBaseConfig;\n    page: PageInterface;\n}\nexport type PageItemInterface = BaseClassTriggerdInterface & {\n    card: pages.PageTypeCards;\n    panel: Panel;\n    id: string;\n    parent: Page;\n};\n\nexport type PageInterface = BaseClassTriggerdInterface & {\n    card: pages.PageTypeCards;\n    panel: Panel;\n    id: string;\n    uniqueID: string;\n};\n\n//interface Page extends BaseClass | PageConfig\nexport type PageConfigAll = ScreensaverConfig | pages.PageBaseConfig;\n\nexport class Page extends BaseClassPage {\n    readonly card: pages.PageTypeCards;\n    readonly id: string;\n    readonly uniqueID: string;\n    dpInit: string = '';\n    //config: Card['config'];\n    constructor(card: PageInterface, pageItemsConfig: (PageItemDataItemsOptions | undefined)[] | undefined) {\n        super(card, pageItemsConfig);\n        this.card = card.card;\n        this.id = card.id;\n        this.uniqueID = card.uniqueID;\n    }\n    async init(): Promise<void> {}\n\n    async onButtonEvent(event: IncomingEvent): Promise<void> {\n        this.log.warn(`Event received but no handler! ${JSON.stringify(event)}`);\n    }\n    sendType(): void {\n        this.sendToPanel(`pageType~${this.card}`);\n    }\n\n    protected async onVisibilityChange(val: boolean): Promise<void> {\n        if (val) {\n            if (!this.pageItems && this.pageItemConfig) {\n                this.pageItems = [];\n                for (let a = 0; a < this.pageItemConfig.length; a++) {\n                    const config: Omit<PageItemInterface, 'pageItemsConfig'> = {\n                        name: 'PI',\n                        adapter: this.adapter,\n                        panel: this.panel,\n                        panelSend: this.panelSend,\n                        card: 'cardItemSpecial',\n                        id: `${this.id}?${a}`,\n                        parent: this,\n                    };\n                    this.pageItems[a] = new PageItem(config, this.pageItemConfig[a]);\n                    await this.pageItems[a].init();\n                }\n            }\n            this.sendType();\n            this.update();\n        } else {\n            if (this.pageItems) {\n                for (const item of this.pageItems) {\n                    await item.delete();\n                }\n                this.pageItems = undefined;\n            }\n        }\n    }\n\n    protected getNavigation(): string {\n        return this.panel.navigation.buildNavigationString();\n    }\n\n    public async update(): Promise<void> {\n        this.adapter.log.warn(\n            `<- instance of [${Object.getPrototypeOf(this)}] update() is not defined or call super.onStateTrigger()`,\n        );\n    }\n\n    public async onPopupRequest(\n        id: number | string,\n        popup: PopupType | undefined,\n        action: ButtonActionType | undefined | string,\n        value: string | undefined,\n    ): Promise<void> {\n        if (!this.pageItems) return;\n        this.log.debug(`Trigger from popupThermo 1 `);\n        const i = typeof id === 'number' ? id : parseInt(id);\n        const item = this.pageItems[i];\n        if (!item) return;\n        let msg: string | null = null;\n        if (isPopupType(popup) && action !== 'bExit') {\n            msg = await item.GeneratePopup(popup);\n        } else if (action && value !== undefined) {\n            item.onCommand(action, value);\n        }\n        if (msg !== null) this.sendToPanel(msg);\n    }\n}\n\nexport function isMediaButtonActionType(F: MediaButtonActionType | string): F is MediaButtonActionType {\n    switch (F) {\n        case 'media-back':\n        case 'media-pause':\n        case 'media-next':\n        case 'media-shuffle':\n        case 'volumeSlider':\n        case 'mode-speakerlist':\n        case 'mode-playlist':\n        case 'mode-tracklist':\n        case 'mode-repeat':\n        case 'mode-equalizer':\n        case 'mode-seek':\n        case 'mode-crossfade':\n        case 'mode-favorites':\n        case 'mode-insel':\n        case 'media-OnOff':\n        case 'button':\n            return true;\n    }\n    console.error(`${F} isMediaButtonActionType === false`);\n    return false;\n}\ntype MediaButtonActionType = Extract<\n    ButtonActionType,\n    | 'media-back'\n    | 'media-pause'\n    | 'media-next'\n    | 'media-shuffle'\n    | 'volumeSlider'\n    | 'mode-speakerlist'\n    | 'mode-playlist'\n    | 'mode-tracklist'\n    | 'mode-repeat'\n    | 'mode-equalizer'\n    | 'mode-seek'\n    | 'mode-crossfade'\n    | 'mode-favorites'\n    | 'mode-insel'\n    | 'media-OnOff'\n    | 'button'\n>;\n\n/*export type ButtonActionType =\n    | 'bExit'\n    | 'bUp'\n    | 'bNext'\n    | 'bSubNext'\n    | 'bPrev'\n    | 'bSubPrev'\n    | 'bHome'\n    | 'notifyAction'\n    | 'OnOff'\n    | 'button'\n    | 'up'\n    | 'stop'\n    | 'down'\n    | 'positionSlider'\n    | 'tiltOpen'\n    | 'tiltStop'\n    | 'tiltSlider'\n    | 'tiltClose'\n    | 'brightnessSlider'\n    | 'colorTempSlider'\n    | 'colorWheel'\n    | 'tempUpd'\n    | 'tempUpdHighLow'\n    | 'media-back'\n    | 'media-pause'\n    | 'media-next'\n    | 'media-shuffle'\n    | 'volumeSlider'\n    | 'mode-speakerlist'\n    | 'mode-playlist'\n    | 'mode-tracklist'\n    | 'mode-repeat'\n    | 'mode-equalizer'\n    | 'mode-seek'\n    | 'mode-crossfade'\n    | 'mode-favorites'\n    | 'mode-insel'\n    | 'media-OnOff'\n    | 'timer-start'\n    | 'timer-pause'\n    | 'timer-cancle'\n    | 'timer-finish'\n    | 'hvac_action'\n    | 'mode-modus1'\n    | 'mode-modus2'\n    | 'mode-modus3'\n    | 'number-set'\n    | 'mode-preset_modes'\n    | 'A1'\n    | 'A2'\n    | 'A3'\n    | 'A4'\n    | 'D1'\n    | 'U1';*/\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,+BAA0D;AAE1D,mBAAwE;AAExE,sBAAyB;AAwBlB,MAAM,aAAa,uCAAc;AAAA,EAC3B;AAAA,EACA;AAAA,EACA;AAAA,EACT,SAAiB;AAAA,EAEjB,YAAY,MAAqB,iBAAuE;AACpG,UAAM,MAAM,eAAe;AAC3B,SAAK,OAAO,KAAK;AACjB,SAAK,KAAK,KAAK;AACf,SAAK,WAAW,KAAK;AAAA,EACzB;AAAA,EACA,MAAM,OAAsB;AAAA,EAAC;AAAA,EAE7B,MAAM,cAAc,OAAqC;AACrD,SAAK,IAAI,KAAK,kCAAkC,KAAK,UAAU,KAAK,GAAG;AAAA,EAC3E;AAAA,EACA,WAAiB;AACb,SAAK,YAAY,YAAY,KAAK,MAAM;AAAA,EAC5C;AAAA,EAEA,MAAgB,mBAAmB,KAA6B;AAC5D,QAAI,KAAK;AACL,UAAI,CAAC,KAAK,aAAa,KAAK,gBAAgB;AACxC,aAAK,YAAY,CAAC;AAClB,iBAAS,IAAI,GAAG,IAAI,KAAK,eAAe,QAAQ,KAAK;AACjD,gBAAM,SAAqD;AAAA,YACvD,MAAM;AAAA,YACN,SAAS,KAAK;AAAA,YACd,OAAO,KAAK;AAAA,YACZ,WAAW,KAAK;AAAA,YAChB,MAAM;AAAA,YACN,IAAI,GAAG,KAAK,MAAM;AAAA,YAClB,QAAQ;AAAA,UACZ;AACA,eAAK,UAAU,KAAK,IAAI,yBAAS,QAAQ,KAAK,eAAe,EAAE;AAC/D,gBAAM,KAAK,UAAU,GAAG,KAAK;AAAA,QACjC;AAAA,MACJ;AACA,WAAK,SAAS;AACd,WAAK,OAAO;AAAA,IAChB,OAAO;AACH,UAAI,KAAK,WAAW;AAChB,mBAAW,QAAQ,KAAK,WAAW;AAC/B,gBAAM,KAAK,OAAO;AAAA,QACtB;AACA,aAAK,YAAY;AAAA,MACrB;AAAA,IACJ;AAAA,EACJ;AAAA,EAEU,gBAAwB;AAC9B,WAAO,KAAK,MAAM,WAAW,sBAAsB;AAAA,EACvD;AAAA,EAEA,MAAa,SAAwB;AACjC,SAAK,QAAQ,IAAI;AAAA,MACb,mBAAmB,OAAO,eAAe,IAAI;AAAA,IACjD;AAAA,EACJ;AAAA,EAEA,MAAa,eACT,IACA,OACA,QACA,OACa;AACb,QAAI,CAAC,KAAK;AAAW;AACrB,SAAK,IAAI,MAAM,6BAA6B;AAC5C,UAAM,IAAI,OAAO,OAAO,WAAW,KAAK,SAAS,EAAE;AACnD,UAAM,OAAO,KAAK,UAAU;AAC5B,QAAI,CAAC;AAAM;AACX,QAAI,MAAqB;AACzB,YAAI,0BAAY,KAAK,KAAK,WAAW,SAAS;AAC1C,YAAM,MAAM,KAAK,cAAc,KAAK;AAAA,IACxC,WAAW,UAAU,UAAU,QAAW;AACtC,WAAK,UAAU,QAAQ,KAAK;AAAA,IAChC;AACA,QAAI,QAAQ;AAAM,WAAK,YAAY,GAAG;AAAA,EAC1C;AACJ;AAEO,SAAS,wBAAwB,GAA+D;AACnG,UAAQ,GAAG;AAAA,IACP,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO;AAAA,EACf;AACA,UAAQ,MAAM,GAAG,qCAAqC;AACtD,SAAO;AACX;",
  "names": []
}

{
  "version": 3,
  "sources": ["../../../src/lib/templates/text.ts"],
  "sourcesContent": ["import { PageItemOptionsTemplate } from '../types/type-pageItem';\nimport * as Color from '../const/Color';\nimport { TemplateIdent } from '../types/types';\n\nexport const textTemplates: Partial<Record<TemplateIdent, PageItemOptionsTemplate>> = {\n    'text.window.isOpen': {\n        role: 'text',\n        adapter: '',\n        type: 'text',\n        data: {\n            icon: {\n                true: {\n                    value: { type: 'const', constVal: 'window-open-variant' },\n                    color: { type: 'const', constVal: Color.Cyan },\n                },\n                false: {\n                    value: { type: 'const', constVal: 'window-closed-variant' },\n                    color: { type: 'const', constVal: Color.Green },\n                },\n            },\n            entity1: {\n                value: {\n                    type: 'triggered',\n                    mode: 'auto',\n                    role: 'sensor.window',\n                    dp: '',\n                },\n            },\n            text: {\n                true: { type: 'const', constVal: 'window' },\n                false: undefined,\n            },\n            text1: {\n                true: { type: 'const', constVal: 'open' },\n                false: { type: 'const', constVal: 'close' },\n            },\n        },\n    },\n    'text.window.isClose': {\n        role: 'text',\n        adapter: '',\n        type: 'text',\n\n        data: {\n            icon: {\n                true: {\n                    value: { type: 'const', constVal: 'window-open-variant' },\n                    color: { type: 'const', constVal: Color.Cyan },\n                },\n                false: {\n                    value: { type: 'const', constVal: 'window-closed-variant' },\n                    color: { type: 'const', constVal: Color.Green },\n                },\n            },\n            entity1: {\n                value: {\n                    type: 'triggered',\n                    mode: 'auto',\n                    role: 'sensor.window',\n                    dp: '',\n                    read: 'return !val',\n                },\n            },\n            text: {\n                true: { type: 'const', constVal: 'window' },\n                false: undefined,\n            },\n            text1: {\n                true: { type: 'const', constVal: 'open' },\n                false: { type: 'const', constVal: 'close' },\n            },\n        },\n    },\n    'text.temperature': {\n        role: '',\n        adapter: '',\n        type: 'text',\n\n        data: {\n            icon: {\n                true: {\n                    value: { type: 'const', constVal: 'temperature-celsius' },\n                    text: {\n                        value: {\n                            type: 'triggered',\n                            mode: 'auto',\n                            role: 'value.temperature',\n                            dp: '',\n                            read: 'return Math.round(val*10)/10',\n                        },\n                    },\n                    color: { type: 'const', constVal: Color.Red },\n                },\n                false: {\n                    value: { type: 'const', constVal: 'temperature-celsius' },\n                    color: { type: 'const', constVal: Color.Blue },\n                },\n                scale: { type: 'const', constVal: { min: 0, max: 30 } },\n            },\n            entity1: {\n                value: {\n                    type: 'triggered',\n                    mode: 'auto',\n                    role: 'value.temperature',\n                    dp: '',\n                },\n            },\n            text: {\n                true: { type: 'const', constVal: 'Temperature' },\n                false: undefined,\n            },\n            text1: {\n                true: {\n                    type: 'triggered',\n                    mode: 'auto',\n                    role: 'value.temperature',\n                    dp: '',\n                    read: 'return Math.round(parseFloat(val)*10)/10',\n                },\n                false: undefined,\n            },\n        },\n    },\n    'text.battery': {\n        /**\n         * entity1 enth\u00E4lt den F\u00FCllstand\n         * entity2 ebenfalls\n         * entity3 ist true f\u00FCr laden und false f\u00FCr entladen. default ist false entity3 wird nicht automatisch gefunden\n         */\n        role: 'battery',\n        adapter: '',\n        type: 'text',\n\n        data: {\n            icon: {\n                true: {\n                    value: {\n                        type: 'triggered',\n                        mode: 'auto',\n                        role: 'value.battery',\n                        dp: '',\n                        read: `const v = Math.round(val / 10)\n                        switch (v) {\n                            case 0:\n                                return 'battery-charging-outline';\n                            case 1:\n                            case 2:\n                            case 3:\n                            case 4:\n                            case 5:\n                            case 6:\n                            case 7:\n                            case 8:\n                            case 9:\n                                return 'battery-charging-' + v + '0';\n                            case 10:\n                            default:\n                                return 'battery-charging';}`,\n                    },\n                    text: {\n                        value: {\n                            type: 'triggered',\n                            mode: 'auto',\n                            role: 'value.battery',\n                            dp: '',\n                        },\n                        unit: {\n                            type: 'const',\n                            constVal: '%',\n                        },\n                        textSize: { type: 'const', constVal: 2 },\n                    },\n                    color: {\n                        type: 'const',\n                        constVal: Color.Green,\n                    },\n                },\n                false: {\n                    value: {\n                        type: 'triggered',\n                        mode: 'auto',\n                        role: 'value.battery',\n                        dp: '',\n                        read: `const v = Math.round(val / 10)\n                            switch (v) {\n                                case 0:\n                                    return 'battery-outline';\n                                case 1:\n                                case 2:\n                                case 3:\n                                case 4:\n                                case 5:\n                                case 6:\n                                case 7:\n                                case 8:\n                                case 9:\n                                    return 'battery-' + v + '0';\n                                case 10:\n                                default:\n                                    return 'battery';}`,\n                    },\n                    color: {\n                        type: 'const',\n                        constVal: Color.Red,\n                    },\n                },\n                scale: { type: 'const', constVal: { val_min: 10, val_max: 50, log10: 'max' } },\n            },\n            entity1: {\n                value: {\n                    type: 'state',\n                    mode: 'auto',\n                    role: 'value.battery',\n                    dp: '',\n                },\n            },\n            text: {\n                true: { type: 'const', constVal: 'Battery' },\n                false: undefined,\n            },\n            entity2: {\n                value: {\n                    type: 'triggered',\n                    mode: 'auto',\n                    role: 'value.battery',\n                    dp: '',\n                },\n                unit: { type: 'const', constVal: '%' },\n            },\n        },\n    },\n    'text.battery.bydhvs': {\n        /**\n         * entity1 enth\u00E4lt den F\u00FCllstand\n         * entity2 ebenfalls\n         * entity3 ist true f\u00FCr laden und false f\u00FCr entladen. default ist false entity3 wird nicht automatisch gefunden\n         */\n        template: 'text.battery',\n        role: 'battery',\n        adapter: 'bydhvs',\n        type: 'text',\n\n        data: {\n            icon: {\n                true: {\n                    value: {\n                        type: 'triggered',\n                        mode: 'auto',\n                        role: 'value.battery',\n                        dp: '.State.SOC$',\n                        read: `const v = Math.round(val / 10)\n                        switch (v) {\n                            case 0:\n                                return 'battery-charging-outline';\n                            case 1:\n                            case 2:\n                            case 3:\n                            case 4:\n                            case 5:\n                            case 6:\n                            case 7:\n                            case 8:\n                            case 9:\n                                return 'battery-charging-' + v + '0';\n                            case 10:\n                            default:\n                                return 'battery-charging';}`,\n                    },\n                    text: {\n                        value: {\n                            type: 'triggered',\n                            mode: 'auto',\n                            role: 'value.battery',\n                            dp: '.State.SOC$',\n                        },\n                        unit: {\n                            type: 'const',\n                            constVal: '%',\n                        },\n                        textSize: { type: 'const', constVal: 2 },\n                    },\n                    color: undefined,\n                },\n                false: {\n                    value: {\n                        type: 'triggered',\n                        mode: 'auto',\n                        role: 'value.battery',\n                        dp: '.State.SOC$',\n                        read: `const v = Math.round(val / 10)\n                            switch (v) {\n                                case 0:\n                                    return 'battery-outline';\n                                case 1:\n                                case 2:\n                                case 3:\n                                case 4:\n                                case 5:\n                                case 6:\n                                case 7:\n                                case 8:\n                                case 9:\n                                    return 'battery-' + v + '0';\n                                case 10:\n                                default:\n                                    return 'battery';}`,\n                    },\n                    color: undefined,\n                },\n                scale: { type: 'const', constVal: { val_min: 10, val_max: 50, log10: 'max' } },\n            },\n            entity1: {\n                value: {\n                    type: 'state',\n                    mode: 'auto',\n                    role: 'value.battery',\n                    dp: '.State.SOC$',\n                },\n            },\n            text: {\n                true: { type: 'const', constVal: 'Battery' },\n                false: undefined,\n            },\n            entity2: {\n                value: {\n                    type: 'triggered',\n                    mode: 'auto',\n                    role: 'value.battery',\n                    dp: '.State.SOC$',\n                },\n                unit: { type: 'const', constVal: '%' },\n            },\n            entity3: {\n                value: {\n                    type: 'triggered',\n                    mode: 'auto',\n                    role: 'value.power',\n                    dp: '.State.Power$',\n                    read: 'return val <= 0',\n                },\n            },\n        },\n    },\n    'text.battery.low': {\n        role: 'text',\n        adapter: '',\n        type: 'text',\n\n        data: {\n            icon: {\n                true: {\n                    value: { type: 'const', constVal: 'battery-outline' },\n                    color: { type: 'const', constVal: Color.Red },\n                },\n                false: {\n                    value: { type: 'const', constVal: 'battery' },\n                    color: { type: 'const', constVal: Color.Green },\n                },\n            },\n            entity1: {\n                value: {\n                    type: 'triggered',\n                    mode: 'auto',\n                    role: 'indicator.lowbat',\n                    dp: '',\n                },\n            },\n            text: {\n                true: { type: 'const', constVal: 'Battery' },\n                false: undefined,\n            },\n            text1: {\n                true: { type: 'const', constVal: 'ok' },\n                false: { type: 'const', constVal: 'low' },\n            },\n        },\n    },\n};\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageItem.ts"],
  "sourcesContent": ["import { rgb_dec565, colorScale0, colorScale10, GetIconColor, hsvtodec, scale, White, Blue } from '../const/Color';\nimport { Icons } from '../const/icon_mapping';\nimport { Page, PageInterface } from './Page';\nimport { PageItemDataitems, MessageItem, entityUpdateDetailMessage } from '../types/type-pageItem';\nimport {\n    getDecfromHue,\n    getDecfromRGBThree,\n    getIconEntryColor,\n    getIconEntryValue,\n    getTranslation,\n    getValueEntryBoolean,\n    getValueEntryNumber,\n    getValueEntryString,\n    getValueEntryTextOnOff,\n} from '../const/tools';\nimport { PopupType } from '../types/types';\nimport { templatePageItems } from '../templates/TpageItem';\n\n//light, shutter, delete, text, button, switch, number,input_sel, timer und fan types\nexport class PageGrid extends Page {\n    defaultOnColor = White;\n    defaultOffColor = Blue;\n    constructor(config: PageInterface) {\n        super({ ...config, card: 'cardItemSpecial' });\n    }\n\n    async getPageItem(item: PageItemDataitems, id: string): Promise<string> {\n        const message: Partial<MessageItem> = {};\n        message.displayName = (item.data.headline && (await item.data.headline.getString())) ?? '';\n        message.intNameEntity = id + '?' + item.role;\n        switch (item.role) {\n            case 'light':\n            case 'dimmer':\n            case 'socket':\n            case 'cie':\n            case 'rgb':\n            case 'ct':\n            case 'hue':\n            case 'rgbSingle': {\n                message.type = 'light';\n\n                const dimmer = item.data.dimmer && (await item.data.dimmer.getNumber());\n                const rgb =\n                    item.role == 'rgb'\n                        ? await getDecfromRGBThree(item)\n                        : item.data.color && (await item.data.color.getRGBDec());\n                const hue =\n                    item.role == 'hue' && item.data.hue ? hsvtodec(await item.data.hue.getNumber(), 1, 1) : null;\n                const v =\n                    (item.data.entity1 && item.data.entity1.value && (await item.data.entity1.value.getBoolean())) ??\n                    true;\n\n                switch (item.role) {\n                    case 'socket': {\n                        message.icon = Icons.GetIcon('power-socket-de');\n                        break;\n                    }\n                    default: {\n                        message.icon = Icons.GetIcon('lightbulb');\n                        break;\n                    }\n                }\n                if (v) {\n                    message.optionalValue = '1';\n                    message.iconColor = hue ?? rgb ?? (await GetIconColor(item, dimmer ?? 100));\n                    const i = item.data.icon.true.value ? await item.data.icon.true.value.getString() : null;\n                    if (i !== null) message.icon = i;\n                } else {\n                    message.optionalValue = '0';\n                    message.iconColor = await GetIconColor(item, false);\n                    const i = item.data.icon.false.value ? await item.data.icon.false.value.getString() : null;\n                    if (i !== null) message.icon = i;\n                }\n                message.displayName = (await getValueEntryTextOnOff(item.data.text, true)) ?? message.displayName;\n                return this.getItemMesssage(message);\n                break;\n            }\n            case 'blind': {\n                message.type = 'shutter';\n\n                const value = await getValueEntryNumber(item.data.entity1);\n                /*const min = (item.data.minValue && (await item.data.minValue.getNumber())) ?? null;\n                const max = (item.data.maxValue && (await item.data.maxValue.getNumber())) ?? null;\n                */\n                message.icon = Icons.GetIcon(\n                    (item.data.icon.true.value && (await item.data.icon.true.value.getString())) ?? 'window-open',\n                );\n                message.iconColor = await GetIconColor(item, value !== null ? value : true);\n                //const dimmer = item.data.dimmer && (await item.data.dimmer.getNumber());\n                /*let val = value;\n                if (min !== null && max !== null && val !== null) {\n                    val = Math.trunc(scale(val, min, max, 100, 0));\n                }*/\n                message.optionalValue = [\n                    Icons.GetIcon('arrow-up'), //up\n                    Icons.GetIcon('stop'), //stop\n                    Icons.GetIcon('arrow-down'), //down\n                    'enable', // up status\n                    'enable', // stop status\n                    'enable', // down status\n                ].join('|');\n                message.displayName = (await getValueEntryTextOnOff(item.data.text, true)) ?? message.displayName;\n                return this.getItemMesssage(message);\n                break;\n            }\n            case 'gate':\n            case 'door':\n            case 'window': {\n                message.type = 'text';\n\n                let value = await getValueEntryBoolean(item.data.entity1);\n                if (value !== null) {\n                    // gate works revese true is closed -> invert value\n                    if (item.role === 'gate') value = !value;\n                    let icon = '';\n                    message.iconColor = await GetIconColor(item, value ?? true ? true : false);\n                    if (value) {\n                        icon =\n                            (item.data.icon.true.value && (await item.data.icon.true.value.getString())) ??\n                            (item.role === 'door'\n                                ? 'door-open'\n                                : item.role === 'window'\n                                  ? 'window-open-variant'\n                                  : 'garage-open');\n                        message.optionalValue = getTranslation(this.library, 'window', 'opened');\n                    } else {\n                        icon =\n                            (item.data.icon.false.value && (await item.data.icon.false.value.getString())) ??\n                            (item.role === 'door'\n                                ? 'door-closed'\n                                : item.role === 'window'\n                                  ? 'window-closed-variant'\n                                  : 'garage');\n                        message.optionalValue = getTranslation(this.library, 'window', 'closed');\n                    }\n                    message.displayName = (await getValueEntryTextOnOff(item.data.text, value)) ?? message.displayName;\n                    message.icon = Icons.GetIcon(icon);\n                    return this.getItemMesssage(message);\n                } else {\n                    this.log.error(`Missing data value for ${this.name}-${id} role:${item.role}`);\n                }\n                break;\n            }\n            /*case 'volumeGroup': {\n                break;\n            }\n            case 'volume': {\n                break;\n            }\n            case 'info':\n            case 'humidity':\n            case 'temperature':\n            case 'value.temperature':\n            case 'value.humidity':\n            case 'sensor.door':\n            case 'sensor.window':\n            case 'thermostat': {\n                break;\n            }\n            case 'warning': {\n                break;\n            }\n            case 'ct': {\n                break;\n            }\n            case 'cie': {\n                break;\n            }*/\n            case 'motion': {\n                message.type = 'text';\n                const value = await getValueEntryBoolean(item.data.entity1);\n                if (value !== null) {\n                    message.iconColor = await GetIconColor(item, value ?? true ? true : false);\n                    message.icon = Icons.GetIcon(await getIconEntryValue(item.data.icon, value, 'motion-sensor'));\n                    message.optionalValue = getTranslation(this.library, value ? 'on' : 'off');\n                    message.displayName = (await getValueEntryTextOnOff(item.data.text, value)) ?? message.displayName;\n                    return this.getItemMesssage(message);\n                } else {\n                    this.log.error(`Missing data value for ${this.name}-${id} role:${item.role}`);\n                }\n                break;\n            }\n\n            case 'buttonSensor':\n            case 'button': {\n                let value = (item.data.setValue1 && (await item.data.setValue1.getBoolean())) ?? null;\n                if (value === null && item.role === 'buttonSensor') value = true;\n                if (value !== null) {\n                    message.type = item.role === 'buttonSensor' ? 'input_sel' : 'button';\n                    message.iconColor = await GetIconColor(item, value);\n                    message.icon = Icons.GetIcon(await getIconEntryValue(item.data.icon, value, 'gesture-tap-button'));\n                    message.displayName = (await getValueEntryTextOnOff(item.data.text, value)) ?? '';\n                    message.optionalValue = (await getValueEntryString(item.data.entity1)) ?? 'PRESS';\n                    return this.getItemMesssage(message);\n                } else {\n                    this.log.error(`Missing set value for ${this.name}-${id} role:${item.role}`);\n                }\n                break;\n            }\n            case 'value.time':\n            case 'level.timer': {\n                const value = (item.data.setValue1 && (await item.data.setValue1.getNumber())) ?? null;\n                if (value !== null) {\n                    message.type = 'timer';\n                    message.iconColor = await GetIconColor(item, value);\n                    message.icon = Icons.GetIcon(await getIconEntryValue(item.data.icon, true, 'gesture-tap-button'));\n                    message.optionalValue = (await getValueEntryTextOnOff(item.data.text, true)) ?? 'PRESS';\n                    return this.getItemMesssage(message);\n                } else {\n                    this.log.error(`Missing set value for ${this.name}-${id} role:${item.role}`);\n                }\n                break;\n            }\n            case 'value.alarmtime': {\n                const value = (item.data.setValue1 && (await item.data.setValue1.getNumber())) ?? null;\n                if (value !== null) {\n                    message.type = 'timer';\n\n                    // das ist im Grunde wie vorher nur das die Farbe in aus der Konfiguration benutzt wird, wenn vorhanden\n                    message.iconColor =\n                        ((await getValueEntryString(item.data.entity2)) ?? '') == 'paused'\n                            ? await getIconEntryColor(item.data.icon, true, String(rgb_dec565(colorScale10)))\n                            : await getIconEntryColor(item.data.icon, false, String(rgb_dec565(colorScale0)));\n                    message.displayName = new Date(\n                        ((await getValueEntryNumber(item.data.entity1)) || 0) * 1000,\n                    ).toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit', second: '2-digit' });\n                    message.icon = Icons.GetIcon(await getIconEntryValue(item.data.icon, true, 'timer-outline'));\n                    message.optionalValue = (await getValueEntryTextOnOff(item.data.text, true)) ?? 'PRESS';\n                    return this.getItemMesssage(message);\n                } else {\n                    this.log.error(`Missing set value for ${this.name}-${id} role:${item.role}`);\n                }\n                break;\n            }\n\n            case 'level.mode.fan': {\n                message.type = 'fan';\n                const value = (await getValueEntryBoolean(item.data.entity1)) ?? false;\n                message.iconColor = await GetIconColor(item, value);\n                message.icon = Icons.GetIcon(await getIconEntryValue(item.data.icon, value, 'fan'));\n                message.optionalValue = value ? '1' : '0';\n                return this.getItemMesssage(message);\n                break;\n            }\n            case 'media.repeat': {\n                message.type = 'button';\n                const value: number | boolean | null =\n                    item.data.entity1 && item.data.entity1.value && item.data.entity1.value.type === 'number'\n                        ? await getValueEntryNumber(item.data.entity1)\n                        : await getValueEntryBoolean(item.data.entity1);\n                if (value !== null) {\n                    message.iconColor = await GetIconColor(item, !!value);\n                    if (value === 2) {\n                        message.icon = 'repeat-once';\n                    } else {\n                        message.icon = Icons.GetIcon(\n                            await getIconEntryValue(item.data.icon, !!value, 'repeat-variant', 'repeat-off'),\n                        );\n\n                        message.optionalValue = !!value ? '1' : '0';\n                        return this.getItemMesssage(message);\n                    }\n                }\n                break;\n            }\n            /*case 'lock': {\n                break;\n            }\n            case 'slider': {\n                break;\n            }\n            case 'switch.mode.wlan': {\n                break;\n            }\n            case 'media': {\n                break;\n            }\n            case 'timeTable': {\n                break;\n            }\n            case 'airCondition': {\n                break;\n            }*/\n        }\n\n        return '~delete~~~~~';\n    }\n\n    getDetailPayload(message: Partial<entityUpdateDetailMessage>): string {\n        if (!message.type) return '';\n        switch (message.type) {\n            case '2Sliders': {\n                let result: entityUpdateDetailMessage = {\n                    type: '2Sliders',\n                    icon: undefined,\n                    entityName: 'test',\n                    slidersColor: 'disable',\n                    buttonState: 'disable',\n                    slider1Pos: 'disable',\n                    slider2Pos: 'disable',\n                    hueMode: false,\n                    hue_translation: '',\n                    slider2Translation: '',\n                    slider1Translation: '',\n                    popup: false,\n                };\n                result = Object.assign(result, message);\n                return this.getPayload(\n                    'entityUpdateDetail',\n                    result.entityName,\n                    '',\n                    result.slidersColor,\n                    result.buttonState === 'disable' ? 'disable' : result.buttonState ? '1' : '0',\n                    String(result.slider1Pos),\n                    String(result.slider2Pos),\n                    result.hueMode ? 'enable' : 'disable',\n                    result.hue_translation,\n                    result.slider2Translation,\n                    result.slider1Translation,\n                    result.popup ? 'enable' : 'disable',\n                );\n                break;\n            }\n        }\n        return '';\n    }\n    async GenerateDetailPage(mode: PopupType, item: PageItemDataitems, id: string): Promise<MessageItem | null> {\n        const message: Partial<entityUpdateDetailMessage> = {};\n        const template = templatePageItems[item.role];\n        message.entityName = id;\n        /*const o = getObject(id);\n        let val: (boolean | number) = 0;\n        let icon = Icons.GetIcon('lightbulb');\n        let iconColor = rgb_dec565(config.defaultColor);\n        const role = o.common.role as NSPanel.roles;*/\n        if (mode == 'popupLight') {\n            switch (item.role) {\n                case 'light':\n                case 'socket':\n                case 'dimmer':\n                case 'hue':\n                case 'ct':\n                case 'rgbSingle':\n                case 'rgb': {\n                    message.type = '2Sliders';\n                    if (template.type !== message.type) return null;\n                    message.buttonState =\n                        (template.buttonState ? await getValueEntryBoolean(item.data.entity1) : null) ?? 'disable';\n                    const dimmer = item.data.dimmer && (await item.data.dimmer.getNumber());\n                    if (dimmer != null && template.slider1Pos) {\n                        if (item.data.minValue1 != undefined && item.data.maxValue1) {\n                            message.slider1Pos = Math.trunc(\n                                scale(\n                                    dimmer,\n                                    await item.data.minValue1.getNumber(),\n                                    await item.data.maxValue1.getNumber(),\n                                    100,\n                                    0,\n                                ),\n                            );\n                        } else {\n                            message.slider1Pos = dimmer;\n                        }\n                    }\n\n                    message.slidersColor = template.slidersColor\n                        ? String(rgb_dec565(template.slidersColor))\n                        : (await getIconEntryColor(item.data.icon, false, White)) ?? 'disable';\n                    let rgb;\n                    switch (item.role) {\n                        case 'socket':\n                        case 'light':\n                        case 'dimmer':\n                        case 'ct':\n                            break;\n                        case 'hue':\n                            rgb = rgb ?? (await getDecfromHue(item)) ?? null;\n                            break;\n                        case 'rgbSingle':\n                        case 'rgb':\n                            rgb = await getDecfromRGBThree(item);\n                            break;\n                    }\n                    if (rgb !== null && template.hueMode) {\n                        message.hueMode = true;\n                        message.slidersColor = rgb;\n                    }\n\n                    message.slider2Pos = 'disable';\n\n                    let ct = template.slider2Pos ? await getValueEntryNumber(item.data.entity2) : null;\n                    if (ct != null && template.slider2Pos !== false) {\n                        const max =\n                            (item.data.maxValue2 && (await item.data.maxValue2.getNumber())) ?? template.slider2Pos;\n                        ct = ct > max ? max : ct < 0 ? 0 : ct;\n                        if (item.data.minValue2 !== undefined) {\n                            const min = (await item.data.minValue2.getNumber()) ?? 0;\n                            message.slider2Pos = Math.trunc(scale(ct < min ? min : ct, min, max, 100, 0));\n                        } else {\n                            message.slider2Pos = Math.trunc(scale(ct, 0, max, 100, 0));\n                        }\n                    }\n\n                    if (\n                        (template.popup && item.data.modeList && (await item.data.modeList.getString())) ??\n                        null !== null\n                    ) {\n                        message.popup = true;\n                    }\n                    message.slider1Translation =\n                        template.slider1Translation !== false\n                            ? (item.data.modeList && (await item.data.modeList.getString())) ??\n                              template.slider1Translation\n                            : '';\n                    message.slider2Translation =\n                        template.slider2Translation !== false\n                            ? (item.data.modeList && (await item.data.modeList.getString())) ??\n                              template.slider2Translation\n                            : '';\n                    message.hue_translation =\n                        template.hue_translation !== false\n                            ? (item.data.modeList && (await item.data.modeList.getString())) ?? template.hue_translation\n                            : '';\n\n                    break;\n                }\n                // RGB-Licht-einzeln (HEX)\n\n                /*} else if (mode == 'popupShutter') {\n            icon = item.data.icon !== undefined ? Icons.GetIcon(item.data.icon) : Icons.GetIcon('window-open');\n            if (existsState(id + '.ACTUAL')) {\n                val = getState(id + '.ACTUAL').val;\n                RegisterDetailEntityWatcher(id + '.ACTUAL', item.data, type, placeId);\n            } else if (existsState(id + '.SET')) {\n                val = getState(id + '.SET').val;\n                //RegisterDetailEntityWatcher(id + '.SET', item.data, type);\n            }\n            let tilt_position: any = 'disabled';\n            if (existsState(id + '.TILT_ACTUAL')) {\n                tilt_position = getState(id + '.TILT_ACTUAL').val;\n                RegisterDetailEntityWatcher(id + '.TILT_ACTUAL', item.data, type, placeId);\n            } else if (existsState(id + '.TILT_SET')) {\n                tilt_position = getState(id + '.TILT_SET').val;\n                //RegisterDetailEntityWatcher(id + '.TILT_SET', item.data, type);\n            }\n\n            let min_Level: number = 0;\n            let max_Level: number = 100;\n            if (item.data.minValueLevel !== undefined && item.data.maxValueLevel !== undefined) {\n                min_Level = item.data.minValueLevel;\n                max_Level = item.data.maxValueLevel;\n                val = Math.trunc(\n                    scale(getState(id + '.ACTUAL').val, item.data.minValueLevel, item.data.maxValueLevel, 100, 0),\n                );\n            }\n            let min_Tilt: number = 0;\n            let max_Tilt: number = 100;\n            if (item.data.minValueTilt !== undefined && item.data.maxValueTilt !== undefined) {\n                min_Tilt = item.data.minValueTilt;\n                max_Tilt = item.data.maxValueTilt;\n                tilt_position = Math.trunc(\n                    scale(getState(id + '.TILT_ACTUAL').val, item.data.minValueTilt, item.data.maxValueTilt, 100, 0),\n                );\n            }\n\n            if (Debug) log('minLevel ' + min_Level + ' maxLevel ' + max_Level + ' Level ' + val, 'info');\n            if (Debug) log('minTilt ' + min_Tilt + ' maxTilt ' + max_Tilt + ' TiltPosition ' + tilt_position, 'info');\n\n            let textSecondRow = '';\n            const icon_id = icon;\n            const icon_up = Icons.GetIcon('arrow-up');\n            const icon_stop = Icons.GetIcon('stop');\n            const icon_down = Icons.GetIcon('arrow-down');\n            const tempVal: number = getState(item.data.id + '.ACTUAL').val;\n\n            //Disabled Status while bug in updating origin adapter data points of lift values\n            const icon_up_status = 'enable';\n            //let icon_up_status = tempVal === min_Level ? 'disable' : 'enable';\n            const icon_stop_status = 'enable';\n            if (tempVal === min_Level || tempVal === max_Level || checkBlindActive === false) {\n                //icon_stop_status = 'disable';\n            }\n            const icon_down_status = 'enable';\n            //let icon_down_status = tempVal === max_Level ? 'disable' : 'enable';\n\n            let textTilt = '';\n            let iconTiltLeft = '';\n            let iconTiltStop = '';\n            let iconTiltRight = '';\n            let iconTiltLeftStatus = 'disable';\n            let iconTiltStopStatus = 'disable';\n            let iconTiltRightStatus = 'disable';\n            let tilt_pos = 'disable';\n\n            if (existsState(id + '.TILT_SET')) {\n                textTilt = findLocale('blinds', 'Tilt');\n                iconTiltLeft = Icons.GetIcon('arrow-top-right');\n                iconTiltStop = Icons.GetIcon('stop');\n                iconTiltRight = Icons.GetIcon('arrow-bottom-left');\n                iconTiltLeftStatus = getState(id + '.TILT_ACTUAL').val != max_Tilt ? 'enable' : 'disable';\n                iconTiltStopStatus = 'enable';\n                iconTiltRightStatus = getState(id + '.TILT_ACTUAL').val != min_Tilt ? 'enable' : 'disable';\n                tilt_pos = tilt_position;\n            }\n\n            if (item.data.secondRow != undefined) {\n                textSecondRow = item.data.secondRow;\n            }\n\n            const tempId = placeId != undefined ? placeId : id;\n\n            /*entityUpdateDetail~entityName~*sliderPos*~2ndrow~textPosition~icon1~iconUp~iconStop~iconDown\n            ~iconUpStatus~iconStopStatus~iconDownStatus~textTilt~iconTiltLeft\n            ~iconTiltStop~iconTiltRight~iconTiltLeftStatus~iconTiltStopStatus~iconTiltLeftStatus~tiltPo\n            out_msgs.push({\n                payload:\n                    'entityUpdateDetail' +\n                    '~' + //entityUpdateDetail\n                    tempId +\n                    '~' + //entity_id\n                    val +\n                    '~' + //Shutterposition\n                    textSecondRow +\n                    '~' + //pos_status 2.line\n                    findLocale('blinds', 'Position') +\n                    '~' + //pos_translation\n                    icon_id +\n                    '~' + //{icon_id}~\n                    icon_up +\n                    '~' + //{icon_up}~\n                    icon_stop +\n                    '~' + //{icon_stop}~\n                    icon_down +\n                    '~' + //{icon_down}~\n                    icon_up_status +\n                    '~' + //{icon_up_status}~\n                    icon_stop_status +\n                    '~' + //{icon_stop_status}~\n                    icon_down_status +\n                    '~' + //{icon_down_status}~\n                    textTilt +\n                    '~' + //{textTilt}~\n                    iconTiltLeft +\n                    '~' + //{iconTiltLeft}~\n                    iconTiltStop +\n                    '~' + //{iconTiltStop}~\n                    iconTiltRight +\n                    '~' + //{iconTiltRight}~\n                    iconTiltLeftStatus +\n                    '~' + //{iconTiltLeftStatus}~\n                    iconTiltStopStatus +\n                    '~' + //{iconTiltStopStatus}~\n                    iconTiltRightStatus +\n                    '~' + //{iconTiltRightStatus}~\n                    tilt_pos, //{tilt_pos}\")\n            });\n        }\n\n        /*if (type == 'popupThermo') {\n            let vIcon = item.data.icon != undefined ? item.data.icon : 'fan';\n            let mode1 =\n                isPageThermoItem(item.data) && item.data.popupThermoMode1 != undefined\n                    ? item.data.popupThermoMode1.join('?')\n                    : '';\n            let mode2 =\n                isPageThermoItem(item.data) && item.data.popupThermoMode2 != undefined\n                    ? item.data.popupThermoMode2.join('?')\n                    : '';\n            let mode3 =\n                isPageThermoItem(item.data) && item.data.popupThermoMode3 != undefined\n                    ? item.data.popupThermoMode3.join('?')\n                    : '';\n\n            let payloadParameters1 = '~~~~';\n            if (isPageThermoItem(item.data) && item.data.popupThermoMode1 != undefined) {\n                RegisterDetailEntityWatcher(\n                    item.data.id + '.' + item.data.setThermoAlias![0],\n                    item.data,\n                    type,\n                    placeId,\n                );\n                payloadParameters1 =\n                    item.data.popUpThermoName![0] +\n                    '~' + //{heading}~            Mode 1\n                    'modus1' +\n                    '~' + //{id}~                 Mode 1\n                    getState(item.data.id + '.' + item.data.setThermoAlias![0]).val +\n                    '~' + //{ACTUAL}~             Mode 1\n                    mode1 +\n                    '~'; //{possible values}     Mode 1 (1-n)\n            }\n\n            let payloadParameters2 = '~~~~';\n            if (isPageThermoItem(item.data) && item.data.popupThermoMode2 != undefined) {\n                RegisterDetailEntityWatcher(\n                    item.data.id + '.' + item.data.setThermoAlias![1],\n                    item.data,\n                    type,\n                    placeId,\n                );\n                payloadParameters2 =\n                    item.data.popUpThermoName![1] +\n                    '~' + //{heading}~            Mode 2\n                    'modus2' +\n                    '~' + //{id}~                 Mode 2\n                    getState(item.data.id + '.' + item.data.setThermoAlias![1]).val +\n                    '~' + //{ACTUAL}~             Mode 2\n                    mode2 +\n                    '~'; //{possible values}\n            }\n\n            let payloadParameters3 = '~~~~';\n            if (isPageThermoItem(item.data) && item.data.popupThermoMode3 != undefined) {\n                RegisterDetailEntityWatcher(\n                    item.data.id + '.' + item.data.setThermoAlias![2],\n                    item.data,\n                    type,\n                    placeId,\n                );\n                payloadParameters3 =\n                    item.data.popUpThermoName![2] +\n                    '~' + //{heading}~            Mode 3\n                    'modus3' +\n                    '~' + //{id}~                 Mode 3\n                    getState(item.data.id + '.' + item.data.setThermoAlias![2]).val +\n                    '~' + //{ACTUAL}~             Mode 3\n                    mode3; //{possible values}     Mode 3 (1-n)\n            }\n\n            out_msgs.push({\n                payload:\n                    'entityUpdateDetail' +\n                    '~' + //entityUpdateDetail\n                    id +\n                    '~' + //{entity_id}\n                    Icons.GetIcon(vIcon) +\n                    '~' + //{icon_id}~\n                    11487 +\n                    '~' + //{icon_color}~\n                    payloadParameters1 +\n                    payloadParameters2 +\n                    payloadParameters3,\n            });\n        }\n\n        if (type == 'popupTimer') {\n            let timer_actual: number = 0;\n\n            if (existsState(id + '.ACTUAL')) {\n                RegisterDetailEntityWatcher(id + '.ACTUAL', item.data, type, placeId);\n                timer_actual = getState(id + '.ACTUAL').val;\n            }\n\n            if (existsState(id + '.STATE')) {\n                RegisterDetailEntityWatcher(id + '.STATE', item.data, type, placeId);\n            }\n\n            let editable = 1;\n            let action1 = '';\n            let action2 = '';\n            let action3 = '';\n            let label1 = '';\n            let label2 = '';\n            let label3 = '';\n            let min_remaining = 0;\n            let sec_remaining = 0;\n            if (existsState(id + '.STATE')) {\n                if (role == 'value.time') {\n                    if (getState(id + '.STATE').val == 'idle' || getState(id + '.STATE').val == 'paused') {\n                        min_remaining = Math.floor(timer_actual / 60);\n                        sec_remaining = timer_actual % 60;\n                        editable = 1;\n                    } else {\n                        min_remaining = Math.floor(timer_actual / 60);\n                        sec_remaining = timer_actual % 60;\n                        editable = 1;\n                    }\n                } else if (role == 'level.timer') {\n                    if (getState(id + '.STATE').val == 'idle' || getState(id + '.STATE').val == 'paused') {\n                        min_remaining = Math.floor(timer_actual / 60);\n                        sec_remaining = timer_actual % 60;\n                        editable = 1;\n                        action2 = 'start';\n                        label2 = findLocale('timer', 'start');\n                    } else {\n                        min_remaining = Math.floor(timer_actual / 60);\n                        sec_remaining = timer_actual % 60;\n                        editable = 0;\n                        action1 = 'pause';\n                        action2 = 'cancle';\n                        action3 = 'finish';\n                        label1 = findLocale('timer', 'pause');\n                        label2 = findLocale('timer', 'cancel');\n                        label3 = findLocale('timer', 'finish');\n                    }\n                } else if (role == 'value.alarmtime') {\n                    if (getState(id + '.STATE').val == 'paused') {\n                        min_remaining = Math.floor(timer_actual / 60);\n                        sec_remaining = timer_actual % 60;\n                        editable = 1;\n                        action2 = 'start';\n                        label2 = findLocale('timer', 'on');\n                    } else {\n                        min_remaining = Math.floor(timer_actual / 60);\n                        sec_remaining = timer_actual % 60;\n                        editable = 0;\n                        action2 = 'pause';\n                        label2 = findLocale('timer', 'off');\n                    }\n                }\n\n                const tempId = placeId != undefined ? placeId : id;\n\n                out_msgs.push({\n                    payload:\n                        'entityUpdateDetail' +\n                        '~' + //entityUpdateDetail\n                        tempId +\n                        '~~' + //{entity_id}\n                        rgb_dec565(White) +\n                        '~' + //{icon_color}~\n                        tempId +\n                        '~' +\n                        min_remaining +\n                        '~' +\n                        sec_remaining +\n                        '~' +\n                        editable +\n                        '~' +\n                        action1 +\n                        '~' +\n                        action2 +\n                        '~' +\n                        action3 +\n                        '~' +\n                        label1 +\n                        '~' +\n                        label2 +\n                        '~' +\n                        label3,\n                }\n\n        }\n\n            if (type == 'popupFan') {\n\n                let switchVal = '0';\n                if (role == 'level.mode.fan') {\n                    if (existsState(id + '.SET')) {\n                        val = getState(id + '.SET').val;\n                        RegisterDetailEntityWatcher(id + '.SET', item.data, type, placeId);\n                    }\n                    if (existsState(id + '.MODE')) {\n                        RegisterDetailEntityWatcher(id + '.MODE', item.data, type, placeId);\n                    }\n\n                    icon = item.data.icon !== undefined ? Icons.GetIcon(item.data.icon) : 'fan';\n\n                    if (val) {\n                        switchVal = '1';\n                        iconColor = GetIconColor(item.data, true, true);\n                    } else {\n                        iconColor = GetIconColor(item.data, false, true);\n                    }\n\n                    const actualSpeed = getState(id + '.SPEED').val;\n                    let maxSpeed = item.data.maxValue != undefined ? item.data.maxValue : 100;\n\n                    let modeList = item.data.modeList!.join('?');\n                    const actualMode = item.data.modeList![getState(id + '.MODE').val];\n\n                    let tempId = placeId != undefined ? placeId : id;\n                    // {tempid | icon | iconColor | switchVal | actualSpeed | maxSpeed: | findLocale | actualMode | modeList}\n                    out_msgs.push({\n                        payload:\n                            'entityUpdateDetail' +\n                            '~' + // entityUpdateDetail\n                            tempId +\n                            '~' +\n                            icon +\n                            '~' + // iconId\n                            iconColor +\n                            '~' + // iconColor\n                            switchVal +\n                            '~' + // buttonState\n                            actualSpeed +\n                            '~' +\n                            maxSpeed +\n                            '~' +\n                            findLocale('fan', 'speed') +\n                            '~' +\n                            actualMode +\n                            '~' +\n                            modeList,\n                    });\n                }\n            }\n\n            if (type == 'popupInSel') {\n                if (role == 'media') {\n                    let actualState: any = '';\n                    let optionalString: string = 'Kein Eintrag';\n                    let mode: NSPanel.mediaOptional | '' = '';\n                    if (isPageMediaItem(item.data)) {\n                        const vTempAdapter = item.data.adapterPlayerInstance!.split('.');\n                        const vAdapter: NSPanel.PlayerType = vTempAdapter[0] as NSPanel.PlayerType;\n                        if (optional == 'seek') {\n                            const actualStateTemp: number = getState(\n                                item.data.adapterPlayerInstance + 'root.' + item.data.mediaDevice + '.seek',\n                            ).val;\n                            actualState = Math.round(actualStateTemp / 10) * 10 + '%';\n                            if (vAdapter == 'sonos') {\n                                optionalString = '0%?10%?20%?30%?40%?50%?60%?70%?80%?90%?100%';\n                            }\n                            mode = 'seek';\n                        } else if (optional == 'crossfade') {\n                            if (\n                                existsObject(\n                                    item.data.adapterPlayerInstance + 'root.' + item.data.mediaDevice + '.crossfade',\n                                )\n                            ) {\n                                let actualStateTemp: boolean = getState(\n                                    item.data.adapterPlayerInstance + 'root.' + item.data.mediaDevice + '.crossfade',\n                                ).val;\n                                if (actualStateTemp) {\n                                    actualState = findLocale('media', 'on');\n                                } else {\n                                    actualState = findLocale('media', 'off');\n                                }\n                            }\n                            if (vAdapter == 'sonos') {\n                                optionalString = findLocale('media', 'on') + '?' + findLocale('media', 'off');\n                            }\n                            mode = 'crossfade';\n                        } else if (optional == 'speakerlist') {\n                            if (vAdapter == 'spotify-premium') {\n                                if (existsObject(item.data.adapterPlayerInstance + 'player.device.name')) {\n                                    actualState = formatInSelText(\n                                        getState(item.data.adapterPlayerInstance + 'player.device.name').val,\n                                    );\n                                }\n                            } else if (vAdapter == 'alexa2') {\n                                if (existsObject(item.data.adapterPlayerInstance + 'player.device.name')) {\n                                    //Todo Richtiges Device finden\n                                    actualState = formatInSelText(\n                                        getState(\n                                            item.data.adapterPlayerInstance +\n                                            'Echo-Devices.' +\n                                            item.data.mediaDevice +\n                                            '.Info.name',\n                                        ).val,\n                                    );\n                                }\n                            } else if (vAdapter == 'bosesoundtouch') {\n                                if (existsObject(item.data.adapterPlayerInstance + 'deviceInfo.name')) {\n                                    actualState = formatInSelText(\n                                        getState(item.data.adapterPlayerInstance + 'deviceInfo.name').val,\n                                    );\n                                }\n                            } else if (vAdapter == 'squeezeboxrpc') {\n                                actualState = item.data.mediaDevice;\n                            }\n                            let tempSpeakerList: string[] = [];\n                            for (let i = 0; i < item.data.speakerList!.length; i++) {\n                                tempSpeakerList[i] = formatInSelText(item.data.speakerList![i]).trim();\n                            }\n                            optionalString = item.data.speakerList != undefined ? tempSpeakerList.join('?') : '';\n                            mode = 'speakerlist';\n                        } else if (optional == 'playlist') {\n                            if (vAdapter == 'spotify-premium') {\n                                if (existsObject(item.data.adapterPlayerInstance + 'player.playlist.name')) {\n                                    actualState = formatInSelText(\n                                        getState(item.data.adapterPlayerInstance + 'player.playlist.name').val,\n                                    );\n                                }\n                                let tempPlayList: string[] = [];\n                                for (let i = 0; i < item.data.playList!.length; i++) {\n                                    tempPlayList[i] = formatInSelText(item.data.playList![i]);\n                                }\n                                optionalString = item.data.playList != undefined ? tempPlayList.join('?') : '';\n                            } else if (vAdapter == 'alexa2') {\n                                //Todo Richtiges Device finden\n                                actualState = formatInSelText(\n                                    getState(\n                                        item.data.adapterPlayerInstance +\n                                        'Echo-Devices.' +\n                                        item.data.mediaDevice +\n                                        '.Player.currentAlbum',\n                                    ).val,\n\n                                    const tPlayList: any = []\n                                for (let i = 0; i < item.data.playList!.length; i++) {\n                                    if (Debug)\n                                        log(\n                                            'function GenerateDetailPage role:media -> Playlist ' + item.data.playList![i],\n                                            'info',\n                                        );\n                                    const tempItem = item.data.playList![i].split('.');\n                                    tPlayList[i] = tempItem[1];\n                                }\n\n                                let tempPlayList: string[] = [];\n                                for (let i = 0; i < tPlayList.length; i++) {\n                                    tempPlayList[i] = formatInSelText(tPlayList[i]);\n                                }\n                                optionalString = item.data.playList != undefined ? tempPlayList.join('?') : '';\n                            } else if (vAdapter == 'bosesoundtouch') {\n                                if (existsObject(item.data.adapterPlayerInstance + 'deviceInfo.name')) {\n                                    actualState = formatInSelText(\n                                        getState(item.data.adapterPlayerInstance + 'deviceInfo.name').val,\n                                    );\n                                }\n                                const tempPlayList: string[] = [];\n                                let vPreset: string = 'No Entry';\n                                for (let i = 1; i < 7; i++) {\n                                    if (\n                                        getState(item.data.adapterPlayerInstance + 'presets.' + i + '.source').val !== null\n                                    ) {\n                                        vPreset = getState(\n                                            item.data.adapterPlayerInstance + 'presets.' + i + '.source',\n                                        ).val;\n                                    } else {\n                                        vPreset = 'Preset ' + i.toFixed;\n                                    }\n                                    tempPlayList[i - 1] = formatInSelText(vPreset.replace('_', ' '));\n                                    if (Debug) log(formatInSelText(vPreset.replace('_', ' ')));\n                                }\n                                tempPlayList[6] = 'AUX INPUT';\n                                optionalString = item.data.playList != undefined ? tempPlayList.join('?') : '';\n                            } else if (vAdapter == 'sonos') {\n                                if (Debug)\n                                    log(\n                                        item.data.adapterPlayerInstance + 'root.' + item.data.mediaDevice + '.playlist_set',\n                                        'info',\n                                    );\n                                if (\n                                    existsObject(\n                                        item.data.adapterPlayerInstance + 'root.' + item.data.mediaDevice + '.playlist_set',\n                                    )\n                                ) {\n                                    actualState = formatInSelText(\n                                        getState(\n                                            item.data.adapterPlayerInstance +\n                                            'root.' +\n                                            item.data.mediaDevice +\n                                            '.playlist_set',\n                                        ).val,\n                                    );\n                                }\n                                const tempPlayList: string[] = [];\n                                for (let i = 0; i < item.data.playList!.length; i++) {\n                                    tempPlayList[i] = formatInSelText(item.data.playList![i]);\n                                }\n                                optionalString = item.data.playList != undefined ? tempPlayList.join('?') : '';\n                            } else if (vAdapter == 'volumio') {\n                                // Volumio: limit 900 chars\n                                actualState = ''; //todo: no actual playlistname saving\n                                let tempPlayList: string[] = [];\n                                let tempPll = 0;\n                                for (let i = 0; i < item.data.playList!.length; i++) {\n                                    tempPll += item.data.playList![i].length;\n                                    if (tempPll > 900) break;\n                                    tempPlayList[i] = formatInSelText(item.data.playList![i]);\n                                }\n                                optionalString = item.data.playList != undefined ? tempPlayList.join('?') : '';\n                            } else if (vAdapter == 'squeezeboxrpc') {\n                                // Playlist browsing not supported by squeezeboxrpc adapter. But Favorites can be used\n                                actualState = ''; // Not supported by squeezeboxrpc adapter\n                                let tempPlayList: string[] = [];\n                                const pathParts: string[] = item.data.adapterPlayerInstance!.split('.');\n                                for (let favorite_index = 0; favorite_index < 45; favorite_index++) {\n                                    let favorite_name_selector: string = [\n                                        pathParts[0],\n                                        pathParts[1],\n                                        'Favorites',\n                                        favorite_index,\n                                        'Name',\n                                    ].join('.');\n                                    if (!existsObject(favorite_name_selector)) {\n                                        break;\n                                    }\n                                    const favoritename: string = getState(favorite_name_selector).val;\n                                    tempPlayList.push(formatInSelText(favoritename));\n                                }\n                                optionalString = tempPlayList.length > 0 ? tempPlayList.join('?') : '';\n                            }\n                            mode = 'playlist';\n                        } else if (optional == 'tracklist') {\n                            actualState = '';\n                            // Volumio: works for files\n                            if (vAdapter == 'volumio') {\n                                actualState = getState(item.data.id + '.TITLE').val;\n                                globalTracklist = item.data.globalTracklist;\n                            } else if (vAdapter == 'squeezeboxrpc') {\n                                actualState = getState(item.data.id + '.TITLE').val;\n                            } else if (vAdapter == 'sonos') {\n                                actualState = getState(item.data.id + '.TITLE').val;\n                            } else {\n                                actualState = getState(item.data.adapterPlayerInstance + 'player.trackName').val;\n                            }\n                            actualState = actualState.replace('?', '').split(' -');\n                            actualState = actualState[0].split(' (');\n                            actualState = formatInSelText(actualState[0]);\n                            if (Debug) log(actualState, 'info');\n                            if (Debug) log(globalTracklist, 'info');\n                            //Limit 900 characters, then memory overflow --> Shorten as much as possible\n                            let temp_array: any[] = [];\n                            //let trackArray = (function () { try {return JSON.parse(getState(item.data.adapterPlayerInstance + 'player.playlist.trackListArray').val);} catch(e) {return {};}})();\n                            for (let track_index = 0; track_index < 45; track_index++) {\n                                let temp_cut_array = getAttr(globalTracklist, track_index + '.title');\n                                // Volumio: @local/NAS no title -> theName\n                                if (temp_cut_array == undefined) {\n                                    temp_cut_array = getAttr(globalTracklist, track_index + '.name');\n                                }\n                                if (Debug)\n                                    log('function GenerateDetailPage role:media tracklist -> ' + temp_cut_array, 'info');\n                                if (temp_cut_array != undefined) {\n                                    temp_cut_array = temp_cut_array.replace('?', '').split(' -');\n                                    temp_cut_array = temp_cut_array[0].split(' (');\n                                    temp_cut_array = temp_cut_array[0];\n                                    if (String(temp_cut_array[0]).length >= 22) {\n                                        temp_array[track_index] = temp_cut_array.substring(0, 20) + '..';\n                                    } else {\n                                        temp_array[track_index] = temp_cut_array.substring(0, 23);\n                                    }\n                                } else {\n                                    break;\n                                }\n                            }\n                            const tempTrackList: string[] = [];\n                            for (let i = 0; i < temp_array.length; i++) {\n                                tempTrackList[i] = formatInSelText(temp_array[i]);\n                            }\n                            optionalString = item.data.playList != undefined ? tempTrackList.join('?') : '';\n                            mode = 'tracklist';\n                        } else if (optional == 'equalizer') {\n                            if (item.data.id == undefined) throw new Error('Missing item.data.id in equalizer!');\n                            let lastIndex = item.data.id.split('.').pop();\n\n                            if (existsObject(NSPanel_Path + 'Media.Player.' + lastIndex + '.EQ.activeMode') == false ||\n                                existsObject(NSPanel_Path + 'Media.Player.' + lastIndex + '.Speaker') == false\n                            ) {\n                                createState(NSPanel_Path + 'Media.Player.' + lastIndex + '.EQ.activeMode', <\n                                    iobJS.StateCommon\n                                    > {type: 'string', write: false});\n                                createState(NSPanel_Path + 'Media.Player.' + lastIndex + '.Speaker', <iobJS.StateCommon> {\n                                    type: 'string',\n                                    write: false,\n                                });\n                            }\n\n                            actualState = '';\n                            if (getState(NSPanel_Path + 'Media.Player.' + lastIndex + '.EQ.activeMode').val != null) {\n                                actualState = formatInSelText(\n                                    getState(NSPanel_Path + 'Media.Player.' + lastIndex + '.EQ.activeMode').val,\n                                );\n                            }\n\n                            let tempEQList: string[] = [];\n                            for (let i = 0; i < item.data.equalizerList!.length; i++) {\n                                tempEQList[i] = formatInSelText(item.data!.equalizerList![i]);\n                            }\n\n                            optionalString = item.data.equalizerList != undefined ? tempEQList.join('?') : '';\n                            mode = 'equalizer';\n                        } else if (optional == 'repeat') {\n                            actualState = getState(item.data.adapterPlayerInstance + 'player.repeat').val;\n                            optionalString = item.data.repeatList!.join('?');\n                            mode = 'repeat';\n                        } else if (optional == 'favorites') {\n                            if (Debug)\n                                log(\n                                    getState(\n                                        item.data.adapterPlayerInstance +\n                                        'root.' +\n                                        item.data.mediaDevice +\n                                        '.favorites_set',\n                                    ).val,\n                                    'info',\n                                );\n                            actualState = formatInSelText(\n                                getState(\n                                    item.data.adapterPlayerInstance + 'root.' + item.data.mediaDevice + '.favorites_set',\n                                ).val,\n\n                                const tempFavList: string[] = [];\n                            let favList = getState(\n                                item.data.adapterPlayerInstance + 'root.' + item.data.mediaDevice + '.favorites_list_array',\n                            ).val;\n                            for (let i = 0; i < favList.length; i++) {\n                                tempFavList[i] = formatInSelText(favList[i]);\n                            }\n                            optionalString = tempFavList != undefined ? tempFavList.join('?') : '';\n                            mode = 'favorites';\n                        }\n\n                        const tempId = placeId != undefined ? placeId : id;\n                        // {tempid | color | NSPanel.mediaOptional | actualState | optionalString}\n                        out_msgs.push({\n                            payload:\n                                'entityUpdateDetail2' +\n                                '~' + //entityUpdateDetail\n                                tempId +\n                                '?' +\n                                optional +\n                                '~~' + //{entity_id}\n                                rgb_dec565(HMIOn) +\n                                '~' + //{icon_color}~\n                                mode +\n                                '~' +\n                                actualState +\n                                '~' +\n                                optionalString,\n                        });\n                        GeneratePage(activePage!);\n                    }\n                } else if (role == 'buttonSensor') {\n\n                    let actualValue: string = '';\n\n                    if (item.data.inSel_ChoiceState || item.data.inSel_ChoiceState == undefined) {\n                        if (existsObject(item.data.id + '.VALUE')) {\n                            actualValue = formatInSelText(item.data.modeList![getState(item.data.id + '.VALUE').val]);\n                            RegisterDetailEntityWatcher(id + '.VALUE', item.data, type, placeId);\n                        }\n                    }\n\n                    let tempModeList: string[] = [];\n                    for (let i = 0; i < item.data.modeList!.length; i++) {\n                        tempModeList[i] = formatInSelText(item.data.modeList![i]);\n                    }\n                    let valueList = item.data.modeList != undefined ? tempModeList.join('?') : '';\n\n                    let tempId = placeId != undefined ? placeId : id;\n                    // {tempid | color | NSPanel.mediaOptional | actualValue | valueList}\n                    out_msgs.push({\n                        payload:\n                            'entityUpdateDetail2' +\n                            '~' + //entityUpdateDetail2\n                            tempId +\n                            '~~' + //{entity_id}\n                            rgb_dec565(White) +\n                            '~' + //{icon_color}~\n                            'insel' +\n                            '~' +\n                            actualValue +\n                            '~' +\n                            valueList,\n                    });\n                } else if (\n                    role == 'light' ||\n                    role == 'dimmer' ||\n                    role == 'hue' ||\n                    role == 'rgb' ||\n                    role == 'rgbSingle' ||\n                    role == 'ct'\n\n                //log(item.data.id, 'info');\n                if (item.data.modeList != undefined) {\n\n                        let actualValue: string = '';\n\n                        if (item.data.inSel_ChoiceState || item.data.inSel_ChoiceState == undefined) {\n                            if (existsObject(item.data.id + '.VALUE')) {\n                                actualValue = formatInSelText(item.data.modeList[getState(item.data.id + '.VALUE').val]);\n                                RegisterDetailEntityWatcher(id + '.VALUE', item.data, type, placeId);\n                            }\n                        }\n\n                        const tempModeList: string[] = [];\n                        for (let i = 0; i < item.data.modeList.length; i++) {\n                            tempModeList[i] = formatInSelText(item.data.modeList[i]);\n                        }\n                        const valueList = item.data.modeList != undefined ? tempModeList.join('?') : '';\n\n                        //log(valueList);\n                        const tempId = placeId != undefined ? placeId : id;\n                        // {tempid | color | 'insel' | actualValue | valueList}\n                        out_msgs.push({\n                            payload:\n                                'entityUpdateDetail2' +\n                                '~' + //entityUpdateDetail2\n                                tempId +\n                                '~~' + //{entity_id}\n                                rgb_dec565(White) +\n                                '~' + //{icon_color}~\n                                'insel' +\n                                '~' +\n                                actualValue +\n                                '~' +\n                                valueList,\n                        });\n                    }\n            }*/\n            }\n        }\n        if (template.type !== message.type) {\n            throw new Error(`Template ${template.type} is not ${message.type} for role: ${item.role}`);\n        }\n        this.getDetailPayload(message);\n\n        return null;\n    }\n\n    async delete(): Promise<void> {\n        super.delete();\n    }\n}\n"],
  "mappings": "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",
  "names": []
}

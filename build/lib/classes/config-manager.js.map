{
  "version": 3,
  "sources": ["../../../src/lib/classes/config-manager.ts"],
  "sourcesContent": ["import { BaseClass } from './library';\nimport type { NspanelLovelaceUi } from '../types/NspanelLovelaceUi';\nimport type * as typePageItem from '../types/type-pageItem';\nimport type * as Types from '../types/types';\nimport { Color, type RGB } from '../const/Color';\nimport type * as pages from '../types/pages';\nimport {\n    defaultConfig,\n    isConfig,\n    requiredFeatureDatapoints,\n    requiredScriptDataPoints,\n} from '../const/config-manager-const';\nimport type { panelConfigPartial } from '../controller/panel';\nimport { exhaustiveCheck } from '../types/pages';\nimport type { NavigationItemConfig } from './navigation';\n\nexport class ConfigManager extends BaseClass {\n    //private test: ConfigManager.DeviceState;\n    private colorOn: RGB = Color.On;\n    private colorOff: RGB = Color.Off;\n    private colorDefault: RGB = Color.Off;\n\n    private readonly scriptVersion = '0.2.0';\n\n    constructor(adapter: NspanelLovelaceUi) {\n        super(adapter, 'config-manager');\n    }\n\n    async setScriptConfig(configuration: any): Promise<string[]> {\n        const config = Object.assign(defaultConfig, configuration);\n        if (!config || !isConfig(config)) {\n            this.log.error(`Invalid configuration from Script: ${config ? JSON.stringify(config) : 'undefined'}`);\n            return ['Invalid configuration'];\n        }\n        let messages: string[] = [`version: ${config.version}`];\n\n        const version = config.version\n            .split('.')\n            .map((item, i) => parseInt(item) * Math.pow(100, 2 - i))\n            .reduce((a, b) => a + b);\n\n        const requiredVersion = this.scriptVersion\n            .split('.')\n            .map((item, i) => parseInt(item) * Math.pow(100, 2 - i))\n            .reduce((a, b) => a + b);\n\n        if (version < requiredVersion) {\n            messages.push(`Script version ${config.version} is lower than the required version ${this.scriptVersion}!`);\n            this.log.warn(messages[messages.length - 1]);\n        }\n        let panelConfig: Omit<Partial<panelConfigPartial>, 'pages' | 'navigation'> & {\n            navigation: NavigationItemConfig[];\n            pages: pages.PageBaseConfig[];\n        } = { pages: [], navigation: [] };\n\n        if (!config.panelTopic) {\n            this.log.error(`Required field panelTopic is missing in ${config.panelName || 'unknown'}!`);\n            messages.push('Required field panelTopic is missing');\n            return messages;\n        }\n        panelConfig.updated = true;\n        if (config.panelTopic.endsWith('.cmnd.CustomSend')) {\n            panelConfig.topic = config.panelTopic.split('.').slice(0, -2).join('.');\n        } else {\n            panelConfig.topic = config.panelTopic;\n        }\n        if (config.panelName) {\n            panelConfig.name = config.panelName;\n        } else {\n            panelConfig.name = `NSPanel-${config.panelTopic}`;\n        }\n        if (config.defaultColor) {\n            this.colorDefault = Color.convertScriptRGBtoRGB(config.defaultColor);\n        }\n        if (config.defaultOnColor) {\n            this.colorOn = Color.convertScriptRGBtoRGB(config.defaultOnColor);\n        }\n        if (config.defaultOffColor) {\n            this.colorOff = Color.convertScriptRGBtoRGB(config.defaultOffColor);\n        }\n\n        // Screensaver configuration\n        try {\n            panelConfig.pages.push(await this.getScreensaverConfig(config));\n        } catch (error: any) {\n            messages.push(`Screensaver configuration error - ${error}`);\n            this.log.error(messages[messages.length - 1]);\n        }\n        if (config.pages.length > 1) {\n            for (let a = 0; a < config.pages.length; a++) {\n                const page = config.pages[a];\n                let uniqueID = '';\n                if (page.type === undefined) {\n                    uniqueID = page.native.uniqueID || '';\n                } else {\n                    uniqueID = page.uniqueName || '';\n                }\n                if (uniqueID === '') {\n                    continue;\n                }\n                panelConfig.navigation.push({\n                    name: uniqueID,\n                    left: undefined,\n                    right: undefined,\n                    page: uniqueID,\n                });\n            }\n            if (panelConfig.navigation.length > 1) {\n                //@ts-expect-error Just look 4 lines aboe name CANT be undefined and same for ITEM...\n                panelConfig.navigation = panelConfig.navigation.map((item, index, array) => {\n                    if (index === 0) {\n                        return {\n                            ...item,\n                            left: { single: array[array.length - 1]!.name },\n                            right: { single: array[index + 1]!.name },\n                        };\n                    } else if (index === array.length - 1) {\n                        return { ...item, left: { single: array[index - 1]!.name }, right: { single: array[0]!.name } };\n                    }\n                    return {\n                        ...item,\n                        left: { single: array[index - 1]!.name },\n                        right: { single: array[index + 1]!.name },\n                    };\n                });\n            }\n        }\n        const names: string[] = [];\n        let double = false;\n        for (const page of config.pages) {\n            if (page && page.type !== undefined) {\n                if (names.includes(page.uniqueName)) {\n                    double = true;\n                    this.log.error(messages[messages.length - 1]);\n                    messages.push(`Abort - double uniqueName ${page.uniqueName} in config!`);\n                } else {\n                    names.push(page.uniqueName);\n                }\n            }\n        }\n        if (double) {\n            return messages;\n        }\n\n        ({ panelConfig, messages } = await this.getPageConfig(config, panelConfig, messages));\n\n        // if navigation is set in config, overwrite the generated navigation\n        if (config.navigation != null) {\n            panelConfig.navigation = config.navigation;\n        }\n        //this.log.debug(`panelConfig: ${JSON.stringify(panelConfig)}`);\n        const obj = await this.adapter.getForeignObjectAsync(this.adapter.namespace);\n        if (obj) {\n            obj.native.scriptConfig = obj.native.scriptConfig || [];\n            // remove duplicates\n            obj.native.scriptConfig = obj.native.scriptConfig.filter(\n                (item: any, i: number) =>\n                    obj.native.scriptConfig.findIndex((item2: any) => item2.topic === item.topic) === i,\n            );\n            // remove config with same topic and different name\n            obj.native.scriptConfig = obj.native.scriptConfig.filter((item: any) => item.topic !== panelConfig.topic);\n            obj.native.scriptConfig = obj.native.scriptConfig.filter(\n                (item: any) => this.adapter.config.panels.findIndex(a => a.topic === item.topic) !== -1,\n            );\n            obj.native.scriptConfig.push(panelConfig);\n\n            await this.adapter.setForeignObjectAsync(this.adapter.namespace, obj);\n        }\n        messages.push(`done`);\n        return messages;\n    }\n\n    async getPageConfig(\n        config: ScriptConfig.Config,\n        panelConfig: Omit<Partial<panelConfigPartial>, 'pages' | 'navigation'> & {\n            navigation: NavigationItemConfig[];\n            pages: pages.PageBaseConfig[];\n        },\n        messages: string[],\n    ): Promise<{\n        panelConfig: Omit<Partial<panelConfigPartial>, 'pages' | 'navigation'> & {\n            navigation: NavigationItemConfig[];\n            pages: pages.PageBaseConfig[];\n        };\n        messages: string[];\n    }> {\n        if (panelConfig.pages === undefined) {\n            panelConfig.pages = [];\n        }\n        if (config.pages) {\n            for (const page of config.pages.concat(config.subPages || [])) {\n                if (!page) {\n                    continue;\n                }\n                if (page.type === undefined && page.native) {\n                    if (page.heading) {\n                        page.native.config = page.native.config || {};\n                        page.native.config.data = page.native.config.data || {};\n                        page.native.config.data.headline = await this.getFieldAsDataItemConfig(page.heading);\n                    }\n                    panelConfig.pages.push(page.native);\n                    continue;\n                }\n                if (\n                    page.type !== 'cardGrid' &&\n                    page.type !== 'cardGrid2' &&\n                    page.type !== 'cardGrid3' &&\n                    page.type !== 'cardEntities' &&\n                    page.type !== 'cardThermo'\n                ) {\n                    continue;\n                }\n                if (!page.uniqueName) {\n                    messages.push(`Page ${page.heading || 'unknown'} has no uniqueName!`);\n                    this.log.error(messages[messages.length - 1]);\n                    continue;\n                }\n\n                if ((config.subPages || []).includes(page)) {\n                    const left = page.prev || page.parent || undefined;\n                    const right = page.next || page.home || undefined;\n                    const navItem: NavigationItemConfig = {\n                        name: page.uniqueName,\n                        left: left ? { single: left } : undefined,\n                        right: right ? { single: right } : undefined,\n                        page: page.uniqueName,\n                    };\n                    panelConfig.navigation.push(navItem);\n                }\n                let gridItem: pages.PageBaseConfig = {\n                    dpInit: '',\n                    alwaysOn: 'none',\n                    uniqueID: page.uniqueName || '',\n                    useColor: false,\n                    config: {\n                        card: page.type,\n                        data: {\n                            headline: await this.getFieldAsDataItemConfig(page.heading || ''),\n                        },\n                    },\n                    pageItems: [],\n                };\n                if (page.type === 'cardThermo') {\n                    ({ gridItem, messages } = await this.getPageThermo(page, gridItem, messages));\n                }\n                if (page.items) {\n                    for (const item of page.items) {\n                        if (!item) {\n                            continue;\n                        }\n                        try {\n                            const itemConfig = await this.getPageItemConfig(item, page);\n                            if (itemConfig && gridItem.pageItems) {\n                                gridItem.pageItems.push(itemConfig);\n                            }\n                        } catch (error: any) {\n                            messages.push(\n                                `Configuration error in page ${page.heading || 'unknown'} with uniqueName ${page.uniqueName} - ${error}`,\n                            );\n                            this.log.error(messages[messages.length - 1]);\n                        }\n                    }\n                    panelConfig.pages.push(gridItem);\n                }\n            }\n        }\n        return { panelConfig, messages };\n    }\n    async getPageThermo(\n        page: ScriptConfig.PageType,\n        gridItem: pages.PageBaseConfig,\n        messages: string[],\n    ): Promise<{ gridItem: pages.PageBaseConfig; messages: string[] }> {\n        if (page.type !== 'cardThermo' || !gridItem.config || gridItem.config.card !== 'cardThermo') {\n            return { gridItem, messages };\n        }\n        if (!page.items || !page.items[0] || page.items[0].id == null) {\n            const msg = 'Thermo page has no items or item 0 has no id!';\n            messages.push(msg);\n            this.log.error(msg);\n            return { gridItem, messages };\n        }\n\n        gridItem.template = 'thermo.script';\n        gridItem.dpInit = page.items[0].id;\n\n        return { gridItem, messages };\n    }\n    async getPageNaviItemConfig(\n        item: ScriptConfig.PageItem,\n        page: ScriptConfig.PageType,\n    ): Promise<typePageItem.PageItemDataItemsOptions | undefined> {\n        let itemConfig: typePageItem.PageItemDataItemsOptions | undefined = undefined;\n        const obj = item.id && !item.id.endsWith('.') ? await this.adapter.getForeignObjectAsync(item.id) : undefined;\n        const role = obj && obj.common.role ? (obj.common.role as ScriptConfig.roles) : undefined;\n        /*const commonName =\n            obj && obj.common\n                ? typeof obj.common.name === 'string'\n                    ? obj.common.name\n                    : obj.common.name[this.library.getLocalLanguage()]\n                : undefined;*/\n\n        if (obj && (!obj.common || !obj.common.role)) {\n            throw new Error(`Role missing in ${item.id}!`);\n        }\n\n        // check if role and types are correct\n        if (role) {\n            if (!(await this.checkRequiredDatapoints(role, item))) {\n                return;\n            }\n        }\n        const specialRole: pages.DeviceRole =\n            page.type === 'cardGrid' || page.type === 'cardGrid2' || page.type === 'cardGrid3'\n                ? 'textNotIcon'\n                : 'iconNotText';\n        switch (role) {\n            case 'socket':\n            case 'light':\n            case 'dimmer':\n            case 'hue':\n            case 'rgb':\n            case 'rgbSingle':\n            case 'ct': {\n                const tempItem: typePageItem.PageItemDataItemsOptions = {\n                    type: 'button',\n                    role: role === 'rgb' ? 'rgbThree' : role,\n                    data: {\n                        icon: {\n                            true: {\n                                value: {\n                                    type: 'const',\n                                    constVal: item.icon || role === 'socket' ? 'power-socket-de' : 'lightbulb',\n                                },\n                                color: {\n                                    type: 'const',\n                                    constVal: item.onColor || Color.activated,\n                                },\n                            },\n                            false: {\n                                value: {\n                                    type: 'const',\n                                    constVal: item.icon2 || role === 'socket' ? 'power-socket-de' : 'lightbulb-outline',\n                                },\n                                color: {\n                                    type: 'const',\n                                    constVal: item.offColor || Color.deactivated,\n                                },\n                            },\n                            scale: undefined,\n                            maxBri: undefined,\n                            minBri: undefined,\n                        },\n                        text: {\n                            true: item.buttonText ? await this.getFieldAsDataItemConfig(item.buttonText) : undefined,\n                        },\n                        text1: {\n                            true: item.name ? await this.getFieldAsDataItemConfig(item.name) : undefined,\n                        },\n                        entity1: {\n                            value: {\n                                type: 'triggered',\n                                dp: `${item.id}.${role === 'dimmer' || role == 'hue' ? 'ON_ACTUAL' : 'ACTUAL'}`,\n                            },\n                        },\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                itemConfig = tempItem;\n                break;\n            }\n            case undefined:\n            case 'button': {\n                const tempItem: typePageItem.PageItemDataItemsOptions = {\n                    type: 'button',\n                    role: 'button',\n                    data: {\n                        icon: {\n                            true: {\n                                value: {\n                                    type: 'const',\n                                    constVal: item.icon || 'gesture-tap-button',\n                                },\n                                color: {\n                                    type: 'const',\n                                    constVal: item.onColor || Color.activated,\n                                },\n                            },\n                            false: {\n                                value: {\n                                    type: 'const',\n                                    constVal: item.icon2 || 'gesture-tap-button',\n                                },\n                                color: {\n                                    type: 'const',\n                                    constVal: item.offColor || Color.deactivated,\n                                },\n                            },\n                            scale: undefined,\n                            maxBri: undefined,\n                            minBri: undefined,\n                        },\n                        text: {\n                            true: item.buttonText ? await this.getFieldAsDataItemConfig(item.buttonText) : undefined,\n                        },\n                        text1: {\n                            true: item.name ? await this.getFieldAsDataItemConfig(item.name) : undefined,\n                        },\n                        entity1:\n                            role === undefined\n                                ? undefined\n                                : {\n                                      value: { type: 'triggered', dp: `${item.id}.ACTUAL` },\n                                  },\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                itemConfig = tempItem;\n                break;\n            }\n            case 'humidity':\n            case 'value.humidity': {\n                {\n                    itemConfig = {\n                        type: 'button',\n                        dpInit: item.id!,\n                        role: specialRole,\n                        template: 'button.humidity',\n                        data: {\n                            setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                        },\n                    };\n                    break;\n                }\n                break;\n            }\n            case 'temperature':\n            case 'thermostat':\n            case 'value.temperature': {\n                itemConfig = {\n                    type: 'button',\n                    dpInit: item.id!,\n                    role: specialRole,\n                    template: 'button.temperature',\n                    data: {\n                        setNavi: item.targetPage ? await this.getFieldAsDataItemConfig(item.targetPage) : undefined,\n                    },\n                };\n                break;\n            }\n\n            case 'blind':\n            case 'door':\n            case 'window':\n            case 'volumeGroup':\n            case 'volume':\n            case 'info':\n            case 'warning':\n            case 'cie':\n            case 'gate':\n            case 'motion':\n            case 'buttonSensor':\n            case 'value.time':\n            case 'level.timer':\n            case 'value.alarmtime':\n            case 'level.mode.fan':\n            case 'lock':\n            case 'slider':\n            case 'switch.mode.wlan':\n            case 'media':\n            case 'timeTable':\n            case 'airCondition': {\n                throw new Error(`Navigation for ${role} not implemented yet!!`);\n            }\n            default:\n                exhaustiveCheck(role);\n\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                throw new Error(`Role ${role} not implemented yet!!!`);\n        }\n        return itemConfig;\n\n        return undefined;\n    }\n\n    async getPageItemConfig(\n        item: ScriptConfig.PageItem,\n        page: ScriptConfig.PageType,\n    ): Promise<typePageItem.PageItemDataItemsOptions | undefined> {\n        let itemConfig: typePageItem.PageItemDataItemsOptions | undefined = undefined;\n        if (item.navigate) {\n            if (!item.targetPage || typeof item.targetPage !== 'string') {\n                throw new Error(`TargetPage missing in ${(item && item.id) || 'no id'}!`);\n            }\n            return await this.getPageNaviItemConfig(item, page);\n        }\n        if (item.id && !item.id.endsWith('.')) {\n            const obj = await this.adapter.getForeignObjectAsync(item.id);\n            if (obj) {\n                if (!(obj.common && obj.common.role)) {\n                    throw new Error(`Role missing in ${item.id}!`);\n                }\n                const role = obj.common.role as ScriptConfig.roles;\n                // check if role and types are correct\n                if (!requiredFeatureDatapoints[role] && !requiredScriptDataPoints[role]) {\n                    throw new Error(`Channel role ${role} not supported!`);\n                }\n                if (!(await this.checkRequiredDatapoints(role, item))) {\n                    return;\n                }\n                const specialRole: pages.DeviceRole =\n                    page.type === 'cardGrid' || page.type === 'cardGrid2' || page.type === 'cardGrid3'\n                        ? 'textNotIcon'\n                        : 'iconNotText';\n                const commonName =\n                    typeof obj.common.name === 'string'\n                        ? obj.common.name\n                        : obj.common.name[this.library.getLocalLanguage()];\n                switch (role) {\n                    case 'timeTable': {\n                        itemConfig = {\n                            template: 'text.alias.fahrplan.departure',\n                            dpInit: item.id,\n                        };\n                        break;\n                    }\n                    case 'socket':\n                    case 'light': {\n                        const tempItem: typePageItem.PageItemDataItemsOptions = {\n                            type: 'light',\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon || role === 'socket' ? 'power-socket-de' : 'lightbulb',\n                                        },\n                                        color: {\n                                            type: 'const',\n                                            constVal: item.onColor || Color.activated,\n                                        },\n                                    },\n                                    false: {\n                                        value: {\n                                            type: 'const',\n                                            constVal:\n                                                item.icon2 || role === 'socket'\n                                                    ? 'power-socket-de'\n                                                    : 'lightbulb-outline',\n                                        },\n                                        color: {\n                                            type: 'const',\n                                            constVal: item.offColor || Color.deactivated,\n                                        },\n                                    },\n                                    scale: undefined,\n                                    maxBri: undefined,\n                                    minBri: undefined,\n                                },\n                                colorMode: { type: 'const', constVal: false },\n                                headline: await this.getFieldAsDataItemConfig(item.name || commonName || 'Light'),\n                                entity1: {\n                                    value: { type: 'triggered', dp: `${item.id}.ACTUAL` },\n                                    set: { type: 'state', dp: `${item.id}.SET` },\n                                },\n                            },\n                        };\n                        itemConfig = tempItem;\n                        break;\n                    }\n\n                    case 'dimmer': {\n                        const tempItem: typePageItem.PageItemDataItemsOptions = {\n                            type: 'light',\n                            role: 'dimmer',\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon || 'lightbulb',\n                                        },\n                                        color: {\n                                            type: 'const',\n                                            constVal: item.onColor || Color.activated,\n                                        },\n                                    },\n                                    false: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon2 || 'lightbulb-outline',\n                                        },\n                                        color: {\n                                            type: 'const',\n                                            constVal: item.offColor || Color.deactivated,\n                                        },\n                                    },\n                                    scale: undefined,\n                                    maxBri: item.maxValueBrightness\n                                        ? { type: 'const', constVal: item.maxValueBrightness }\n                                        : undefined,\n                                    minBri: item.minValueBrightness\n                                        ? { type: 'const', constVal: item.minValueBrightness }\n                                        : undefined,\n                                },\n                                colorMode: item.colormode ? { type: 'const', constVal: !!item.colormode } : undefined,\n                                dimmer: {\n                                    value: { type: 'triggered', dp: `${item.id}.ACTUAL` },\n                                    set: { type: 'state', dp: `${item.id}.SET` },\n                                    maxScale: item.maxValueBrightness\n                                        ? { type: 'const', constVal: item.maxValueBrightness }\n                                        : undefined,\n                                    minScale: item.minValueBrightness\n                                        ? { type: 'const', constVal: item.minValueBrightness }\n                                        : undefined,\n                                },\n                                headline: await this.getFieldAsDataItemConfig(item.name || commonName || 'Dimmer'),\n                                text1: {\n                                    true: {\n                                        type: 'const',\n                                        constVal: `Brightness`,\n                                    },\n                                },\n                                entity1: {\n                                    value: { type: 'triggered', dp: `${item.id}.ON_ACTUAL` },\n                                    set: { type: 'state', dp: `${item.id}.ON_SET` },\n                                },\n                            },\n                        };\n                        itemConfig = tempItem;\n                        break;\n                    }\n                    case 'rgbSingle':\n                    case 'ct':\n                    case 'rgb':\n                    case 'hue': {\n                        const tempItem: typePageItem.PageItemDataItemsOptions = {\n                            type: 'light',\n                            role:\n                                role === 'hue'\n                                    ? 'hue'\n                                    : role === 'rgb'\n                                      ? 'rgbThree'\n                                      : role === 'rgbSingle'\n                                        ? 'rgbSingle'\n                                        : 'ct',\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon || 'lightbulb',\n                                        },\n                                        color: {\n                                            type: 'const',\n                                            constVal: item.onColor || Color.activated,\n                                        },\n                                    },\n                                    false: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon2 || 'lightbulb-outline',\n                                        },\n                                        color: {\n                                            type: 'const',\n                                            constVal: item.offColor || Color.deactivated,\n                                        },\n                                    },\n                                    scale: undefined,\n                                    maxBri: item.maxValueBrightness\n                                        ? { type: 'const', constVal: item.maxValueBrightness }\n                                        : undefined,\n                                    minBri: item.minValueBrightness\n                                        ? { type: 'const', constVal: item.minValueBrightness }\n                                        : undefined,\n                                },\n                                colorMode: item.colormode ? { type: 'const', constVal: !!item.colormode } : undefined,\n                                dimmer: {\n                                    value: { type: 'triggered', dp: `${item.id}.DIMMER` },\n                                    maxScale: item.maxValueBrightness\n                                        ? { type: 'const', constVal: item.maxValueBrightness }\n                                        : undefined,\n                                    minScale: item.minValueBrightness\n                                        ? { type: 'const', constVal: item.minValueBrightness }\n                                        : undefined,\n                                },\n                                headline: await this.getFieldAsDataItemConfig(item.name || commonName || role),\n                                hue:\n                                    role !== 'hue'\n                                        ? undefined\n                                        : {\n                                              type: 'triggered',\n                                              dp: `${item.id}.HUE`,\n                                          },\n                                Red:\n                                    role !== 'rgb'\n                                        ? undefined\n                                        : {\n                                              type: 'triggered',\n                                              dp: `${item.id}.RED`,\n                                          },\n                                Green:\n                                    role !== 'rgb'\n                                        ? undefined\n                                        : {\n                                              type: 'triggered',\n                                              dp: `${item.id}.GREEN`,\n                                          },\n                                Blue:\n                                    role !== 'rgb'\n                                        ? undefined\n                                        : {\n                                              type: 'triggered',\n                                              dp: `${item.id}.BLUE`,\n                                          },\n                                White:\n                                    role !== 'rgb'\n                                        ? undefined\n                                        : (await this.existsState(`${item.id}.WHITE`))\n                                          ? {\n                                                value: {\n                                                    type: 'triggered',\n                                                    dp: `${item.id}.WHITE`,\n                                                },\n                                            }\n                                          : undefined,\n                                color:\n                                    role !== 'rgbSingle'\n                                        ? undefined\n                                        : {\n                                              true: {\n                                                  type: 'triggered',\n                                                  dp: `${item.id}.COLOR`,\n                                              },\n                                          },\n                                ct: {\n                                    value: { type: 'triggered', dp: `${item.id}.TEMPERATURE` },\n                                    maxScale: item.maxValueColorTemp\n                                        ? { type: 'const', constVal: item.maxValueColorTemp }\n                                        : undefined,\n                                    minScale: item.minValueColorTemp\n                                        ? { type: 'const', constVal: item.minValueColorTemp }\n                                        : undefined,\n                                },\n                                text1: {\n                                    true: {\n                                        type: 'const',\n                                        constVal: `Brightness`,\n                                    },\n                                },\n                                text2: {\n                                    true: {\n                                        type: 'const',\n                                        constVal: `Colour temperature`,\n                                    },\n                                },\n                                text3:\n                                    role === 'ct'\n                                        ? undefined\n                                        : {\n                                              true: {\n                                                  type: 'const',\n                                                  constVal: `Color`,\n                                              },\n                                          },\n                                entity1: {\n                                    value: { type: 'triggered', dp: `${item.id}.ON_ACTUAL` },\n                                    set: { type: 'state', dp: `${item.id}.ON` },\n                                },\n                            },\n                        };\n                        itemConfig = tempItem;\n                        break;\n                    }\n                    case 'button': {\n                        const tempItem: typePageItem.PageItemDataItemsOptions = {\n                            type: 'button',\n                            role: 'button',\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon || 'gesture-tap-button',\n                                        },\n                                        color: {\n                                            type: 'const',\n                                            constVal: item.onColor || Color.activated,\n                                        },\n                                    },\n                                    false: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon2 || 'gesture-tap-button',\n                                        },\n                                        color: {\n                                            type: 'const',\n                                            constVal: item.offColor || Color.deactivated,\n                                        },\n                                    },\n                                    scale: undefined,\n                                    maxBri: undefined,\n                                    minBri: undefined,\n                                },\n                                text: {\n                                    true: item.buttonText\n                                        ? await this.getFieldAsDataItemConfig(item.buttonText)\n                                        : (await this.existsState(`${item.id}.BUTTONTEXT`))\n                                          ? { type: 'state', dp: `${item.id}.BUTTONTEXT` }\n                                          : { type: 'state', dp: `${item.id}.ACTUAL` },\n                                    false: item.buttonTextOff\n                                        ? await this.getFieldAsDataItemConfig(item.buttonTextOff)\n                                        : (await this.existsState(`${item.id}.BUTTONTEXTOFF`))\n                                          ? { type: 'state', dp: `${item.id}.BUTTONTEXTOFF` }\n                                          : item.buttonText\n                                            ? await this.getFieldAsDataItemConfig(item.buttonText)\n                                            : (await this.existsState(`${item.id}.BUTTONTEXT`))\n                                              ? { type: 'state', dp: `${item.id}.BUTTONTEXT` }\n                                              : { type: 'state', dp: `${item.id}.ACTUAL` },\n                                },\n                                text1: {\n                                    true: item.name ? await this.getFieldAsDataItemConfig(item.name) : undefined,\n                                },\n                                entity1: {\n                                    value: { type: 'triggered', dp: `${item.id}.SET` },\n                                },\n                            },\n                        };\n                        itemConfig = tempItem;\n                        break;\n                    }\n                    case 'blind': {\n                        const tempItem: typePageItem.PageItemDataItemsOptions = {\n                            type: 'shutter',\n                            role: 'blind',\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon || 'window-shutter-open',\n                                        },\n                                        color: {\n                                            type: 'const',\n                                            constVal: item.onColor || Color.activated,\n                                        },\n                                    },\n                                    false: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon2 || 'window-shutter',\n                                        },\n                                        color: {\n                                            type: 'const',\n                                            constVal: item.offColor || Color.deactivated,\n                                        },\n                                    },\n                                    unstable: {\n                                        value: {\n                                            type: 'const',\n                                            constVal: item.icon3 || 'window-shutter-alert',\n                                        },\n                                    },\n                                    scale: undefined,\n                                    maxBri: undefined,\n                                    minBri: undefined,\n                                },\n                                text: {\n                                    true: { type: 'const', constVal: 'Position' },\n                                },\n                                headline: item.name\n                                    ? await this.getFieldAsDataItemConfig(item.name)\n                                    : { type: 'const', constVal: commonName ?? 'Blind' },\n\n                                entity1: {\n                                    value: { type: 'triggered', dp: `${item.id}.ACTUAL` },\n                                    set: { type: 'state', dp: `${item.id}.SET` },\n                                },\n                                entity2: {\n                                    value: { type: 'triggered', dp: `${item.id}.TILT_ACTUAL` },\n                                    set: { type: 'state', dp: `${item.id}.TILT_SET` },\n                                },\n                                up: { type: 'state', dp: `${item.id}.OPEN` },\n                                down: { type: 'state', dp: `${item.id}.CLOSE` },\n                                stop: { type: 'state', dp: `${item.id}.STOP` },\n                                up2: { type: 'state', dp: `${item.id}.TILT_OPEN` },\n                                down2: { type: 'state', dp: `${item.id}.TILT_CLOSE` },\n                                stop2: { type: 'state', dp: `${item.id}.TILT_STOP` },\n                            },\n                        };\n                        itemConfig = tempItem;\n                        break;\n                    }\n                    case 'gate': {\n                        /*\n                        const iconOn = 'garage-open';\n                        const iconOff = 'garage';\n                        const iconUnstable = '';\n                        const textOn = 'Opened';\n                        const textOff = 'Closed';\n                        let checked = false;\n                        let legacy = false;\n                        if (await this.existsState(`${item.id}.ACTUAL`)) {\n                            const obj = await this.adapter.getForeignObjectAsync(`${item.id}.ACTUAL`);\n                            if (obj) {\n                                if (\n                                    obj.common &&\n                                    obj.common.role === requiredDatapoints.gate.ACTUAL.role &&\n                                    obj.common.type === requiredDatapoints.gate.ACTUAL.type\n                                ) {\n                                    legacy = true;\n                                    checked = true;\n                                } else if (\n                                    obj.common &&\n                                    obj.common.role === requiredScriptDataPoints.gate.ACTUAL.role &&\n                                    obj.common.type === requiredScriptDataPoints.gate.ACTUAL.type\n                                ) {\n                                    legacy = false;\n                                    if (\n                                        (await this.existsState(`${item.id}.SET`)) &&\n                                        (await this.existsState(`${item.id}.STOP`))\n                                    ) {\n                                        checked = true;\n                                    } else {\n                                    }\n                                }\n                            }\n\n                            const tempItem: typePageItem.PageItemDataItemsOptions = {\n                                type: 'shutter',\n                                role: 'gate',\n                                data: {\n                                    icon: {\n                                        true: {\n                                            value: {\n                                                type: 'const',\n                                                constVal: item.icon || 'window-shutter-open',\n                                            },\n                                            color: {\n                                                type: 'const',\n                                                constVal: item.onColor || Color.activated,\n                                            },\n                                        },\n                                        false: {\n                                            value: {\n                                                type: 'const',\n                                                constVal: item.icon2 || 'window-shutter',\n                                            },\n                                            color: {\n                                                type: 'const',\n                                                constVal: item.offColor || Color.deactivated,\n                                            },\n                                        },\n                                        unstable: {\n                                            value: {\n                                                type: 'const',\n                                                constVal: item.icon3 || 'window-shutter-alert',\n                                            },\n                                        },\n                                        scale: undefined,\n                                        maxBri: undefined,\n                                        minBri: undefined,\n                                    },\n                                    text: {\n                                        true: { type: 'const', constVal: 'Position' },\n                                    },\n                                    headline: item.name\n                                        ? await this.getFieldAsDataItemConfig(item.name)\n                                        : { type: 'const', constVal: commonName ?? 'Blind' },\n\n                                    entity1: {\n                                        value: { type: 'triggered', dp: `${item.id}.ACTUAL` },\n                                        set: { type: 'state', dp: `${item.id}.SET` },\n                                    },\n                                    entity2: {\n                                        value: { type: 'triggered', dp: `${item.id}.TILT_ACTUAL` },\n                                        set: { type: 'state', dp: `${item.id}.TILT_SET` },\n                                    },\n                                    up: { type: 'state', dp: `${item.id}.OPEN` },\n                                    down: { type: 'state', dp: `${item.id}.CLOSE` },\n                                    stop: { type: 'state', dp: `${item.id}.STOP` },\n                                    up2: { type: 'state', dp: `${item.id}.TILT_OPEN` },\n                                    down2: { type: 'state', dp: `${item.id}.TILT_CLOSE` },\n                                    stop2: { type: 'state', dp: `${item.id}.TILT_STOP` },\n                                },\n                            };\n                            itemConfig = tempItem;\n                            break;\n                        }*/\n                        break;\n                    }\n                    case 'motion':\n                    case 'info':\n                    case 'humidity':\n                    case 'temperature':\n                    case 'value.temperature':\n                    case 'value.humidity':\n                    case 'door':\n                    case 'window': {\n                        let iconOn = 'door-open';\n                        let iconOff = 'door-closed';\n                        let iconUnstable = '';\n                        let textOn: undefined | string = undefined;\n                        let textOff: undefined | string = undefined;\n                        let adapterRole: pages.DeviceRole = '';\n                        let commonUnit: string | undefined = undefined;\n                        switch (role) {\n                            case 'motion': {\n                                iconOn = 'motion-sensor';\n                                iconOff = 'motion-sensor';\n                                iconUnstable = '';\n                                adapterRole = 'iconNotText';\n                                textOn = 'On';\n                                textOff = 'Off';\n                                break;\n                            }\n                            case 'door': {\n                                adapterRole = 'iconNotText';\n                                iconOn = 'door-open';\n                                iconOff = 'door-closed';\n                                iconUnstable = 'door-closed';\n                                textOn = 'Opened';\n                                textOff = 'Closed';\n                                break;\n                            }\n                            case 'window': {\n                                iconOn = 'window-open-variant';\n                                iconOff = 'window-closed-variant';\n                                iconUnstable = 'window-closed-variant';\n                                adapterRole = 'iconNotText';\n                                textOn = 'Opened';\n                                textOff = 'Closed';\n                                break;\n                            }\n                            case 'info': {\n                                iconOn = 'information-outline';\n                                iconOff = 'information-outline';\n                                adapterRole = specialRole;\n                                break;\n                            }\n                            case 'temperature':\n                            case 'value.temperature': {\n                                iconOn = 'thermometer';\n                                iconOff = 'snowflake-thermometer';\n                                iconUnstable = 'sun-thermometer';\n                                adapterRole = specialRole;\n                                const obj = (await this.existsState(`${item.id}.ACTUAL`))\n                                    ? await this.adapter.getForeignObjectAsync(`${item.id}.ACTUAL`)\n                                    : undefined;\n                                commonUnit = obj && obj.common && obj.common.unit ? obj.common.unit : undefined;\n                                break;\n                            }\n                            case 'humidity':\n                            case 'value.humidity': {\n                                iconOn = 'water-percent';\n                                iconOff = 'water-off';\n                                iconUnstable = 'water-percent-alert';\n                                adapterRole = specialRole;\n                                const o = (await this.existsState(`${item.id}.ACTUAL`))\n                                    ? await this.adapter.getForeignObjectAsync(`${item.id}.ACTUAL`)\n                                    : undefined;\n\n                                commonUnit = o && o.common && o.common.unit ? o.common.unit : undefined;\n                                break;\n                            }\n                        }\n                        const tempItem: typePageItem.PageItemDataItemsOptions = {\n                            type: 'text',\n                            role: adapterRole,\n                            data: {\n                                icon: {\n                                    true: {\n                                        value: await this.getFieldAsDataItemConfig(item.icon || iconOn),\n\n                                        color: {\n                                            type: 'const',\n                                            constVal: item.onColor\n                                                ? await this.getFieldAsDataItemConfig(item.onColor)\n                                                : Color.activated,\n                                        },\n                                        text: {\n                                            value: { type: 'state', dp: `${item.id}.ACTUAL` },\n                                            unit: commonUnit ? { type: 'const', constVal: commonUnit } : undefined,\n                                        },\n                                    },\n                                    false: {\n                                        value: await this.getFieldAsDataItemConfig(item.icon2 || iconOff),\n                                        color: {\n                                            type: 'const',\n                                            constVal: item.offColor\n                                                ? await this.getFieldAsDataItemConfig(item.offColor)\n                                                : Color.deactivated,\n                                        },\n                                        text: {\n                                            value: { type: 'state', dp: `${item.id}.ACTUAL` },\n                                            unit: commonUnit ? { type: 'const', constVal: commonUnit } : undefined,\n                                        },\n                                    },\n                                    unstable: {\n                                        value: await this.getFieldAsDataItemConfig(item.icon3 || iconUnstable),\n                                    },\n                                    scale: undefined,\n                                    maxBri: undefined,\n                                    minBri: undefined,\n                                },\n                                text1: {\n                                    true: item.buttonText\n                                        ? await this.getFieldAsDataItemConfig(item.buttonText)\n                                        : (await this.existsState(`${item.id}.BUTTONTEXT`))\n                                          ? { type: 'state', dp: `${item.id}.BUTTONTEXT` }\n                                          : textOn\n                                            ? { type: 'const', constVal: textOn }\n                                            : { type: 'state', dp: `${item.id}.ACTUAL` },\n                                    false: item.buttonTextOff\n                                        ? await this.getFieldAsDataItemConfig(item.buttonTextOff)\n                                        : (await this.existsState(`${item.id}.BUTTONTEXTOFF`))\n                                          ? { type: 'state', dp: `${item.id}.BUTTONTEXTOFF` }\n                                          : textOff\n                                            ? { type: 'const', constVal: textOff }\n                                            : item.buttonText\n                                              ? await this.getFieldAsDataItemConfig(item.buttonText)\n                                              : (await this.existsState(`${item.id}.BUTTONTEXT`))\n                                                ? { type: 'state', dp: `${item.id}.BUTTONTEXT` }\n                                                : { type: 'state', dp: `${item.id}.ACTUAL` },\n                                },\n                                text: {\n                                    true: item.name\n                                        ? await this.getFieldAsDataItemConfig(item.name)\n                                        : commonName\n                                          ? { type: 'const', constVal: commonName }\n                                          : undefined,\n                                },\n                                entity1: {\n                                    value: { type: 'triggered', dp: `${item.id}.ACTUAL` },\n                                },\n                                entity2:\n                                    role === 'temperature' ||\n                                    role === 'value.temperature' ||\n                                    role === 'humidity' ||\n                                    role === 'value.humidity'\n                                        ? {\n                                              value: { type: 'state', dp: `${item.id}.ACTUAL` },\n                                              unit: commonUnit ? { type: 'const', constVal: commonUnit } : undefined,\n                                          }\n                                        : undefined,\n                            },\n                        };\n                        itemConfig = tempItem;\n                        break;\n                    }\n                    case 'thermostat':\n                        break;\n                    case 'volumeGroup':\n                    case 'volume':\n                    case 'warning':\n                    case 'cie':\n                    case 'buttonSensor':\n                    case 'value.time':\n                    case 'level.timer':\n                    case 'value.alarmtime':\n                    case 'level.mode.fan':\n                    case 'lock':\n                    case 'slider':\n                    case 'switch.mode.wlan':\n                    case 'media':\n                    case 'airCondition': {\n                        throw new Error(`Role ${role} not implemented yet!!`);\n                        break;\n                    }\n                    default:\n                        exhaustiveCheck(role);\n                        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                        throw new Error(`Role ${role} not implemented yet!!!`);\n                }\n                return itemConfig;\n            }\n        }\n        return undefined;\n    }\n\n    async getScreensaverConfig(config: ScriptConfig.Config): Promise<pages.PageBaseConfig> {\n        let pageItems: typePageItem.PageItemDataItemsOptions[] = [];\n        if (config.bottomScreensaverEntity) {\n            for (const item of config.bottomScreensaverEntity) {\n                if (item) {\n                    try {\n                        pageItems.push(await this.getEntityData(item, 'bottom', config));\n                    } catch (error: any) {\n                        throw new Error(`bottomScreensaverEntity - ${error}`);\n                    }\n                }\n            }\n        }\n        // if weatherEntity is set, add alot weather data to screensaver :)\n        // only works with accuweather atm\n        if (config.weatherEntity) {\n            if (config.weatherEntity.startsWith('accuweather.') && config.weatherEntity.endsWith('.')) {\n                const instance = config.weatherEntity.split('.')[1];\n                pageItems.push({\n                    template: 'text.accuweather.favorit',\n                    dpInit: `/^accuweather\\\\.${instance}.+/`,\n                    modeScr: 'favorit',\n                });\n                pageItems = pageItems.concat([\n                    // Bottom 1 - accuWeather.0. Forecast Day 1\n                    {\n                        template: 'text.accuweather.sunriseset',\n                        dpInit: `/^accuweather\\\\.${instance}.Daily.+/`,\n                        modeScr: 'bottom',\n                    },\n                    // Bottom 1 - accuWeather.0. Forecast Day 1\n                    {\n                        template: 'text.accuweather.bot2values',\n                        dpInit: `/^accuweather\\\\.${instance}.+?d1$/g`,\n                        modeScr: 'bottom',\n                    },\n\n                    // Bottom 2 - accuWeather.0. Forecast Day 2\n                    {\n                        template: 'text.accuweather.bot2values',\n                        dpInit: `/^accuweather\\\\.${instance}.+?d2$/`,\n                        modeScr: 'bottom',\n                    },\n\n                    // Bottom 3 - accuWeather.0. Forecast Day 3\n                    {\n                        template: 'text.accuweather.bot2values',\n                        dpInit: `/^accuweather\\\\.${instance}.+?d3$/`,\n                        modeScr: 'bottom',\n                    },\n\n                    // Bottom 4 - accuWeather.0. Forecast Day 4\n                    {\n                        template: 'text.accuweather.bot2values',\n                        dpInit: `/^accuweather\\\\.${instance}.+?d4$/`,\n                        modeScr: 'bottom',\n                    },\n                    // Bottom 5 - accuWeather.0. Forecast Day 5\n                    {\n                        template: 'text.accuweather.bot2values',\n                        dpInit: `/^accuweather\\\\.${instance}.+?d5$/`,\n                        modeScr: 'bottom',\n                    },\n                    // Bottom 7 - Sonnenaufgang - Sonnenuntergang im Wechsel\n\n                    // Bottom 8 - Windgeschwindigkeit\n                    {\n                        role: 'text',\n                        dpInit: '',\n                        type: 'text',\n                        modeScr: 'bottom',\n                        data: {\n                            entity1: {\n                                value: {\n                                    type: 'triggered',\n                                    dp: `accuweather.${instance}.Current.WindSpeed`,\n                                },\n                                decimal: {\n                                    type: 'const',\n                                    constVal: 1,\n                                },\n                                factor: {\n                                    type: 'const',\n                                    constVal: 1000 / 3600,\n                                },\n                                unit: undefined,\n                            },\n                            entity2: {\n                                value: {\n                                    type: 'triggered',\n                                    dp: `accuweather.${instance}.Current.WindSpeed`,\n                                },\n                                decimal: {\n                                    type: 'const',\n                                    constVal: 1,\n                                },\n                                factor: {\n                                    type: 'const',\n                                    constVal: 1000 / 3600,\n                                },\n                                unit: {\n                                    type: 'const',\n                                    constVal: 'm/s',\n                                },\n                            },\n                            icon: {\n                                true: {\n                                    value: {\n                                        type: 'const',\n                                        constVal: 'weather-windy',\n                                    },\n                                    color: {\n                                        type: 'const',\n                                        constVal: Color.MSRed,\n                                    },\n                                },\n                                false: {\n                                    value: {\n                                        type: 'const',\n                                        constVal: 'weather-windy',\n                                    },\n                                    color: {\n                                        type: 'const',\n                                        constVal: Color.MSGreen,\n                                    },\n                                },\n                                scale: {\n                                    type: 'const',\n                                    constVal: { val_min: 0, val_max: 80 },\n                                },\n                                maxBri: undefined,\n                                minBri: undefined,\n                            },\n                            text: {\n                                true: {\n                                    type: 'const',\n                                    constVal: 'Wind',\n                                },\n                                false: undefined,\n                            },\n                        },\n                    },\n\n                    // Bottom 9 - B\u00F6en\n                    {\n                        role: 'text',\n                        dpInit: '',\n                        type: 'text',\n                        modeScr: 'bottom',\n                        data: {\n                            entity1: {\n                                value: {\n                                    type: 'triggered',\n                                    dp: `accuweather.${instance}.Current.WindGust`,\n                                },\n                                decimal: {\n                                    type: 'const',\n                                    constVal: 1,\n                                },\n                                factor: {\n                                    type: 'const',\n                                    constVal: 1000 / 3600,\n                                },\n                                unit: undefined,\n                            },\n                            entity2: {\n                                value: {\n                                    type: 'triggered',\n                                    dp: `accuweather.${instance}.Current.WindGust`,\n                                },\n                                decimal: {\n                                    type: 'const',\n                                    constVal: 1,\n                                },\n                                factor: {\n                                    type: 'const',\n                                    constVal: 1000 / 3600,\n                                },\n                                unit: {\n                                    type: 'const',\n                                    constVal: 'm/s',\n                                },\n                            },\n                            icon: {\n                                true: {\n                                    value: {\n                                        type: 'const',\n                                        constVal: 'weather-tornado',\n                                    },\n                                    color: {\n                                        type: 'const',\n                                        constVal: Color.MSRed,\n                                    },\n                                },\n                                false: {\n                                    value: {\n                                        type: 'const',\n                                        constVal: 'weather-tornado',\n                                    },\n                                    color: {\n                                        type: 'const',\n                                        constVal: Color.MSGreen,\n                                    },\n                                },\n                                scale: {\n                                    type: 'const',\n                                    constVal: { val_min: 0, val_max: 80 },\n                                },\n                                maxBri: undefined,\n                                minBri: undefined,\n                            },\n                            text: {\n                                true: {\n                                    type: 'const',\n                                    constVal: 'B\u00F6en',\n                                },\n                                false: undefined,\n                            },\n                        },\n                    },\n\n                    // Bottom 10 - Windrichtung\n                    {\n                        role: 'text',\n                        dpInit: '',\n                        type: 'text',\n                        modeScr: 'bottom',\n                        data: {\n                            entity2: {\n                                value: {\n                                    type: 'triggered',\n                                    dp: `accuweather.${instance}.Current.WindDirectionText`,\n                                },\n                                decimal: {\n                                    type: 'const',\n                                    constVal: 0,\n                                },\n                                factor: undefined,\n                                unit: {\n                                    type: 'const',\n                                    constVal: '\u00B0',\n                                },\n                            },\n                            icon: {\n                                true: {\n                                    value: {\n                                        type: 'const',\n                                        constVal: 'windsock',\n                                    },\n                                    color: {\n                                        type: 'const',\n                                        constVal: '#FFFFFF',\n                                    },\n                                },\n                                false: {\n                                    value: undefined,\n                                    color: undefined,\n                                },\n                                scale: undefined,\n                                maxBri: undefined,\n                                minBri: undefined,\n                            },\n                            text: {\n                                true: {\n                                    type: 'const',\n                                    constVal: 'Windr.',\n                                },\n                                false: undefined,\n                            },\n                        },\n                    },\n\n                    // Bottom 12 - UV-Index\n                    {\n                        role: 'text',\n                        dpInit: '',\n                        type: 'text',\n                        modeScr: 'bottom',\n                        data: {\n                            entity1: {\n                                value: {\n                                    type: 'triggered',\n                                    dp: `accuweather.${instance}.Current.UVIndex`,\n                                },\n                                decimal: undefined,\n                                factor: undefined,\n                                unit: undefined,\n                            },\n                            entity2: {\n                                value: {\n                                    type: 'triggered',\n                                    dp: `accuweather.${instance}.Current.UVIndex`,\n                                    forceType: 'string',\n                                },\n                                decimal: undefined,\n                                factor: undefined,\n                                unit: undefined,\n                            },\n                            icon: {\n                                true: {\n                                    value: {\n                                        type: 'const',\n                                        constVal: 'solar-power',\n                                    },\n                                    color: {\n                                        type: 'const',\n                                        constVal: Color.MSRed,\n                                    },\n                                },\n                                false: {\n                                    value: {\n                                        type: 'const',\n                                        constVal: 'solar-power',\n                                    },\n                                    color: {\n                                        type: 'const',\n                                        constVal: Color.MSGreen,\n                                    },\n                                },\n                                scale: {\n                                    type: 'const',\n                                    constVal: { val_min: 0, val_max: 9 },\n                                },\n                                maxBri: undefined,\n                                minBri: undefined,\n                            },\n                            text: {\n                                true: {\n                                    type: 'const',\n                                    constVal: 'UV',\n                                },\n                                false: undefined,\n                            },\n                        },\n                    },\n                ]);\n            }\n        }\n        if (config.indicatorScreensaverEntity) {\n            for (const item of config.indicatorScreensaverEntity) {\n                if (item) {\n                    try {\n                        pageItems.push(await this.getEntityData(item, 'indicator', config));\n                    } catch (error: any) {\n                        throw new Error(`indicatorScreensaverEntity - ${error}`);\n                    }\n                }\n            }\n        }\n        if (config.leftScreensaverEntity) {\n            for (const item of config.leftScreensaverEntity) {\n                if (item) {\n                    try {\n                        pageItems.push(await this.getEntityData(item, 'left', config));\n                    } catch (error: any) {\n                        throw new Error(`leftScreensaverEntity - ${error}`);\n                    }\n                }\n            }\n        }\n        if (config.mrIcon1ScreensaverEntity) {\n            try {\n                pageItems.push(await this.getMrEntityData(config.mrIcon1ScreensaverEntity, 'mricon', '1'));\n            } catch (error: any) {\n                throw new Error(`mrIcon1ScreensaverEntity - ${error}`);\n            }\n        }\n        if (config.mrIcon2ScreensaverEntity) {\n            try {\n                pageItems.push(await this.getMrEntityData(config.mrIcon2ScreensaverEntity, 'mricon', '2'));\n            } catch (error: any) {\n                throw new Error(`mrIcon2ScreensaverEntity - ${error}`);\n            }\n        }\n        this.log.debug(`Screensaver pageItems count: ${pageItems.length}`);\n        pageItems = pageItems.concat([\n            {\n                role: 'text',\n                dpInit: '',\n                type: 'text',\n                modeScr: 'time',\n                data: {\n                    entity2: {\n                        value: {\n                            type: 'internal',\n                            dp: '///time',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: { local: 'de', format: { hour: '2-digit', minute: '2-digit' } },\n                        },\n                    },\n                },\n            },\n            {\n                role: 'text',\n                dpInit: '',\n                type: 'text',\n                modeScr: 'date',\n                data: {\n                    entity2: {\n                        value: {\n                            type: 'internal',\n                            dp: '///date',\n                        },\n                        dateFormat: {\n                            type: 'const',\n                            constVal: {\n                                local: 'de',\n                                format: {\n                                    weekday: 'long',\n                                    month: 'short',\n                                    year: 'numeric',\n                                    day: 'numeric',\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n        ]);\n        pageItems = pageItems.concat(config.nativePageItems || []);\n\n        return {\n            dpInit: '',\n            alwaysOn: 'none',\n            uniqueID: 'scr',\n            useColor: false,\n            config: {\n                card: 'screensaver',\n                mode: 'standard',\n                rotationTime: 0,\n                model: 'eu',\n                data: undefined,\n            },\n            pageItems: pageItems,\n        };\n    }\n\n    /**\n     * Checks if the required datapoints for a given role and item are present and valid.\n     *\n     * @param role - The role to check the datapoints for.\n     * @param item - The item to check the datapoints for.\n     * @param mode - The mode of checking, can be 'both', 'script', or 'feature'. Defaults to 'both'. 'script' and 'feature' will only check the respective datapoints.\n     * @returns A promise that resolves to true if all required datapoints are present and valid, otherwise throws an error with mode='both'. Return false if mode='feature' or 'script'.\n     * @throws Will throw an error if a required datapoint is missing or invalid and mode='both'.\n     */\n    async checkRequiredDatapoints(\n        role: ScriptConfig.roles,\n        item: ScriptConfig.PageItem,\n        mode: 'both' | 'script' | 'feature' = 'both',\n    ): Promise<boolean> {\n        const _checkScriptDataPoints = async (\n            role: ScriptConfig.roles,\n            item: ScriptConfig.PageItem,\n        ): Promise<boolean> => {\n            for (const dp in requiredFeatureDatapoints[role]) {\n                const o = dp !== '' ? await this.adapter.getForeignObjectAsync(`${item.id}.${dp}`) : undefined;\n\n                if (!o && !requiredScriptDataPoints[role].data[dp].required) {\n                    continue;\n                }\n                if (\n                    !o ||\n                    o.common.role !== requiredScriptDataPoints[role].data[dp].role ||\n                    o.common.type !== requiredScriptDataPoints[role].data[dp].type ||\n                    (requiredScriptDataPoints[role].data[dp].writeable && !o.common.write)\n                ) {\n                    if (!o) {\n                        throw new Error(`Datapoint ${item.id}.${dp} is missing and is required for role ${role}!`);\n                    } else {\n                        throw new Error(\n                            `Datapoint ${item.id}.${dp} has wrong ` +\n                                `${o.common.role !== requiredScriptDataPoints[role].data[dp].role ? `role: ${o.common.role} should be ${requiredScriptDataPoints[role].data[dp].role}` : ''} ` +\n                                `${o.common.type !== requiredScriptDataPoints[role].data[dp].type ? ` type: ${o.common.type} should be ${requiredScriptDataPoints[role].data[dp].type}` : ''}` +\n                                ` ${!(requiredScriptDataPoints[role].data[dp].writeable && !o.common.write) ? ' - must be writeable!' : ''} `,\n                        );\n                    }\n                }\n            }\n            return true;\n        };\n        const _checkDataPoints = async (role: ScriptConfig.roles, item: ScriptConfig.PageItem): Promise<boolean> => {\n            for (const dp in requiredFeatureDatapoints[role]) {\n                const o = dp !== '' ? await this.adapter.getForeignObjectAsync(`${item.id}.${dp}`) : undefined;\n\n                if (!o && !requiredFeatureDatapoints[role].data[dp].required) {\n                    continue;\n                }\n\n                if (\n                    !o ||\n                    o.common.role !== requiredFeatureDatapoints[role].data[dp].role ||\n                    o.common.type !== requiredFeatureDatapoints[role].data[dp].type\n                ) {\n                    if (!o) {\n                        throw new Error(`Datapoint ${item.id}.${dp} is missing and is required for role ${role}!`);\n                    } else {\n                        throw new Error(\n                            `Datapoint ${item.id}.${dp} has wrong ` +\n                                `${o.common.role !== requiredFeatureDatapoints[role].data[dp].role ? `role: ${o.common.role} should be ${requiredFeatureDatapoints[role].data[dp].role}` : ''} ` +\n                                `${o.common.type !== requiredFeatureDatapoints[role].data[dp].type ? ` type: ${o.common.type} should be ${requiredFeatureDatapoints[role].data[dp].type}` : ''}` +\n                                ` ${!(requiredFeatureDatapoints[role].data[dp].writeable && !o.common.write) ? ' - must be writeable!' : ''} `,\n                        );\n                    }\n                }\n            }\n            return true;\n        };\n        if (mode === 'both' || mode === 'script') {\n            try {\n                if (await _checkScriptDataPoints(role, item)) {\n                    return true;\n                }\n            } catch (error: any) {\n                try {\n                    if (await _checkDataPoints(role, item)) {\n                        return true;\n                    }\n                } catch {\n                    if (mode === 'both') {\n                        throw new Error(error);\n                    } else {\n                        return false;\n                    }\n                }\n                throw new Error(error);\n            }\n        } else {\n            try {\n                if (await _checkDataPoints(role, item)) {\n                    return true;\n                }\n            } catch (error: any) {\n                if (mode === 'feature') {\n                    throw new Error(error);\n                } else {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n    async getMrEntityData(\n        entity: ScriptConfig.ScreenSaverMRElement,\n        mode: Types.ScreenSaverPlaces,\n        nr: string,\n    ): Promise<typePageItem.PageItemDataItemsOptions> {\n        const result: Partial<typePageItem.PageItemDataItemsOptions> = {\n            modeScr: mode,\n            type: 'text',\n            data: { entity1: {} },\n        };\n        if (entity.ScreensaverEntity && entity.ScreensaverEntity.endsWith(`Relay.${nr}`)) {\n            result.data!.entity1!.value = await this.getFieldAsDataItemConfig(entity.ScreensaverEntity, true);\n        } else {\n            result.data!.entity1!.value = {\n                type: 'internal',\n                dp: `cmd/power${nr}`,\n            };\n        }\n        result.data!.icon = {\n            true: {\n                value: {\n                    type: 'const',\n                    constVal: 'lightbulb',\n                },\n                color: {\n                    type: 'const',\n                    constVal: Color.Yellow,\n                },\n            },\n            false: {\n                value: {\n                    type: 'const',\n                    constVal: 'lightbulb-outline',\n                },\n                color: {\n                    type: 'const',\n                    constVal: Color.HMIOff,\n                },\n            },\n            scale: undefined,\n            maxBri: undefined,\n            minBri: undefined,\n        };\n        if (entity.ScreensaverEntityOnColor) {\n            result.data!.icon.true!.color = await this.getIconColor(entity.ScreensaverEntityOnColor || this.colorOn);\n        }\n        if (entity.ScreensaverEntityOffColor) {\n            result.data!.icon.false!.color = await this.getIconColor(entity.ScreensaverEntityOffColor || this.colorOff);\n        }\n\n        if (entity.ScreensaverEntityIconOn) {\n            result.data!.icon.true!.value = await this.getFieldAsDataItemConfig(entity.ScreensaverEntityIconOn);\n        }\n        if (entity.ScreensaverEntityIconOff) {\n            result.data!.icon.true!.value = await this.getFieldAsDataItemConfig(entity.ScreensaverEntityIconOff);\n        }\n        if (entity.ScreensaverEntityValue) {\n            result.data!.icon.false!.text = {\n                value: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityValue),\n                unit: entity.ScreensaverEntityValueUnit\n                    ? await this.getFieldAsDataItemConfig(entity.ScreensaverEntityValueUnit)\n                    : undefined,\n                decimal: entity.ScreensaverEntityValueDecimalPlace\n                    ? { type: 'const', constVal: entity.ScreensaverEntityValueDecimalPlace }\n                    : undefined,\n                factor: undefined,\n            };\n            result.role = 'combined';\n            result.data!.icon.true!.text = result.data!.icon.false!.text;\n        }\n        if (isPageItemDataItemsOptions(result)) {\n            return result;\n        }\n        throw new Error('Invalid data');\n    }\n\n    async getEntityData(\n        entity: ScriptConfig.ScreenSaverElement,\n        mode: Types.ScreenSaverPlaces,\n        defaultColors: {\n            defaultOffColor: ScriptConfig.RGB;\n            defaultOnColor: ScriptConfig.RGB;\n        },\n    ): Promise<typePageItem.PageItemDataItemsOptions> {\n        const result: typePageItem.PageItemDataItemsOptions = {\n            modeScr: mode,\n            type: 'text',\n            data: { entity1: {} },\n        };\n        if (!result.data.entity1) {\n            throw new Error('Invalid data');\n        }\n        result.data.entity2 = result.data.entity1;\n\n        let obj;\n        if (entity.ScreensaverEntity && !entity.ScreensaverEntity.endsWith('.')) {\n            obj = await this.adapter.getObjectAsync(entity.ScreensaverEntity);\n            result.data.entity1.value = await this.getFieldAsDataItemConfig(entity.ScreensaverEntity, true);\n        }\n        const dataType = obj && obj.common && obj.common.type ? obj.common.type : undefined;\n        if (entity.ScreensaverEntityUnitText || entity.ScreensaverEntityUnitText === '') {\n            result.data.entity1.unit = await this.getFieldAsDataItemConfig(entity.ScreensaverEntityUnitText);\n        } else if (obj && obj.common && obj.common.unit) {\n            result.data.entity1.unit = { type: 'const', constVal: obj.common.unit };\n        }\n\n        if (entity.ScreensaverEntityFactor) {\n            result.data.entity1.factor = { type: 'const', constVal: entity.ScreensaverEntityFactor };\n        }\n\n        if (entity.ScreensaverEntityDecimalPlaces) {\n            result.data.entity1.decimal = { type: 'const', constVal: entity.ScreensaverEntityDecimalPlaces };\n        }\n        if (entity.ScreensaverEntityDateFormat) {\n            result.data.entity1.dateFormat = {\n                type: 'const',\n                constVal: { local: 'de', format: entity.ScreensaverEntityDateFormat },\n            };\n        }\n\n        let color: Types.DataItemsOptions | undefined = undefined;\n        if (entity.ScreensaverEntityOnColor) {\n            color = await this.getIconColor(entity.ScreensaverEntityOnColor || this.colorOn);\n        } else if (entity.ScreensaverEntityIconColor && !isIconScaleElement(entity.ScreensaverEntityIconColor)) {\n            color = await this.getIconColor(entity.ScreensaverEntityIconColor || this.colorDefault);\n        } else {\n            color = await this.getIconColor(defaultColors.defaultOnColor || this.colorDefault);\n        }\n\n        let colorOff: Types.DataItemsOptions | undefined = undefined;\n        if (entity.ScreensaverEntityOffColor) {\n            colorOff = await this.getIconColor(entity.ScreensaverEntityOffColor);\n        } else if (entity.ScreensaverEntityOffColor !== null) {\n            colorOff = await this.getIconColor(defaultColors.defaultOffColor);\n        }\n\n        if (entity.ScreensaverEntityIconOn) {\n            result.data.icon = {\n                true: { value: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityIconOn) },\n            };\n        }\n        if (\n            dataType === 'number' &&\n            entity.ScreensaverEntityIconSelect &&\n            Array.isArray(entity.ScreensaverEntityIconSelect)\n        ) {\n            const obj = await this.getFieldAsDataItemConfig(entity.ScreensaverEntity);\n            if (obj && obj.type === 'state') {\n                entity.ScreensaverEntityIconSelect.sort((a, b) => a.value - b.value);\n                obj.read = `\n                const items = [${entity.ScreensaverEntityIconSelect.map(item => `{${item.value}, ${item.icon}}`).join(', ')}];\n                for (let i = 1; i < items.length; i++) {\n                    if (val <= items[i].val) {return items[i].icon;}\n                }\n                return items[items.length - 1].icon;`;\n\n                result.data.icon = {\n                    ...result.data.icon,\n                    true: {\n                        value: obj,\n                    },\n                };\n            }\n        }\n        if (color) {\n            result.data.icon = result.data.icon || {};\n            result.data.icon.true = result.data.icon.true || {};\n            result.data.icon.true.color = color;\n        }\n\n        if (entity.ScreensaverEntityIconOff) {\n            result.data.icon = {\n                ...result.data.icon,\n                ...{\n                    false: { value: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityIconOff) },\n                },\n            };\n        }\n        if (color) {\n            result.data.icon = result.data.icon || {};\n            result.data.icon.false = result.data.icon.false || {};\n            result.data.icon.false.color = colorOff;\n        }\n        if (entity.ScreensaverEntityIconColor && isIconScaleElement(entity.ScreensaverEntityIconColor)) {\n            result.data.icon = {\n                ...result.data.icon,\n                scale: {\n                    type: 'const',\n                    constVal: entity.ScreensaverEntityIconColor,\n                },\n            };\n        }\n\n        if (entity.ScreensaverEntityOnText) {\n            result.data.text = { true: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityOnText) };\n        } else if (entity.ScreensaverEntityText) {\n            result.data.text = { true: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityText) };\n        }\n\n        if (entity.ScreensaverEntityOffText) {\n            result.data.text = { false: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityOffText) };\n        }\n\n        if (isPageItemDataItemsOptions(result)) {\n            return result;\n        }\n        throw new Error('Invalid data');\n    }\n\n    async getFieldAsDataItemConfig(\n        possibleId: string | ScriptConfig.RGB,\n        isTrigger: boolean = false,\n    ): Promise<Types.DataItemsOptions> {\n        const state =\n            Color.isScriptRGB(possibleId) || possibleId === '' || possibleId.endsWith('.')\n                ? undefined\n                : await this.adapter.getForeignStateAsync(possibleId);\n\n        if (!Color.isScriptRGB(possibleId) && state !== undefined && state !== null) {\n            if (isTrigger) {\n                return { type: 'triggered', dp: possibleId };\n            }\n            return { type: 'state', dp: possibleId };\n        }\n        return { type: 'const', constVal: possibleId };\n    }\n\n    async getIconColor(\n        item: ScriptConfig.RGB | RGB | ScriptConfig.IconScaleElement | string,\n    ): Promise<Types.DataItemsOptions | undefined> {\n        if (isIconScaleElement(item)) {\n            //later\n        } else if (typeof item === 'string') {\n            return await this.getFieldAsDataItemConfig(item);\n        } else if (Color.isRGB(item)) {\n            return { type: 'const', constVal: item };\n        } else if (Color.isScriptRGB(item)) {\n            return { type: 'const', constVal: Color.convertScriptRGBtoRGB(item) };\n        }\n        this.adapter.log.error(`Invalid color value: ${JSON.stringify(item)}`);\n        return undefined;\n    }\n    async existsState(id: string): Promise<boolean> {\n        return (await this.adapter.getForeignStateAsync(id)) !== null;\n    }\n}\n\nfunction isIconScaleElement(obj: any): obj is ScriptConfig.IconScaleElement {\n    return obj && obj.val_min !== undefined && obj.val_max !== undefined;\n}\nfunction isPageItemDataItemsOptions(obj: any): obj is typePageItem.PageItemDataItemsOptions {\n    return obj && obj.modeScr && obj.data;\n}\n"],
  "mappings": "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",
  "names": ["obj", "role", "item"]
}

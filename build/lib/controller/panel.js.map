{
  "version": 3,
  "sources": ["../../../src/lib/controller/panel.ts"],
  "sourcesContent": ["import { PanelSend } from './panel-message';\n\nimport { Screensaver, ScreensaverConfigType } from '../pages/screensaver';\nimport * as Types from '../types/types';\nimport * as pages from '../types/pages';\nimport { Controller } from './controller';\nimport { AdapterClassDefinition, BaseClass } from '../classes/library';\nimport { callbackMessageType } from '../classes/mqtt';\nimport { ReiveTopicAppendix, genericStateObjects } from '../const/definition';\nimport { Page, PageConfigAll, PageInterface } from '../classes/Page';\nimport { PageMedia } from '../pages/pageMedia';\nimport { IClientPublishOptions } from 'mqtt';\nimport { StatesControler } from './states-controller';\nimport { PageGrid } from '../pages/pageGrid';\nimport { Navigation, NavigationConfig } from '../classes/navigation';\nimport { PageThermo } from '../pages/pageThermo';\nimport { PagePower } from '../pages/pagePower';\nimport { PageItem } from '../pages/pageItem';\nimport { PageEntities } from '../pages/pageEntities';\nimport { Black, rgb_dec565 } from '../const/Color';\n\nexport interface panelConfigPartial extends Partial<panelConfigTop> {\n    format?: Partial<Intl.DateTimeFormatOptions>;\n    controller: Controller;\n    topic: string;\n    name: string;\n    pages: PageConfigAll[];\n    navigation: NavigationConfig['navigationConfig'];\n    config: ScreensaverConfigType;\n}\nexport function isPanelConfig(F: object | panelConfig): F is panelConfig {\n    if ((F as panelConfig).controller === undefined) return false;\n    if ((F as panelConfig).pages === undefined) return false;\n    if ((F as panelConfig).topic === undefined) return false;\n    if ((F as panelConfig).name === undefined) return false;\n    return true;\n}\ntype panelConfig = panelConfigTop & {\n    format: Intl.DateTimeFormatOptions;\n    controller: Controller;\n    topic: string;\n    name: string;\n    pages: PageConfigAll[];\n    config: ScreensaverConfigType;\n    navigation: NavigationConfig['navigationConfig'];\n};\n\nconst DefaultOptions = {\n    format: {\n        weekday: 'short',\n        month: 'short',\n        year: 'numeric',\n        day: 'numeric',\n    },\n    CustomFormat: '',\n    locale: 'de-DE',\n    pages: [],\n};\n\ntype panelConfigTop = {\n    CustomFormat: string;\n    locale: Intl.LocalesArgument;\n    timeout: number;\n    dimLow: number;\n    dimHigh: number;\n};\n\nexport class Panel extends BaseClass {\n    private minuteLoopTimeout: ioBroker.Timeout | undefined;\n    private pages: (Page | undefined)[] = [];\n    private _activePage: Page | undefined = undefined;\n    private screenSaver: Screensaver | undefined;\n    private InitDone: boolean = false;\n    dimMode: { low: number; high: number };\n    readonly navigation: Navigation;\n    readonly format: Partial<Intl.DateTimeFormatOptions>;\n    readonly controller: Controller;\n    readonly topic: string;\n    readonly reivCallbacks: callbackMessageType[] = [];\n    private _isOnline: boolean = false;\n    readonly panelSend: PanelSend;\n    readonly statesControler: StatesControler;\n    readonly config: ScreensaverConfigType;\n    readonly timeout: number;\n    readonly CustomFormat: string;\n    readonly sendToTasmota: (topic: string, payload: string, opt?: IClientPublishOptions) => void = () => {};\n    public persistentPageItems: Record<string, PageItem> = {};\n    info: Types.PanelInfo = {\n        nspanel: {\n            displayVersion: 0,\n            model: '',\n            bigIconLeft: false,\n            bigIconRight: false,\n            isOnline: false,\n        },\n        tasmota: {\n            net: {\n                ip: '',\n                gateway: '',\n                dnsserver: '',\n                subnetmask: '',\n                hostname: '',\n                mac: '',\n            },\n            uptime: '',\n            wifi: { ssid: '', rssi: 0, downtime: '' },\n        },\n    };\n    friendlyName: string = '';\n\n    constructor(adapter: AdapterClassDefinition, options: panelConfigPartial) {\n        super(adapter, options.name);\n        this.friendlyName = options.name;\n        this.panelSend = new PanelSend(adapter, {\n            name: `${options.name}-SendClass`,\n            mqttClient: options.controller.mqttClient,\n            topic: options.topic,\n        });\n        this.timeout = options.timeout || 15;\n\n        this.CustomFormat = options.CustomFormat ?? '';\n        this.config = options.config;\n        this.format = Object.assign(DefaultOptions.format, options.format);\n        this.controller = options.controller;\n        this.topic = options.topic;\n        if (typeof this.panelSend.addMessage === 'function') this.sendToPanelClass = this.panelSend.addMessage;\n        if (typeof this.panelSend.addMessageTasmota === 'function')\n            this.sendToTasmota = this.panelSend.addMessageTasmota;\n        this.statesControler = options.controller.statesControler;\n\n        this.dimMode = { low: options.dimLow ?? 70, high: options.dimHigh ?? 90 };\n\n        let scsFound = 0;\n        for (let a = 0; a < options.pages.length; a++) {\n            let pageConfig = options.pages[a];\n\n            if (!pageConfig) continue;\n            const pmconfig = {\n                card: pageConfig.card,\n                panel: this,\n                id: String(a),\n                name: pageConfig.uniqueID,\n                alwaysOn: pageConfig.alwaysOn,\n                adapter: this.adapter,\n                panelSend: this.panelSend,\n                dpInit: pageConfig.dpInit,\n            };\n            switch (pageConfig.card) {\n                case 'cardChart': {\n                    break;\n                }\n                case 'cardLChart': {\n                    break;\n                }\n                case 'cardEntities': {\n                    pageConfig = Page.getPage(pageConfig, this);\n                    this.pages[a] = new PageEntities(pmconfig, pageConfig);\n                    break;\n                }\n                case 'cardGrid2':\n                case 'cardGrid': {\n                    pageConfig = Page.getPage(pageConfig, this);\n                    this.pages[a] = new PageGrid(pmconfig, pageConfig);\n                    break;\n                }\n\n                case 'cardThermo': {\n                    pageConfig = Page.getPage(pageConfig, this);\n                    this.pages[a] = new PageThermo(pmconfig, pageConfig);\n                    break;\n                }\n                case 'cardMedia': {\n                    pageConfig = Page.getPage(pageConfig, this);\n                    this.pages[a] = new PageMedia(pmconfig, pageConfig);\n                    break;\n                }\n                case 'cardUnlock': {\n                    break;\n                }\n                case 'cardQR': {\n                    break;\n                }\n                case 'cardAlarm': {\n                    break;\n                }\n                case 'cardPower': {\n                    pageConfig = Page.getPage(pageConfig, this);\n                    this.pages[a] = new PagePower(pmconfig, pageConfig);\n                    break;\n                }\n                case 'screensaver':\n                case 'screensaver2': {\n                    if (scsFound++ > 0) continue;\n\n                    //const opt = Object.assign(DefaultOptions, pageConfig);\n                    const ssconfig: PageInterface = {\n                        card: pageConfig.card,\n                        panel: this,\n                        id: String(a),\n                        name: 'SrS',\n                        adapter: this.adapter,\n                        panelSend: this.panelSend,\n                        dpInit: '',\n                    };\n                    this.screenSaver = new Screensaver(ssconfig, pageConfig);\n                    this.pages[a] = this.screenSaver;\n                    break;\n                }\n            }\n        }\n        if (scsFound === 0 || this.screenSaver === undefined) {\n            this.log.error('no screensaver found! Stop!');\n            this.adapter.controller!.delete();\n            throw new Error('no screensaver found! Stop!');\n            return;\n        }\n        const navConfig: NavigationConfig = {\n            adapter: this.adapter,\n            panel: this,\n            navigationConfig: options.navigation,\n        };\n        this.navigation = new Navigation(navConfig);\n    }\n\n    init = async (): Promise<void> => {\n        this.controller.mqttClient.subscript(this.topic + '/tele/#', this.onMessage);\n        this.controller.mqttClient.subscript(this.topic + '/stat/#', this.onMessage);\n        this.sendToTasmota(this.topic + '/cmnd/STATUS0', '');\n        this.isOnline = false;\n    };\n    start = async (): Promise<void> => {\n        this.adapter.subscribeStates(`panels.${this.name}.cmd.*`);\n        genericStateObjects.panel.panels._channel.common.name = this.friendlyName;\n        await this.library.writedp(`panels.${this.name}`, undefined, genericStateObjects.panel.panels._channel);\n        await this.library.writedp(\n            `panels.${this.name}.cmd`,\n            undefined === 'ON',\n            genericStateObjects.panel.panels.cmd._channel,\n        );\n        await this.library.writedp(\n            `panels.${this.name}.alarm`,\n            undefined === 'ON',\n            genericStateObjects.panel.panels.alarm._channel,\n        );\n        for (const page of this.pages) {\n            if (page) {\n                this.log.debug('init page ' + page.name);\n                await page.init();\n            }\n        }\n        this.navigation.init();\n        const currentPage = this.library.readdb(`panels.${this.name}.cmd.mainPage`);\n        if (currentPage && currentPage.val) {\n            this.navigation.setMainPageByName(String(currentPage.val));\n        }\n        const states = this.navigation.buildCommonStates();\n        const page = this.navigation.getCurrentMainPoint();\n        this.library.writedp(`panels.${this.name}.cmd.mainPage`, page, {\n            _id: '',\n            type: 'state',\n            common: { name: '', type: 'string', role: 'value.text', read: true, write: true, states: states },\n            native: {},\n        });\n\n        let state = this.library.readdb(`panels.${this.name}.info.nspanel.bigIconLeft`);\n        this.info.nspanel.bigIconLeft = state ? !!state.val : false;\n        state = this.library.readdb(`panels.${this.name}.info.nspanel.bigIconRight`);\n        this.info.nspanel.bigIconRight = state ? !!state.val : false;\n\n        //done with states\n        this.statesControler.setInternalState(\n            `${this.name}/cmd/bigIconLeft`,\n            true,\n            true,\n            {\n                name: '',\n                type: 'boolean',\n                role: 'indicator',\n                read: true,\n                write: true,\n            },\n            this.onInternalCommand,\n        );\n        this.statesControler.setInternalState(\n            `${this.name}/cmd/bigIconRight`,\n            true,\n            true,\n            {\n                name: '',\n                type: 'boolean',\n                role: 'indicator',\n                read: true,\n                write: true,\n            },\n            this.onInternalCommand,\n        );\n        this.statesControler.setInternalState(`${this.name}/cmd/power1`, false, true, {\n            name: 'power1',\n            type: 'boolean',\n            write: false,\n            read: true,\n            role: 'value',\n        });\n        this.statesControler.setInternalState(`${this.name}/cmd/power2`, false, true, {\n            name: 'power1',\n            type: 'boolean',\n            write: false,\n            read: true,\n            role: 'value',\n        });\n        this.sendToTasmota(this.topic + '/cmnd/POWER1', '');\n        this.sendToTasmota(this.topic + '/cmnd/POWER2', '');\n        this.sendToPanel('pageType~pageStartup', { retain: true });\n    };\n\n    private sendToPanelClass: (payload: string, opt?: IClientPublishOptions) => void = () => {};\n    protected sendToPanel: (payload: string, opt?: IClientPublishOptions) => void = (\n        payload: string,\n        opt?: IClientPublishOptions,\n    ) => {\n        this.sendToPanelClass(payload, opt);\n    };\n    async setActivePage(_notSleep?: boolean): Promise<void>;\n    async setActivePage(_page?: Page | boolean | undefined): Promise<void>;\n    async setActivePage(_page?: Page | boolean | undefined, _notSleep?: boolean): Promise<void> {\n        if (_page === undefined) return;\n        let page = this._activePage;\n        let sleep = false;\n        if (typeof _page === 'boolean') {\n            sleep = !_page;\n        } else {\n            page = _page;\n            sleep = _notSleep ?? false;\n        }\n        if (!this._activePage) {\n            if (page === undefined) return;\n            await page.setVisibility(true);\n\n            this._activePage = page;\n        } else if (sleep !== this._activePage.sleep || page !== this._activePage) {\n            if (page != this._activePage) {\n                if (this._activePage) await this._activePage.setVisibility(false);\n                if (page) {\n                    if (!sleep) await page.setVisibility(true);\n                    page.sleep = sleep;\n                    this._activePage = page;\n                }\n            } else if (sleep !== this._activePage.sleep) {\n                if (!sleep) await this._activePage.setVisibility(true, true);\n                this._activePage.sleep = sleep;\n            }\n        }\n    }\n    getActivePage(): Page {\n        if (!this._activePage) throw new Error(`No active page here, check code!`);\n        return this._activePage;\n    }\n    get isOnline(): boolean {\n        return this._isOnline;\n    }\n    set isOnline(s: boolean) {\n        this.info.nspanel.isOnline = s;\n        if (s !== this._isOnline) {\n            this.library.writedp(\n                `panels.${this.name}.info.nspanel.isOnline`,\n                s,\n                genericStateObjects.panel.panels.info.nspanel.isOnline,\n            );\n            if (s) {\n                this.log.info('is online!');\n            } else {\n                this.log.warn('is offline!');\n            }\n        }\n        this._isOnline = s;\n    }\n    async isValid(): Promise<true> {\n        return true;\n    }\n\n    registerOnMessage(fn: callbackMessageType): void {\n        if (this.reivCallbacks.indexOf(fn) === -1) {\n            this.reivCallbacks.push(fn);\n        }\n    }\n    onMessage: callbackMessageType = async (topic: string, message: string) => {\n        for (const fn of this.reivCallbacks) {\n            if (fn) fn(topic, message);\n        }\n        if (topic.endsWith(ReiveTopicAppendix)) {\n            //this.log.debug(`Receive message ${topic} with ${message}`);\n            const event: Types.IncomingEvent | null = this.convertToEvent(message);\n            if (event) {\n                this.HandleIncomingMessage(event);\n            }\n        } else {\n            const command = (topic.match(/[0-9a-zA-Z]+?\\/[0-9a-zA-Z]+$/g) ||\n                [])[0] as Types.TasmotaIncomingTopics | null;\n            if (command) {\n                //this.log.debug(`Receive other message ${topic} with ${message}`);\n                switch (command) {\n                    case 'stat/POWER2': {\n                        this.library.writedp(\n                            `panels.${this.name}.cmd.power2`,\n                            message === 'ON',\n                            genericStateObjects.panel.panels.cmd.power2,\n                        );\n                        this.statesControler.setInternalState(`${this.name}/cmd/power2`, message === 'ON', true);\n                        break;\n                    }\n                    case 'stat/POWER1': {\n                        this.library.writedp(\n                            `panels.${this.name}.cmd.power1`,\n                            message === 'ON',\n                            genericStateObjects.panel.panels.cmd.power1,\n                        );\n                        this.statesControler.setInternalState(`${this.name}/cmd/power1`, message === 'ON', true);\n                        break;\n                    }\n                    case 'stat/STATUS0': {\n                        const data = JSON.parse(message) as Types.STATUS0;\n                        this.name = this.library.cleandp(data.StatusNET.Mac, false, true);\n                        if (!this.InitDone) {\n                            this.sendToTasmota(\n                                this.topic + '/cmnd/Rule3',\n                                'ON CustomSend DO RuleTimer1 120 ENDON ON Rules#Timer=1 DO CustomSend pageType~pageStartup ENDON',\n                            );\n                            this.sendToTasmota(this.topic + '/cmnd/Rule3', 'ON');\n                            this.InitDone = true;\n                            await this.start();\n                        }\n                        this.library.writedp(\n                            `panels.${this.name}.info`,\n                            undefined,\n                            genericStateObjects.panel.panels.info._channel,\n                        );\n                        this.library.writedp(\n                            `panels.${this.name}.info.status`,\n                            message,\n                            genericStateObjects.panel.panels.info.status,\n                        );\n                        this.info.tasmota.net = {\n                            ip: data.StatusNET.IPAddress,\n                            gateway: data.StatusNET.Gateway,\n                            dnsserver: data.StatusNET.DNSServer1,\n                            subnetmask: data.StatusNET.Subnetmask,\n                            hostname: data.StatusNET.Hostname,\n                            mac: data.StatusNET.Mac,\n                        };\n                        this.info.tasmota.uptime = data.StatusSTS.Uptime;\n                        this.info.tasmota.wifi = {\n                            ssid: data.StatusSTS.Wifi.SSId,\n                            rssi: data.StatusSTS.Wifi.RSSI,\n                            downtime: data.StatusSTS.Wifi.Downtime,\n                        };\n                        await this.library.writeFromJson(\n                            `panels.${this.name}.info.tasmota`,\n                            'panel.panels.info.tasmota',\n                            genericStateObjects,\n                            this.info.tasmota,\n                        );\n                    }\n                }\n            }\n        }\n    };\n\n    async onStateChange(id: string, state: ioBroker.State): Promise<void> {\n        if (state.ack) return;\n        if (id.split('.')[1] === this.name) {\n            const cmd = id.replace(`panels.${this.name}.cmd.`, '');\n            switch (cmd) {\n                case 'power1': {\n                    this.sendToTasmota(this.topic + '/cmnd/POWER1', state.val ? 'ON' : 'OFF');\n                    break;\n                }\n                case 'power2': {\n                    this.sendToTasmota(this.topic + '/cmnd/POWER2', state.val ? 'ON' : 'OFF');\n                    break;\n                }\n                case 'mainPage': {\n                    this.navigation.setMainPageByName(state.val ? String(state.val) : 'main');\n                    this.library.writedp(`panels.${this.name}.cmd.mainPage`, state.val ? String(state.val) : 'main');\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * timeout screensaver after sec\n     * @param sec seconds for timeout\n     */\n    sendScreeensaverTimeout(sec: number): void {\n        this.log.debug(`Set screeensaver timeout to ${sec}s.`);\n        this.sendToPanel(`timeout~${sec}`);\n    }\n    restartLoops(): void {\n        if (this.minuteLoopTimeout) this.adapter.clearTimeout(this.minuteLoopTimeout);\n        this.minuteLoop();\n    }\n    /**\n     * Do panel work always at full minute\n     * @returns void\n     */\n    minuteLoop = (): void => {\n        if (this.unload) return;\n        //this.sendToPanel(`time~${new Date().toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' })}`);\n\n        this.pages = this.pages.filter((a) => a && !a.unload);\n\n        const diff = 60000 - (Date.now() % 60000) + 10;\n        this.minuteLoopTimeout = this.adapter.setTimeout(this.minuteLoop, diff);\n    };\n\n    async delete(): Promise<void> {\n        await super.delete();\n        await this.library.writedp(\n            `panels.${this.name}.info.nspanel.isOnline`,\n            false,\n            genericStateObjects.panel.panels.info.nspanel.isOnline,\n        );\n        for (const a of this.pages) if (a) await a.delete();\n        this.isOnline = false;\n        this.persistentPageItems = {};\n        if (this.minuteLoopTimeout) this.adapter.clearTimeout(this.minuteLoopTimeout);\n    }\n\n    getPagebyUniqueID(uniqueID: string): Page | null {\n        if (!uniqueID) return null;\n        const index = this.pages.findIndex((a) => a && a.name && a.name === uniqueID);\n        return this.pages[index] ?? null;\n    }\n    async HandleIncomingMessage(event: Types.IncomingEvent): Promise<void> {\n        this.log.debug('Receive message:' + JSON.stringify(event));\n        const index = this.pages.findIndex((a) => {\n            if (a && a.card !== 'screensaver' && a.card !== 'screensaver2') return true;\n            return false;\n        });\n        if (index === -1 || (this.isOnline === false && event.method !== 'startup')) return;\n        switch (event.method) {\n            case 'startup': {\n                this.isOnline = true;\n\n                this.info.nspanel.displayVersion = parseInt(event.id);\n                this.info.nspanel.model = event.action;\n\n                await this.library.writeFromJson(\n                    `panels.${this.name}.info`,\n                    'panel.panels.info',\n                    genericStateObjects,\n                    this.info,\n                );\n\n                this.restartLoops();\n                this.sendToPanel(`dimmode~${this.dimMode.low}~${this.dimMode.high}~` + String(rgb_dec565(Black)));\n\n                this.navigation.resetPosition();\n                const page = this.navigation.getCurrentPage();\n                await this.setActivePage(page);\n\n                break;\n            }\n            case 'sleepReached': {\n                await this.setActivePage(this.screenSaver);\n                this.navigation.resetPosition();\n                break;\n            }\n            case 'pageOpenDetail': {\n                await this.setActivePage(false);\n                this.getActivePage().onPopupRequest(\n                    event.id,\n                    event.popup as Types.PopupType,\n                    event.action,\n                    event.opt,\n                    event,\n                );\n                break;\n            }\n            case 'buttonPress2': {\n                if (event.id == 'screensaver') {\n                    await this.setActivePage(this.navigation.getCurrentPage());\n                } else if (event.action === 'bExit') {\n                    await this.setActivePage(true);\n                } else {\n                    if (\n                        event.action === 'button' &&\n                        ['bNext', 'bPrev', 'bUp', 'bHome', 'bSubNext', 'bSubPrev'].indexOf(event.id) != -1\n                    ) {\n                        if (['bPrev', 'bUp', 'bSubPrev'].indexOf(event.id) != -1) this.navigation.goLeft();\n                        else if (['bNext', 'bHome', 'bSubNext'].indexOf(event.id) != -1) this.navigation.goRight();\n                        break;\n                    }\n                    this.getActivePage().onPopupRequest(\n                        event.id,\n                        event.popup as Types.PopupType,\n                        event.action,\n                        event.opt,\n                        event,\n                    );\n                    await this.getActivePage().onButtonEvent(event);\n                }\n                break;\n            }\n            case 'renderCurrentPage': {\n                // Event only for HA at this Moment\n                break;\n            }\n            case 'button1': {\n                this.screenSaver!.setVisibility(false);\n\n                break;\n            }\n            case 'button2': {\n                this.screenSaver!.setVisibility(false);\n\n                break;\n            }\n        }\n    }\n\n    onInternalCommand = (id: string, state: ioBroker.State | undefined): ioBroker.StateValue => {\n        const token = id.split('/').pop();\n        if (state && !state.ack) {\n            switch (token) {\n                case 'bigIconLeft': {\n                    this.info.nspanel.bigIconLeft = !!state.val;\n                    this.screenSaver && this.screenSaver.HandleScreensaverStatusIcons();\n                    this.statesControler.setInternalState(`${this.name}/cmd/bigIconLeft`, !!state.val, true);\n                    this.library.writeFromJson(\n                        `panels.${this.name}.info`,\n                        'panel.panels.info',\n                        genericStateObjects,\n                        this.info,\n                    );\n                    break;\n                }\n                case 'bigIconRight': {\n                    this.info.nspanel.bigIconRight = !!state.val;\n                    this.screenSaver && this.screenSaver.HandleScreensaverStatusIcons();\n                    this.statesControler.setInternalState(`${this.name}/cmd/bigIconRight`, !!state.val, true);\n                    this.library.writeFromJson(\n                        `panels.${this.name}.info`,\n                        'panel.panels.info',\n                        genericStateObjects,\n                        this.info,\n                    );\n                    break;\n                }\n            }\n        } else if (!state) {\n            switch (token) {\n                case 'bigIconLeft': {\n                    return this.info.nspanel.bigIconLeft;\n                }\n                case 'bigIconRight': {\n                    return this.info.nspanel.bigIconRight;\n                }\n            }\n        }\n        return null;\n    };\n\n    private convertToEvent(msg: string): Types.IncomingEvent | null {\n        try {\n            msg = (JSON.parse(msg) || {}).CustomRecv;\n        } catch (e) {\n            this.log.warn('Receive a broken msg from mqtt: ' + msg);\n        }\n        if (msg === undefined) return null;\n        const temp = msg.split(',');\n        if (!Types.isEventType(temp[0])) return null;\n        if (!Types.isEventMethod(temp[1])) return null;\n        let popup: undefined | string = undefined;\n        if (temp[1] === 'pageOpenDetail') popup = temp.splice(2, 1)[0];\n        const arr = String(temp[2]).split('?');\n        if (arr[3])\n            return {\n                type: temp[0],\n                method: temp[1],\n                target: parseInt(arr[3]),\n                page: parseInt(arr[1]),\n                cmd: parseInt(arr[0]),\n                popup: popup,\n                id: arr[2],\n                action: pages.isButtonActionType(temp[3]) ? temp[3] : temp[3],\n                opt: temp[4] ?? '',\n            };\n        if (arr[2])\n            return {\n                type: temp[0],\n                method: temp[1],\n                page: parseInt(arr[0]),\n                cmd: parseInt(arr[1]),\n                popup: popup,\n                id: arr[2],\n                action: pages.isButtonActionType(temp[3]) ? temp[3] : temp[3],\n                opt: temp[4] ?? '',\n            };\n        else if (arr[1])\n            return {\n                type: temp[0],\n                method: temp[1],\n                page: parseInt(arr[0]),\n                popup: popup,\n                id: arr[1],\n                action: pages.isButtonActionType(temp[3]) ? temp[3] : temp[3],\n                opt: temp[4] ?? '',\n            };\n        else\n            return {\n                type: temp[0],\n                method: temp[1],\n                popup: popup,\n                id: arr[0],\n                action: pages.isButtonActionType(temp[3]) ? temp[3] : temp[3],\n                opt: temp[4] ?? '',\n            };\n    }\n\n    /*\n    function HandleMessage(typ: string, method: NSPanel.EventMethod, page: number | undefined, words: string[] | undefined): void {\n        try {\n            if (typ == 'event') {\n                switch (method as NSPanel.EventMethod) {\n                    case 'startup':\n                        screensaverEnabled = false;\n                        UnsubscribeWatcher();\n                        HandleStartupProcess();\n                        pageId = 0;\n                        GeneratePage(config.pages[0]);\n                        if (Debug) log('HandleMessage -> Startup', 'info');\n                        Init_Release();\n                        break;\n                    case 'sleepReached':\n                        useMediaEvents = false;\n                        screensaverEnabled = true;\n                        if (pageId < 0)\n                            pageId = 0;\n                        HandleScreensaver();\n                        if (Debug) log('HandleMessage -> sleepReached', 'info');\n                        break;\n                    case 'pageOpenDetail':\n                        if (words != undefined) {\n                            screensaverEnabled = false;\n                            UnsubscribeWatcher();\n                            if (Debug) {\n                                log('HandleMessage -> pageOpenDetail ' + words[0] + ' - ' + words[1] + ' - ' + words[2] + ' - ' + words[3] + ' - ' + words[4], 'info');\n                            }\n                            let tempId: PageItem['id'];\n                            let tempPageItem = words[3].split('?');\n                            let placeId: number | undefined = undefined;\n                            if (!isNaN(parseInt(tempPageItem[0]))){\n                                tempId = activePage!.items[tempPageItem[0]].id;\n                                placeId = parseInt(tempPageItem[0])\n                                if (tempId == undefined) {\n                                    throw new Error(`Missing id in HandleMessage!`)\n                                }\n                            } else {\n                                tempId = tempPageItem[0];\n                            }\n                            let pageItem: PageItem = findPageItem(tempId);\n                            if (pageItem !== undefined && isPopupType(words[2])) {\n                                let temp: string | NSPanel.mediaOptional | undefined = tempPageItem[1]\n                                if (isMediaOptional(temp)) SendToPanel(GenerateDetailPage(words[2], temp, pageItem, placeId));\n                                else SendToPanel(GenerateDetailPage(words[2], undefined, pageItem, placeId));\n                            }\n                        }\n                        break;\n                    case 'buttonPress2':\n                        screensaverEnabled = false;\n                        HandleButtonEvent(words);\n                        if (Debug) {\n                            if (words != undefined) log('HandleMessage -> buttonPress2 ' + words[0] + ' - ' + words[1] + ' - ' + words[2] + ' - ' + words[3] + ' - ' + words[4], 'info');\n                        }\n                        break;\n                    case 'renderCurrentPage':\n                        // Event only for HA at this Moment\n                        if (Debug) log('renderCurrentPage', 'info');\n                        break;\n                    case 'button1':\n                    case 'button2':\n                        screensaverEnabled = false;\n                        HandleHardwareButton(method);\n                        if (Debug) log('HandleMessage -> button1 /  button2', 'info')\n                        break;\n                    default:\n                        break;\n                }\n            }\n        } catch (err: any) {\n            log('error at function HandleMessage: ' + err.message, 'warn');\n        }\n    }*/\n}\n"],
  "mappings": "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",
  "names": ["page"]
}

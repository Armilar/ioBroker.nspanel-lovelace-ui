{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageOR.ts"],
  "sourcesContent": ["import { Page, PageInterface } from '../classes/Page';\nimport * as pages from '../types/pages';\nimport { IncomingEvent } from '../types/types';\n\n/*const PageAlarmMessageDefault: pages.PageAlarmMessage = {\n    event: 'entityUpd',\n    headline: 'Page Grid',\n    intNameEntity: '',\n    navigation: 'button~bSubPrev~~~~~button~bSubNext~~~~',\n    button1: '',\n    status1: '',\n    button2: '',\n    status2: '',\n    button3: '',\n    status3: '',\n    button4: '',\n    status4: '',\n    icon: '',\n    iconColor: '',\n    numpad: 'disable',\n    flashing: 'disable',\n};*/\n\n/**\n * untested\n */\nexport class PageQR extends Page {\n    items: pages.PageBaseConfig['items'];\n    private step: number = 1;\n    private headlinePos: number = 0;\n    private titelPos: number = 0;\n    private nextArrow: boolean = false;\n    private status: pages.AlarmStates = 'armed';\n\n    constructor(config: PageInterface, options: pages.PageBaseConfig) {\n        super(config, options);\n        if (options.config && options.config.card == 'cardQR') this.config = options.config;\n        this.minUpdateInterval = 1000;\n    }\n\n    async init(): Promise<void> {\n        const config = structuredClone(this.config);\n        // search states for mode auto\n        const tempConfig: Partial<pages.cardQRDataItemOptions> =\n            this.enums || this.dpInit\n                ? await this.panel.statesControler.getDataItemsFromAuto(this.dpInit, config, undefined, this.enums)\n                : config;\n        // create Dataitems\n        //this.log.debug(JSON.stringify(tempConfig));\n        const tempItem: Partial<pages.cardQRDataItems> = await this.panel.statesControler.createDataItems(\n            tempConfig,\n            this,\n        );\n        this.items = tempItem as pages.cardQRDataItems;\n        // set card because we lose it\n        this.items.card = 'cardQR';\n        await super.init();\n    }\n\n    /**\n     *\n     * @returns\n     */\n    public async update(): Promise<void> {\n        if (!this.visibility) return;\n        const message: Partial<pages.PageQRMessage> = {};\n        const items = this.items;\n        if (!items || items.card !== 'cardQR') return;\n        const data = items.data;\n\n        if (this.pageItems) {\n            message.options = [];\n            const maxItems = 2;\n            for (let a = 0; a < maxItems; a++) {\n                const temp = this.pageItems[a];\n                if (temp) message.options[a] = await temp.getPageItemPayload();\n            }\n        }\n        message.headline = (data.headline && (await data.headline.getTranslatedString())) ?? this.name;\n        message.navigation = this.getNavigation();\n\n        this.sendToPanel(this.getMessage(message));\n    }\n\n    private getMessage(_message: Partial<pages.PageQRMessage>): string {\n        /*let result: pages.PageQRMessage = PageAlarmMessageDefault;\n        result = Object.assign(result, message) as pages.PageQRMessage;\n        return getPayload(\n            'entityUpd',\n            result.headline,\n            result.navigation,\n            result.intNameEntity,\n            result.button1,\n            result.status1,\n            result.button2,\n            result.status2,\n            result.button3,\n            result.status3,\n            result.button4,\n            result.status4,\n            result.icon,\n            result.iconColor,\n            result.numpad,\n            result.flashing,\n        );*/\n        return '';\n    }\n\n    protected async onStateTrigger(_id: string): Promise<void> {\n        this.adapter.setTimeout(() => this.update(), 50);\n    }\n    /**\n     *a\n     * @param _event\n     * @returns\n     */\n    async onButtonEvent(_event: IncomingEvent): Promise<void> {\n        //if (event.page && event.id && this.pageItems) {\n        //    this.pageItems[event.id as any].setPopupAction(event.action, event.opt);\n        //}\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAoC;AA0B7B,MAAM,eAAe,iBAAK;AAAA,EAC7B;AAAA,EACQ,OAAe;AAAA,EACf,cAAsB;AAAA,EACtB,WAAmB;AAAA,EACnB,YAAqB;AAAA,EACrB,SAA4B;AAAA,EAEpC,YAAY,QAAuB,SAA+B;AAC9D,UAAM,QAAQ,OAAO;AACrB,QAAI,QAAQ,UAAU,QAAQ,OAAO,QAAQ;AAAU,WAAK,SAAS,QAAQ;AAC7E,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EAEA,MAAM,OAAsB;AACxB,UAAM,SAAS,gBAAgB,KAAK,MAAM;AAE1C,UAAM,aACF,KAAK,SAAS,KAAK,SACb,MAAM,KAAK,MAAM,gBAAgB,qBAAqB,KAAK,QAAQ,QAAQ,QAAW,KAAK,KAAK,IAChG;AAGV,UAAM,WAA2C,MAAM,KAAK,MAAM,gBAAgB;AAAA,MAC9E;AAAA,MACA;AAAA,IACJ;AACA,SAAK,QAAQ;AAEb,SAAK,MAAM,OAAO;AAClB,UAAM,MAAM,KAAK;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAa,SAAwB;AA/DzC;AAgEQ,QAAI,CAAC,KAAK;AAAY;AACtB,UAAM,UAAwC,CAAC;AAC/C,UAAM,QAAQ,KAAK;AACnB,QAAI,CAAC,SAAS,MAAM,SAAS;AAAU;AACvC,UAAM,OAAO,MAAM;AAEnB,QAAI,KAAK,WAAW;AAChB,cAAQ,UAAU,CAAC;AACnB,YAAM,WAAW;AACjB,eAAS,IAAI,GAAG,IAAI,UAAU,KAAK;AAC/B,cAAM,OAAO,KAAK,UAAU,CAAC;AAC7B,YAAI;AAAM,kBAAQ,QAAQ,CAAC,IAAI,MAAM,KAAK,mBAAmB;AAAA,MACjE;AAAA,IACJ;AACA,YAAQ,YAAY,UAAK,YAAa,MAAM,KAAK,SAAS,oBAAoB,MAA1D,YAAiE,KAAK;AAC1F,YAAQ,aAAa,KAAK,cAAc;AAExC,SAAK,YAAY,KAAK,WAAW,OAAO,CAAC;AAAA,EAC7C;AAAA,EAEQ,WAAW,UAAgD;AAqB/D,WAAO;AAAA,EACX;AAAA,EAEA,MAAgB,eAAe,KAA4B;AACvD,SAAK,QAAQ,WAAW,MAAM,KAAK,OAAO,GAAG,EAAE;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,cAAc,QAAsC;AAAA,EAI1D;AACJ;",
  "names": []
}

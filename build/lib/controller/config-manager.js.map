{
  "version": 3,
  "sources": ["../../../src/lib/controller/config-manager.ts"],
  "sourcesContent": ["import { BaseClass } from '../classes/library';\nimport type { NspanelLovelaceUi } from '../types/NspanelLovelaceUi';\nimport type * as typePageItem from '../types/type-pageItem';\nimport type * as Types from '../types/types';\nimport { Color } from '../const/Color';\nimport type * as pages from '../types/pages';\nimport { defaultConfig, isConfig } from '../const/config-manager-const';\n\nexport class ConfigManager extends BaseClass {\n    //private test: ConfigManager.DeviceState;\n\n    constructor(adapter: NspanelLovelaceUi) {\n        super(adapter, 'config-manager');\n    }\n\n    async setScriptConfig(configuration: any): Promise<void> {\n        const config = Object.assign(defaultConfig, configuration);\n        if (!config || !isConfig(config)) {\n            this.log.error(`Invalid configuration from Script: ${config ? JSON.stringify(config) : 'undefined'}`);\n            return;\n        }\n\n        // Screensaver configuration\n        const pageItems: typePageItem.PageItemDataItemsOptions[] = [];\n        if (config.bottomScreensaverEntity) {\n            for (const item of config.bottomScreensaverEntity) {\n                if (item) {\n                    pageItems.push(await this.getEntityData(item, 'bottom'));\n                }\n            }\n        }\n        if (config.indicatorScreensaverEntity) {\n            for (const item of config.indicatorScreensaverEntity) {\n                if (item) {\n                    pageItems.push(await this.getEntityData(item, 'indicator'));\n                }\n            }\n        }\n        if (config.leftScreensaverEntity) {\n            for (const item of config.leftScreensaverEntity) {\n                if (item) {\n                    pageItems.push(await this.getEntityData(item, 'left'));\n                }\n            }\n        }\n        this.log.debug(`pageItems count: ${pageItems.length}`);\n        const convertedConfig: pages.PageBaseConfig = {\n            dpInit: '',\n            alwaysOn: 'none',\n            uniqueID: 'scr',\n            useColor: false,\n            config: {\n                card: 'screensaver2',\n                mode: 'advanced',\n                rotationTime: 0,\n                model: 'eu',\n                data: undefined,\n            },\n            pageItems: pageItems,\n        };\n        this.log.debug(`convertedConfig: ${JSON.stringify(convertedConfig)}`);\n    }\n\n    async getEntityData(\n        entity: ScriptConfig.ScreenSaverElement,\n        mode: Types.ScreenSaverPlaces,\n    ): Promise<typePageItem.PageItemDataItemsOptions> {\n        const result: Partial<typePageItem.PageItemDataItemsOptions> = {\n            modeScr: mode,\n            type: 'text',\n            data: { entity2: {} },\n        };\n\n        const obj = await this.adapter.getObjectAsync(entity.ScreensaverEntity);\n        if (entity.ScreensaverEntityUnitText || entity.ScreensaverEntityUnitText === '') {\n            result.data!.entity2!.unit = await this.getFieldAsDataItemConfig(entity.ScreensaverEntityUnitText);\n        } else if (obj && obj.common && obj.common.unit) {\n            result.data!.entity2!.unit = { type: 'const', constVal: obj.common.unit };\n        }\n\n        if (entity.ScreensaverEntityFactor) {\n            result.data!.entity2!.factor = { type: 'const', constVal: entity.ScreensaverEntityFactor };\n        }\n        if (entity.ScreensaverEntityDecimalPlaces) {\n            result.data!.entity2!.decimal = { type: 'const', constVal: entity.ScreensaverEntityDecimalPlaces };\n        }\n        let color: Types.DataItemsOptions | undefined = undefined;\n        if (entity.ScreensaverEntityOnColor) {\n            if (typeof entity.ScreensaverEntityOnColor === 'string') {\n                color = await this.getFieldAsDataItemConfig(entity.ScreensaverEntityOnColor);\n            } else if (Color.isRGB(entity.ScreensaverEntityOnColor)) {\n                color = { type: 'const', constVal: entity.ScreensaverEntityOnColor };\n            } else if (Color.isScriptRGB(entity.ScreensaverEntityOnColor)) {\n                color = { type: 'const', constVal: Color.convertScriptRGBtoRGB(entity.ScreensaverEntityOnColor) };\n            } else {\n                this.adapter.log.error(`Invalid color value: ${JSON.stringify(entity.ScreensaverEntityOnColor)}`);\n            }\n        } else if (entity.ScreensaverEntityIconColor) {\n            if (typeof entity.ScreensaverEntityIconColor === 'string') {\n                color = await this.getFieldAsDataItemConfig(entity.ScreensaverEntityIconColor);\n            } else if (Color.isRGB(entity.ScreensaverEntityIconColor)) {\n                color = { type: 'const', constVal: entity.ScreensaverEntityIconColor };\n            } else if (Color.isScriptRGB(entity.ScreensaverEntityIconColor)) {\n                color = { type: 'const', constVal: Color.convertScriptRGBtoRGB(entity.ScreensaverEntityIconColor) };\n            } else {\n                this.adapter.log.error(`Invalid color value: ${JSON.stringify(entity.ScreensaverEntityIconColor)}`);\n            }\n        }\n        let colorOff: Types.DataItemsOptions | undefined = undefined;\n        if (entity.ScreensaverEntityIconOff) {\n            if (typeof entity.ScreensaverEntityIconOff === 'string') {\n                colorOff = await this.getFieldAsDataItemConfig(entity.ScreensaverEntityIconOff);\n            } else if (Color.isRGB(entity.ScreensaverEntityIconOff)) {\n                colorOff = { type: 'const', constVal: entity.ScreensaverEntityIconOff };\n            } else if (Color.isScriptRGB(entity.ScreensaverEntityIconOff)) {\n                color = { type: 'const', constVal: Color.convertScriptRGBtoRGB(entity.ScreensaverEntityIconOff) };\n            } else {\n                this.adapter.log.error(`Invalid color value: ${JSON.stringify(entity.ScreensaverEntityIconOff)}`);\n            }\n        }\n        if (entity.ScreensaverEntityIconOn) {\n            result.data!.icon = {\n                true: { value: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityIconOn) },\n            };\n            if (color) {\n                result.data!.icon.true!.color = color;\n            }\n        }\n        if (entity.ScreensaverEntityIconOff) {\n            result.data!.icon = {\n                false: { value: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityIconOff) },\n            };\n            if (color) {\n                result.data!.icon.false!.color = colorOff;\n            }\n        }\n        if (entity.ScreensaverEntityOnText) {\n            result.data!.text = { true: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityOnText) };\n        } else if (entity.ScreensaverEntityText) {\n            result.data!.text = { true: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityText) };\n        }\n        if (entity.ScreensaverEntityOffText) {\n            result.data!.text = { false: await this.getFieldAsDataItemConfig(entity.ScreensaverEntityOffText) };\n        }\n        if (isPageItemDataItemsOptions(result)) {\n            return result;\n        }\n        throw new Error('Invalid data');\n    }\n    async getFieldAsDataItemConfig(possibleId: string, isTrigger: boolean = false): Promise<Types.DataItemsOptions> {\n        const state = possibleId.endsWith('.') ? undefined : await this.adapter.getForeignStateAsync(possibleId);\n\n        if (state !== undefined && state !== null) {\n            if (isTrigger) {\n                return { type: 'triggered', dp: possibleId };\n            }\n            return { type: 'state', dp: possibleId };\n        }\n        return { type: 'const', constVal: possibleId };\n    }\n}\n\nfunction isPageItemDataItemsOptions(obj: any): obj is typePageItem.PageItemDataItemsOptions {\n    return obj && obj.modeScr && obj.type === 'text' && obj.data && obj.data.entity2;\n}\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../../../src/lib/classes/Page.ts"],
  "sourcesContent": ["import { Panel } from '../controller/panel';\nimport { BaseClassPage, BaseClassTriggerdInterface } from '../controller/states-controller';\nimport * as pages from '../types/pages';\nimport { ButtonActionType, IncomingEvent, PopupType, isPopupType } from '../types/types';\nimport { ScreensaverConfig } from '../pages/screensaver';\nimport { PageItem } from '../pages/pageItem';\nimport { BaseClass } from './library';\nimport { cardTemplates } from '../templates/card';\nimport { deepAssign } from '../const/tools';\nimport { options } from 'axios';\nimport { config } from 'chai';\nimport { lightTemplates } from '../templates/light';\nimport { shutterTemplates } from '../templates/shutter';\nimport { textTemplates } from '../templates/text';\nimport { PageItemOptionsTemplate } from '../types/type-pageItem';\n\nexport interface PageConfigInterface {\n    config: pages.PageBaseConfig;\n    page: PageInterface;\n}\nexport type PageItemInterface = BaseClassTriggerdInterface & {\n    card: pages.PageTypeCards;\n    panel: Panel;\n    id: string;\n    parent: Page;\n};\n\nexport type PageInterface = BaseClassTriggerdInterface & {\n    card: pages.PageTypeCards;\n    panel: Panel;\n    id: string;\n    uniqueID: string;\n};\n\n//interface Page extends BaseClass | PageConfig\nexport type PageConfigAll = ScreensaverConfig | pages.PageBaseConfig;\n\nexport class Page extends BaseClassPage {\n    readonly card: pages.PageTypeCards;\n    readonly id: string;\n    readonly uniqueID: string;\n    config: pages.PageBaseConfig['config'];\n    dpInit: string = '';\n    //config: Card['config'];\n    constructor(card: PageInterface, pageItemsConfig: pages.PageBaseConfig | undefined) {\n        super(card, pageItemsConfig && pageItemsConfig.pageItems);\n        this.card = card.card;\n        this.id = card.id;\n        this.uniqueID = card.uniqueID;\n        this.dpInit = card.dpInit ?? '';\n        this.config = pageItemsConfig && pageItemsConfig.config;\n    }\n\n    async init(): Promise<void> {\n        if (this.pageItemConfig) {\n            for (let a = 0; a < this.pageItemConfig.length; a++) {\n                const options = this.pageItemConfig[a];\n                if (options === undefined) continue;\n                if ('template' in options && options.template) {\n                    let index = -1;\n                    let template: PageItemOptionsTemplate | undefined;\n                    for (const i of [textTemplates, shutterTemplates, lightTemplates]) {\n                        index = i.findIndex((a) => a.template === options!.template);\n                        if (index !== -1) {\n                            template = i[index];\n                            break;\n                        }\n                    }\n                    if (index === -1 || !template) {\n                        this.log.error('Dont find template ' + options.template);\n                        this.pageItemConfig[a] = undefined;\n                        continue;\n                    }\n                    if (\n                        template.adapter &&\n                        !options.dpInit.startsWith(template.adapter) &&\n                        !this.dpInit.startsWith(template.adapter)\n                    ) {\n                        this.log.error(\n                            'Missing dbInit or dbInit not starts with' +\n                                template.adapter +\n                                ' for template ' +\n                                options.template,\n                        );\n                        this.pageItemConfig[a] = undefined;\n                        continue;\n                    }\n                    const newTemplate = structuredClone(template) as Partial<PageItemOptionsTemplate>;\n                    delete newTemplate.adapter;\n                    if (options.type && options.type !== template.type) {\n                        this.log.error('Type: ' + options.type + 'is not equal with ' + template.type);\n                        this.pageItemConfig[a] = undefined;\n                        continue;\n                    }\n                    options.type = template.type;\n                    options.role = template.role;\n                    this.pageItemConfig[a] = deepAssign(newTemplate, options);\n                }\n            }\n        }\n    }\n\n    async onButtonEvent(event: IncomingEvent): Promise<void> {\n        this.log.warn(`Event received but no handler! ${JSON.stringify(event)}`);\n    }\n    sendType(): void {\n        this.sendToPanel(`pageType~${this.card}`);\n    }\n\n    static getPage(config: pages.PageBaseConfig, that: BaseClass): pages.PageBaseConfig {\n        if ('template' in config && config.template) {\n            let index = -1;\n            let template: pages.PageBaseConfigTemplate | undefined;\n            for (const i of [cardTemplates]) {\n                index = i.findIndex((a) => a.template === config.template);\n                if (index !== -1) {\n                    template = i[index];\n                    break;\n                }\n            }\n            if (index === -1 || !template) {\n                that.log.error('dont find template ' + config.template);\n                return config;\n            }\n            if (template.adapter && !config.dpInit.startsWith(template.adapter)) {\n                return config;\n            }\n            const newTemplate = structuredClone(template) as Partial<pages.PageBaseConfigTemplate>;\n            delete newTemplate.adapter;\n            if (config.card && config.card !== template.card) {\n                that.log.error(config.card + 'is not equal with ' + template.card);\n                return config;\n            }\n\n            config = deepAssign(newTemplate, config);\n        }\n        return config;\n    }\n    protected async onVisibilityChange(val: boolean): Promise<void> {\n        if (val) {\n            if (!this.pageItems && this.pageItemConfig) {\n                this.pageItems = [];\n                for (let a = 0; a < this.pageItemConfig.length; a++) {\n                    const config: Omit<PageItemInterface, 'pageItemsConfig'> = {\n                        name: 'PI',\n                        adapter: this.adapter,\n                        panel: this.panel,\n                        panelSend: this.panelSend,\n                        card: 'cardItemSpecial',\n                        id: `${this.id}?${a}`,\n                        parent: this,\n                    };\n                    this.pageItems[a] = PageItem.getPageItem(config, this.pageItemConfig[a]);\n                    this.pageItems[a] && (await this.pageItems[a]!.init());\n                }\n            }\n            this.sendType();\n            this.update();\n        } else {\n            if (this.pageItems) {\n                for (const item of this.pageItems) {\n                    item && (await item.delete());\n                }\n                this.pageItems = undefined;\n            }\n        }\n    }\n\n    protected getNavigation(): string {\n        return this.panel.navigation.buildNavigationString();\n    }\n\n    public async update(): Promise<void> {\n        this.adapter.log.warn(\n            `<- instance of [${Object.getPrototypeOf(this)}] update() is not defined or call super.onStateTrigger()`,\n        );\n    }\n\n    public async onPopupRequest(\n        id: number | string,\n        popup: PopupType | undefined,\n        action: ButtonActionType | undefined | string,\n        value: string | undefined,\n        _event: IncomingEvent | null = null,\n    ): Promise<void> {\n        if (!this.pageItems) return;\n        this.log.debug(`Trigger from popupThermo 1 `);\n        const i = typeof id === 'number' ? id : parseInt(id);\n        const item = this.pageItems[i];\n        if (!item) return;\n        let msg: string | null = null;\n        if (action && value !== undefined && (await item.onCommand(action, value))) {\n            return;\n        } else if (isPopupType(popup) && action !== 'bExit') {\n            msg = await item.GeneratePopup(popup);\n        }\n        if (msg !== null) {\n            this.sleep = true;\n            this.sendToPanel(msg);\n        }\n    }\n}\n\nexport function isMediaButtonActionType(F: MediaButtonActionType | string): F is MediaButtonActionType {\n    switch (F) {\n        case 'media-back':\n        case 'media-pause':\n        case 'media-next':\n        case 'media-shuffle':\n        case 'volumeSlider':\n        case 'mode-speakerlist':\n        case 'mode-playlist':\n        case 'mode-tracklist':\n        case 'mode-repeat':\n        case 'mode-equalizer':\n        case 'mode-seek':\n        case 'mode-crossfade':\n        case 'mode-favorites':\n        case 'mode-insel':\n        case 'media-OnOff':\n        case 'button':\n            return true;\n    }\n    console.error(`${F} isMediaButtonActionType === false`);\n    return false;\n}\ntype MediaButtonActionType = Extract<\n    ButtonActionType,\n    | 'media-back'\n    | 'media-pause'\n    | 'media-next'\n    | 'media-shuffle'\n    | 'volumeSlider'\n    | 'mode-speakerlist'\n    | 'mode-playlist'\n    | 'mode-tracklist'\n    | 'mode-repeat'\n    | 'mode-equalizer'\n    | 'mode-seek'\n    | 'mode-crossfade'\n    | 'mode-favorites'\n    | 'mode-insel'\n    | 'media-OnOff'\n    | 'button'\n>;\n\n/*export type ButtonActionType =\n    | 'bExit'\n    | 'bUp'\n    | 'bNext'\n    | 'bSubNext'\n    | 'bPrev'\n    | 'bSubPrev'\n    | 'bHome'\n    | 'notifyAction'\n    | 'OnOff'\n    | 'button'\n    | 'up'\n    | 'stop'\n    | 'down'\n    | 'positionSlider'\n    | 'tiltOpen'\n    | 'tiltStop'\n    | 'tiltSlider'\n    | 'tiltClose'\n    | 'brightnessSlider'\n    | 'colorTempSlider'\n    | 'colorWheel'\n    | 'tempUpd'\n    | 'tempUpdHighLow'\n    | 'media-back'\n    | 'media-pause'\n    | 'media-next'\n    | 'media-shuffle'\n    | 'volumeSlider'\n    | 'mode-speakerlist'\n    | 'mode-playlist'\n    | 'mode-tracklist'\n    | 'mode-repeat'\n    | 'mode-equalizer'\n    | 'mode-seek'\n    | 'mode-crossfade'\n    | 'mode-favorites'\n    | 'mode-insel'\n    | 'media-OnOff'\n    | 'timer-start'\n    | 'timer-pause'\n    | 'timer-cancle'\n    | 'timer-finish'\n    | 'hvac_action'\n    | 'mode-modus1'\n    | 'mode-modus2'\n    | 'mode-modus3'\n    | 'number-set'\n    | 'mode-preset_modes'\n    | 'A1'\n    | 'A2'\n    | 'A3'\n    | 'A4'\n    | 'D1'\n    | 'U1';*/\n"],
  "mappings": "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",
  "names": ["options", "a", "config"]
}

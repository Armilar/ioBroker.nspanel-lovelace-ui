{
  "version": 3,
  "sources": ["../../../src/lib/const/Color.ts"],
  "sourcesContent": ["import { colord, extend } from 'colord';\nimport namesPlugin from 'colord/plugins/names';\nimport mixPlugin from 'colord/plugins/mix';\n\nextend([namesPlugin, mixPlugin]);\nexport type RGB = {\n    r: number;\n    g: number;\n    b: number;\n};\n\nexport const HMIOff: RGB = { r: 68, g: 115, b: 158 }; // Blue-Off - Original Entity Off\nexport const HMIOn: RGB = { r: 3, g: 169, b: 244 }; // Blue-On\nexport const HMIDark: RGB = { r: 29, g: 29, b: 29 }; // Original Background Color\nexport const Off: RGB = { r: 253, g: 128, b: 0 }; // Orange-Off - nicer color transitions\nexport const On: RGB = { r: 253, g: 216, b: 53 };\nexport const MSRed: RGB = { r: 251, g: 105, b: 98 };\nexport const MSYellow: RGB = { r: 255, g: 235, b: 156 };\nexport const MSGreen: RGB = { r: 121, g: 222, b: 121 };\nexport const Red: RGB = { r: 255, g: 0, b: 0 };\nexport const White: RGB = { r: 255, g: 255, b: 255 };\nexport const Yellow: RGB = { r: 255, g: 255, b: 0 };\nexport const Green: RGB = { r: 0, g: 255, b: 0 };\nexport const Blue: RGB = { r: 0, g: 0, b: 255 };\nexport const DarkBlue: RGB = { r: 0, g: 0, b: 136 };\nexport const Gray: RGB = { r: 136, g: 136, b: 136 };\nexport const Black: RGB = { r: 0, g: 0, b: 0 };\nexport const Cyan: RGB = { r: 0, g: 255, b: 255 };\nexport const Magenta: RGB = { r: 255, g: 0, b: 255 };\nexport const colorSpotify: RGB = { r: 30, g: 215, b: 96 };\nexport const colorAlexa: RGB = { r: 49, g: 196, b: 243 };\nexport const colorSonos: RGB = { r: 216, g: 161, b: 88 };\nexport const colorRadio: RGB = { r: 255, g: 127, b: 0 };\nexport const BatteryFull: RGB = { r: 96, g: 176, b: 62 };\nexport const BatteryEmpty: RGB = { r: 179, g: 45, b: 25 };\n\n//Menu Icon Colors\nexport const Menu: RGB = { r: 150, g: 150, b: 100 };\nexport const MenuLowInd: RGB = { r: 255, g: 235, b: 156 };\nexport const MenuHighInd: RGB = { r: 251, g: 105, b: 98 };\n\n//Dynamische Indikatoren (Abstufung gr\u00FCn nach gelb nach rot)\nexport const colorScale0: RGB = { r: 99, g: 190, b: 123 };\nexport const colorScale1: RGB = { r: 129, g: 199, b: 126 };\nexport const colorScale2: RGB = { r: 161, g: 208, b: 127 };\nexport const colorScale3: RGB = { r: 129, g: 217, b: 126 };\nexport const colorScale4: RGB = { r: 222, g: 226, b: 131 };\nexport const colorScale5: RGB = { r: 254, g: 235, b: 132 };\nexport const colorScale6: RGB = { r: 255, g: 210, b: 129 };\nexport const colorScale7: RGB = { r: 251, g: 185, b: 124 };\nexport const colorScale8: RGB = { r: 251, g: 158, b: 117 };\nexport const colorScale9: RGB = { r: 248, g: 131, b: 111 };\nexport const colorScale10: RGB = { r: 248, g: 105, b: 107 };\n\n//Screensaver Default Theme Colors\nexport const scbackground: RGB = { r: 0, g: 0, b: 0 };\nexport const scbackgroundInd1: RGB = { r: 255, g: 0, b: 0 };\nexport const scbackgroundInd2: RGB = { r: 121, g: 222, b: 121 };\nexport const scbackgroundInd3: RGB = { r: 255, g: 255, b: 0 };\nexport const sctime: RGB = { r: 255, g: 255, b: 255 };\nexport const sctimeAMPM: RGB = { r: 255, g: 255, b: 255 };\nexport const scdate: RGB = { r: 255, g: 255, b: 255 };\nexport const sctMainIcon: RGB = { r: 255, g: 255, b: 255 };\nexport const sctMainText: RGB = { r: 255, g: 255, b: 255 };\nexport const sctForecast1: RGB = { r: 255, g: 255, b: 255 };\nexport const sctForecast2: RGB = { r: 255, g: 255, b: 255 };\nexport const sctForecast3: RGB = { r: 255, g: 255, b: 255 };\nexport const sctForecast4: RGB = { r: 255, g: 255, b: 255 };\nexport const sctF1Icon: RGB = { r: 255, g: 235, b: 156 };\nexport const sctF2Icon: RGB = { r: 255, g: 235, b: 156 };\nexport const sctF3Icon: RGB = { r: 255, g: 235, b: 156 };\nexport const sctF4Icon: RGB = { r: 255, g: 235, b: 156 };\nexport const sctForecast1Val: RGB = { r: 255, g: 255, b: 255 };\nexport const sctForecast2Val: RGB = { r: 255, g: 255, b: 255 };\nexport const sctForecast3Val: RGB = { r: 255, g: 255, b: 255 };\nexport const sctForecast4Val: RGB = { r: 255, g: 255, b: 255 };\nexport const scbar: RGB = { r: 255, g: 255, b: 255 };\nexport const sctMainIconAlt: RGB = { r: 255, g: 255, b: 255 };\nexport const sctMainTextAlt: RGB = { r: 255, g: 255, b: 255 };\nexport const sctTimeAdd: RGB = { r: 255, g: 255, b: 255 };\n\n//Auto-Weather-Colors\nexport const swClearNight: RGB = { r: 150, g: 150, b: 100 };\nexport const swCloudy: RGB = { r: 75, g: 75, b: 75 };\nexport const swExceptional: RGB = { r: 255, g: 50, b: 50 };\nexport const swFog: RGB = { r: 150, g: 150, b: 150 };\nexport const swHail: RGB = { r: 200, g: 200, b: 200 };\nexport const swLightning: RGB = { r: 200, g: 200, b: 0 };\nexport const swLightningRainy: RGB = { r: 200, g: 200, b: 150 };\nexport const swPartlycloudy: RGB = { r: 150, g: 150, b: 150 };\nexport const swPouring: RGB = { r: 50, g: 50, b: 255 };\nexport const swRainy: RGB = { r: 100, g: 100, b: 255 };\nexport const swSnowy: RGB = { r: 150, g: 150, b: 150 };\nexport const swSnowyRainy: RGB = { r: 150, g: 150, b: 255 };\nexport const swSunny: RGB = { r: 255, g: 255, b: 0 };\nexport const swWindy: RGB = { r: 150, g: 150, b: 150 };\n\n//const defaultOnColor = HMIOn;\n//const defaultOffColor = HMIOff;\n\nexport function rgb_dec565(rgb: RGB): number {\n    //return ((Math.floor(rgb.red / 255 * 31) << 11) | (Math.floor(rgb.green / 255 * 63) << 5) | (Math.floor(rgb.blue / 255 * 31)));\n    return ((rgb.r >> 3) << 11) | ((rgb.g >> 2) << 5) | (rgb.b >> 3);\n}\n\nexport function decToRgb(decimal: number): RGB {\n    return {\n        r: ((decimal >> 11) << 3) & 0xff,\n        g: ((decimal >> 5) << 2) & 0xff,\n        b: (decimal << 3) & 0xff,\n    };\n}\n\nexport function rgbHexToObject(rgb: string): RGB {\n    const result: RGB = { r: 0, g: 0, b: 0 };\n    if (rgb.startsWith('#') && rgb.length == 7) {\n        result.r = parseInt(rgb.substring(1, 3), 16);\n        result.g = parseInt(rgb.substring(3, 5), 16);\n        result.b = parseInt(rgb.substring(5), 16);\n    }\n    return result;\n}\n\nexport function scale(\n    number: number,\n    inMax: number | null,\n    inMin: number | null,\n    outMin: number,\n    outMax: number,\n): number {\n    if (inMin === null || inMax === null) return number;\n    return outMax + outMin - (((number - inMax) * (outMax - outMin)) / (inMin - inMax) + outMin);\n}\n\nexport function HandleColorScale(valueScaletemp: string): number {\n    switch (valueScaletemp) {\n        case '0':\n            return rgb_dec565(colorScale0);\n        case '1':\n            return rgb_dec565(colorScale1);\n        case '2':\n            return rgb_dec565(colorScale2);\n        case '3':\n            return rgb_dec565(colorScale3);\n        case '4':\n            return rgb_dec565(colorScale4);\n        case '5':\n            return rgb_dec565(colorScale5);\n        case '6':\n            return rgb_dec565(colorScale6);\n        case '7':\n            return rgb_dec565(colorScale7);\n        case '8':\n            return rgb_dec565(colorScale8);\n        case '9':\n            return rgb_dec565(colorScale9);\n        case '10':\n            return rgb_dec565(colorScale10);\n        default:\n            return rgb_dec565(colorScale10);\n    }\n}\nexport function Interpolate(color1: RGB, color2: RGB, fraction: number): RGB {\n    const r: number = InterpolateNum(color1.r, color2.r, fraction);\n    const g: number = InterpolateNum(color1.g, color2.g, fraction);\n    const b: number = InterpolateNum(color1.b, color2.b, fraction);\n    return { r: Math.round(r), g: Math.round(g), b: Math.round(b) };\n}\n\n/**\n *\n * @param c1 from this color\n * @param c2 to this\n * @param r 0-1 mix value\n * @returns RGB\n */\nexport function mixColor(c1: RGB, c2: RGB, r: number): RGB {\n    return colord(c1).mix(c2, r).toRgb();\n}\nexport function InterpolateNum(d1: number, d2: number, fraction: number): number {\n    return d1 + (d2 - d1) * fraction;\n}\n\nexport function darken(c: RGB, s: number): RGB {\n    s = scale(s, 0, 1, 0, 0.6);\n    return colord(c).darken(s).toRgb();\n}\n/**\n * Convert radians to degrees\n * @param rad radians to convert, expects rad in range +/- PI per Math.atan2\n * @returns {number} degrees equivalent of rad\n */\nexport function rad2deg(rad: number): number {\n    return (360 + (180 * rad) / Math.PI) % 360;\n}\n\nexport function ColorToHex(color: number): string {\n    const hexadecimal: string = color.toString(16);\n    return hexadecimal.length == 1 ? '0' + hexadecimal : hexadecimal;\n}\n\nexport function ConvertRGBtoHex(red: number, green: number, blue: number): string {\n    return '#' + ColorToHex(red) + ColorToHex(green) + ColorToHex(blue);\n}\nexport function ConvertWithColordtoRgb(colorName: string): RGB {\n    return colord(colorName).toRgb();\n}\nexport function ConvertHexToRgb(hex: string): RGB {\n    return {\n        r: parseInt(hex.substring(1, 3), 16),\n        g: parseInt(hex.substring(3, 5), 16),\n        b: parseInt(hex.substring(5, 7), 16),\n    };\n}\n\n/**\n * Convert h,s,v values to r,g,b\n * @param hue in range [0, 360]\n * @param saturation in range 0 to 1\n * @param value in range 0 to 1\n * @returns {[number, number, number]} [r, g,b] in range 0 to 255\n */\nexport function hsv2rgb(hue: number, saturation: number, value: number): [number, number, number] {\n    hue /= 60;\n    const chroma = value * saturation;\n    const x = chroma * (1 - Math.abs((hue % 2) - 1));\n    const rgb: [number, number, number] =\n        hue <= 1\n            ? [chroma, x, 0]\n            : hue <= 2\n              ? [x, chroma, 0]\n              : hue <= 3\n                ? [0, chroma, x]\n                : hue <= 4\n                  ? [0, x, chroma]\n                  : hue <= 5\n                    ? [x, 0, chroma]\n                    : [chroma, 0, x];\n\n    return rgb.map((v) => (v + value - chroma) * 255) as [number, number, number];\n}\nexport function hsv2RGB(hue: number, saturation: number, value: number): RGB {\n    const arr = hsv2rgb(hue, saturation, value);\n    return { r: arr[0], g: arr[1], b: arr[2] };\n}\n\nexport function hsvtodec(hue: number | null, saturation: number, value: number): string | null {\n    if (hue === null) return null;\n    const result = hsv2rgb(hue, saturation, value);\n    return String(rgb_dec565({ r: result[0], g: result[1], b: result[2] }));\n}\n\nexport function resultToRgb(r: string): RGB {\n    const arr = r.split('|');\n    return pos_to_color(parseInt(arr[0]), parseInt(arr[1]));\n}\nexport function getHue(red: number, green: number, blue: number): number {\n    const min = Math.min(Math.min(red, green), blue);\n    const max = Math.max(Math.max(red, green), blue);\n\n    if (min == max) {\n        return 0;\n    }\n\n    let hue = 0;\n    if (max == red) {\n        hue = (green - blue) / (max - min);\n    } else if (max == green) {\n        hue = 2 + (blue - red) / (max - min);\n    } else {\n        hue = 4 + (red - green) / (max - min);\n    }\n\n    hue = hue * 60;\n    if (hue < 0) hue = hue + 360;\n\n    return Math.round(hue);\n}\n\nexport function pos_to_color(x: number, y: number): RGB {\n    let r = 160 / 2;\n    x = Math.round(((x - r) / r) * 100) / 100;\n    y = Math.round(((r - y) / r) * 100) / 100;\n\n    r = Math.sqrt(x * x + y * y);\n    let sat = 0;\n    if (r > 1) {\n        sat = 0;\n    } else {\n        sat = r;\n    }\n\n    const hsv = rad2deg(Math.atan2(y, x));\n    const rgb = hsv2rgb(hsv, sat, 1);\n\n    return { r: Math.round(rgb[0]), g: Math.round(rgb[1]), b: Math.round(rgb[2]) };\n}\n\n/**\n *\n * @param red\n * @param green\n * @param blue\n * @returns\n */\nexport function rgb_to_cie(red: number, green: number, blue: number): string {\n    //Apply a gamma correction to the RGB values, which makes the color more vivid and more the like the color displayed on the screen of your device\n    const vred = red > 0.04045 ? Math.pow((red + 0.055) / (1.0 + 0.055), 2.4) : red / 12.92;\n    const vgreen = green > 0.04045 ? Math.pow((green + 0.055) / (1.0 + 0.055), 2.4) : green / 12.92;\n    const vblue = blue > 0.04045 ? Math.pow((blue + 0.055) / (1.0 + 0.055), 2.4) : blue / 12.92;\n\n    //RGB values to XYZ using the Wide RGB D65 conversion formula\n    const X = vred * 0.664511 + vgreen * 0.154324 + vblue * 0.162028;\n    const Y = vred * 0.283881 + vgreen * 0.668433 + vblue * 0.047685;\n    const Z = vred * 0.000088 + vgreen * 0.07231 + vblue * 0.986039;\n\n    //Calculate the xy values from the XYZ values\n    const ciex = (X / (X + Y + Z)).toFixed(4);\n    const ciey = (Y / (X + Y + Z)).toFixed(4);\n    const cie = '[' + ciex + ',' + ciey + ']';\n\n    return cie;\n}\nexport function isRGB(F: RGB | any): F is RGB {\n    return typeof F == 'object' && 'r' in F && 'b' in F && 'g' in F;\n}\nexport function isOldRGB(F: RGB | any): F is RGB {\n    return typeof F == 'object' && 'r' in F && 'b' in F && 'g' in F;\n}\n/*\nexport function getBlendedColorfunction(color: RGB | null, percent: number) {\n    // limit percent between 0 and 1.\n    // this percent is the amount of 'color' rgb components to use\n    let p = percent > 0 ? percent : 0;\n    p = p < 1 ? p : 1;\n\n    // amount of 'this' rgb components to use\n    const tp = 1 - p;\n\n    // blend the colors\n    const red = Math.round(tp * this.r + p * color.r);\n    const green = Math.round(tp * this.g + p * color.g);\n    const blue = Math.round(tp * this.b + p * color.b);\n\n    // return new color object\n    return (red, green, blue);\n} // getBlendedColor ()\nvar newColor = c.getBlendedColor(new Color('#ffffff'), 0.50);*/\nexport const kelvinToRGB: { [key: number]: RGB } = {\n    1000: { r: 255, g: 56, b: 0 },\n    1100: { r: 255, g: 71, b: 0 },\n    1200: { r: 255, g: 83, b: 0 },\n    1300: { r: 255, g: 93, b: 0 },\n    1400: { r: 255, g: 101, b: 0 },\n    1500: { r: 255, g: 109, b: 0 },\n    1600: { r: 255, g: 115, b: 0 },\n    1700: { r: 255, g: 121, b: 0 },\n    1800: { r: 255, g: 126, b: 0 },\n    1900: { r: 255, g: 131, b: 0 },\n    2000: { r: 255, g: 138, b: 18 },\n    2100: { r: 255, g: 142, b: 33 },\n    2200: { r: 255, g: 147, b: 44 },\n    2300: { r: 255, g: 152, b: 54 },\n    2400: { r: 255, g: 157, b: 63 },\n    2500: { r: 255, g: 161, b: 72 },\n    2600: { r: 255, g: 165, b: 79 },\n    2700: { r: 255, g: 169, b: 87 },\n    2800: { r: 255, g: 173, b: 94 },\n    2900: { r: 255, g: 177, b: 101 },\n    3000: { r: 255, g: 180, b: 107 },\n    3100: { r: 255, g: 184, b: 114 },\n    3200: { r: 255, g: 187, b: 120 },\n    3300: { r: 255, g: 190, b: 126 },\n    3400: { r: 255, g: 193, b: 132 },\n    3500: { r: 255, g: 196, b: 137 },\n    3600: { r: 255, g: 199, b: 143 },\n    3700: { r: 255, g: 201, b: 148 },\n    3800: { r: 255, g: 204, b: 153 },\n    3900: { r: 255, g: 206, b: 159 },\n    4000: { r: 255, g: 209, b: 163 },\n    4100: { r: 255, g: 211, b: 168 },\n    4200: { r: 255, g: 213, b: 173 },\n    4300: { r: 255, g: 215, b: 177 },\n    4400: { r: 255, g: 217, b: 182 },\n    4500: { r: 255, g: 219, b: 186 },\n    4600: { r: 255, g: 221, b: 190 },\n    4700: { r: 255, g: 223, b: 194 },\n    4800: { r: 255, g: 225, b: 198 },\n    4900: { r: 255, g: 227, b: 202 },\n    5000: { r: 255, g: 228, b: 206 },\n    5100: { r: 255, g: 230, b: 210 },\n    5200: { r: 255, g: 232, b: 213 },\n    5300: { r: 255, g: 233, b: 217 },\n    5400: { r: 255, g: 235, b: 220 },\n    5500: { r: 255, g: 236, b: 224 },\n    5600: { r: 255, g: 238, b: 227 },\n    5700: { r: 255, g: 239, b: 230 },\n    5800: { r: 255, g: 240, b: 233 },\n    5900: { r: 255, g: 242, b: 236 },\n    6000: { r: 255, g: 243, b: 239 },\n    6100: { r: 255, g: 244, b: 242 },\n    6200: { r: 255, g: 245, b: 245 },\n    6300: { r: 255, g: 246, b: 247 },\n    6400: { r: 255, g: 248, b: 251 },\n    6500: { r: 255, g: 249, b: 253 },\n    6600: { r: 254, g: 249, b: 255 },\n    6700: { r: 252, g: 247, b: 255 },\n    6800: { r: 249, g: 246, b: 255 },\n    6900: { r: 247, g: 245, b: 255 },\n    7000: { r: 245, g: 243, b: 255 },\n    7100: { r: 243, g: 242, b: 255 },\n    7200: { r: 240, g: 241, b: 255 },\n    7300: { r: 239, g: 240, b: 255 },\n    7400: { r: 237, g: 239, b: 255 },\n    7500: { r: 235, g: 238, b: 255 },\n    7600: { r: 233, g: 237, b: 255 },\n    7700: { r: 231, g: 236, b: 255 },\n    7800: { r: 230, g: 235, b: 255 },\n    7900: { r: 228, g: 234, b: 255 },\n    8000: { r: 227, g: 233, b: 255 },\n    8100: { r: 225, g: 232, b: 255 },\n    8200: { r: 224, g: 231, b: 255 },\n    8300: { r: 222, g: 230, b: 255 },\n    8400: { r: 221, g: 230, b: 255 },\n    8500: { r: 220, g: 229, b: 255 },\n    8600: { r: 218, g: 229, b: 255 },\n    8700: { r: 217, g: 227, b: 255 },\n    8800: { r: 216, g: 227, b: 255 },\n    8900: { r: 215, g: 226, b: 255 },\n    9000: { r: 214, g: 225, b: 255 },\n    9100: { r: 212, g: 225, b: 255 },\n    9200: { r: 211, g: 224, b: 255 },\n    9300: { r: 210, g: 223, b: 255 },\n    9400: { r: 209, g: 223, b: 255 },\n    9500: { r: 208, g: 222, b: 255 },\n    9600: { r: 207, g: 221, b: 255 },\n    9700: { r: 207, g: 221, b: 255 },\n    9800: { r: 206, g: 220, b: 255 },\n    9900: { r: 205, g: 220, b: 255 },\n    10000: { r: 207, g: 218, b: 255 },\n    10100: { r: 207, g: 218, b: 255 },\n    10200: { r: 206, g: 217, b: 255 },\n    10300: { r: 205, g: 217, b: 255 },\n    10400: { r: 204, g: 216, b: 255 },\n    10500: { r: 204, g: 216, b: 255 },\n    10600: { r: 203, g: 215, b: 255 },\n    10700: { r: 202, g: 215, b: 255 },\n    10800: { r: 202, g: 214, b: 255 },\n    10900: { r: 201, g: 214, b: 255 },\n    11000: { r: 200, g: 213, b: 255 },\n    11100: { r: 200, g: 213, b: 255 },\n    11200: { r: 199, g: 212, b: 255 },\n    11300: { r: 198, g: 212, b: 255 },\n    11400: { r: 198, g: 212, b: 255 },\n    11500: { r: 197, g: 211, b: 255 },\n    11600: { r: 197, g: 211, b: 255 },\n    11700: { r: 197, g: 210, b: 255 },\n    11800: { r: 196, g: 210, b: 255 },\n    11900: { r: 195, g: 210, b: 255 },\n    12000: { r: 195, g: 209, b: 255 },\n};\n"],
  "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KAAK,GAAG,KAAK,GAAG,GAAG;AAAA,EAC9B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,GAAG;AAAA,EAC9B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,KAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,KAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,KAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,KAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,KAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,KAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,KAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAC/B,KAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAChC,MAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAChC,OAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AAAA,EAChC,MAAO,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI;AACpC;",
  "names": ["namesPlugin", "mixPlugin"]
}

{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageGrid.ts"],
  "sourcesContent": ["import { Page, PageInterface } from '../classes/Page';\nimport { getPayload, getPayloadArray } from '../const/tools';\nimport * as pages from '../types/pages';\nimport { IncomingEvent } from '../types/types';\nimport { PageItem } from './pageItem';\nimport { HMIOn, rgb_dec565 } from '../const/Color';\nimport { Icons } from '../const/icon_mapping';\n\nconst PageGridMessageDefault: pages.PageGridMessage = {\n    event: 'entityUpd',\n    headline: 'Page Grid',\n    navigation: 'button~bSubPrev~~~~~button~bSubNext~~~~',\n    options: ['~~~~~', '~~~~~', '~~~~~', '~~~~~', '~~~~~', '~~~~~'],\n};\nconst PageGrid2MessageDefault: pages.PageGridMessage = {\n    event: 'entityUpd',\n    headline: 'Page Grid',\n    navigation: 'button~bSubPrev~~~~~button~bSubNext~~~~',\n    options: ['~~~~~', '~~~~~', '~~~~~', '~~~~~', '~~~~~', '~~~~~', '~~~~~', '~~~~~'],\n};\nexport class PageGrid extends Page {\n    config: pages.PageBaseConfig['config'];\n    items: pages.PageBaseConfig['items'];\n    private maxItems: number;\n    private step: number = 0;\n    private headlinePos: number = 0;\n    private titelPos: number = 0;\n    private nextArrow: boolean = false;\n    tempItem: PageItem | undefined;\n\n    constructor(config: PageInterface, options: pages.PageBaseConfig) {\n        super(config, options);\n        this.config = options.config;\n        if (options.items && (options.items.card == 'cardGrid' || options.items.card == 'cardGrid2'))\n            this.items = options.items;\n        this.maxItems = this.card === 'cardGrid' ? 6 : 8;\n        this.minUpdateInterval = 2000;\n    }\n\n    async init(): Promise<void> {\n        const config = structuredClone(this.config);\n        // search states for mode auto\n        const tempConfig: Partial<pages.cardGridDataItems> =\n            this.enums || this.dpInit\n                ? await this.panel.statesControler.getDataItemsFromAuto(this.dpInit, config, undefined, this.enums)\n                : config;\n        // create Dataitems\n        //this.log.debug(JSON.stringify(tempConfig));\n        const tempItem: Partial<pages.cardGridDataItems> = await this.panel.statesControler.createDataItems(\n            tempConfig,\n            this,\n        );\n        this.items = tempItem as pages.cardGridDataItems;\n        // set card because we lose it\n        this.items.card = this.card as 'cardGrid' | 'cardGrid2';\n        await super.init();\n    }\n\n    public async update(): Promise<void> {\n        if (!this.visibility) return;\n        const message: Partial<pages.PageGridMessage> = {};\n        message.options = [];\n        if (!this.items || (this.items.card !== 'cardGrid' && this.items.card !== 'cardGrid2')) return;\n        if (this.pageItems) {\n            let maxItems = this.maxItems;\n            let a = 0;\n            if (this.pageItems.length > maxItems) {\n                a = maxItems * this.step;\n                maxItems = a + maxItems;\n            }\n            let b = 0;\n            for (; a < maxItems; a++) {\n                const temp = this.pageItems[a];\n                message.options[b++] = temp ? await temp.getPageItemPayload() : '~~~~~';\n            }\n        }\n        message.headline = this.library.getTranslation(\n            (this.items && this.items.data.headline && (await this.items.data.headline.getString())) ?? '',\n        );\n        message.navigation = this.getNavigation();\n        const msg: pages.PageGridMessage = Object.assign(\n            this.card === 'cardGrid' ? PageGridMessageDefault : PageGrid2MessageDefault,\n            message,\n        );\n\n        this.sendToPanel(this.getMessage(msg));\n    }\n    private getMessage(message: pages.PageGridMessage): string {\n        return getPayload('entityUpd', message.headline, message.navigation, getPayloadArray(message.options));\n    }\n    protected async onStateTrigger(): Promise<void> {\n        await this.update();\n    }\n    async onButtonEvent(_event: IncomingEvent): Promise<void> {\n        //if (event.page && event.id && this.pageItems) {\n        //    this.pageItems[event.id as any].setPopupAction(event.action, event.opt);\n        //}\n    }\n    goLeft(): void {\n        if (--this.step < 0) {\n            this.step = 0;\n            this.panel.navigation.goLeft();\n        } else this.update();\n    }\n    goRight(): void {\n        const length = this.pageItems ? this.pageItems.length : 0;\n        if (++this.step * this.maxItems >= length) {\n            this.step--;\n            this.panel.navigation.goRight();\n        } else this.update();\n    }\n    protected getNavigation(): string {\n        const length = this.pageItems ? this.pageItems.length : 0;\n        if (this.maxItems >= length) {\n            return super.getNavigation();\n        }\n        let left = '';\n        let right = '';\n        if (this.step <= 0) {\n            left = this.panel.navigation.buildNavigationString('left');\n        }\n        if ((this.step + 1) * this.maxItems >= length) {\n            right = this.panel.navigation.buildNavigationString('right');\n        }\n        if (!left)\n            left = getPayload(\n                'button',\n                'bSubPrev',\n                Icons.GetIcon('arrow-left-bold'),\n                String(rgb_dec565(HMIOn)),\n                '',\n                '',\n            );\n\n        if (!right)\n            right = getPayload(\n                'button',\n                'bSubNext',\n                Icons.GetIcon('arrow-right-bold'),\n                String(rgb_dec565(HMIOn)),\n                '',\n                '',\n            );\n\n        return getPayload(left, right);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../../../src/lib/pages/pageItem.ts"],
  "sourcesContent": ["import * as Color from '../const/Color';\nimport { Page, PageItemInterface } from '../classes/Page';\nimport {\n    PageItemDataItems,\n    MessageItem,\n    entityUpdateDetailMessage,\n    PageItemDataItemsOptions,\n    listCommand,\n    islistCommandUnion,\n} from '../types/type-pageItem';\nimport * as tools from '../const/tools';\nimport { PopupType } from '../types/types';\nimport { Panel } from '../controller/panel';\nimport { BaseClassTriggerd } from '../controller/states-controller';\nimport { RGB } from '../types/Color';\nimport { Icons } from '../const/icon_mapping';\nimport { Dataitem } from '../classes/data-item';\n\n//light, shutter, delete, text, button, switch, number,input_sel, timer und fan types\nexport class PageItem extends BaseClassTriggerd {\n    defaultOnColor = Color.White;\n    defaultOffColor = Color.Blue;\n    config: PageItemDataItemsOptions | undefined;\n    dataItems: PageItemDataItems | undefined;\n    panel: Panel;\n    id: string;\n    lastPopupType: PopupType | undefined = undefined;\n    parent: Page | undefined;\n    constructor(config: Omit<PageItemInterface, 'pageItemsConfig'>, options: PageItemDataItemsOptions | undefined) {\n        super({ ...config });\n        this.panel = config.panel;\n        this.id = config.id;\n        this.config = options;\n        this.parent = options && config.parent;\n    }\n\n    async init(): Promise<void> {\n        if (!this.config) return;\n        const config = { ...this.config };\n        // search states for mode auto\n        const tempConfig: Partial<PageItemDataItemsOptions['data']> =\n            this.config.initMode === 'auto' && this.config.dpInit\n                ? await this.panel.statesControler.getDataItemsFromAuto(this.config.dpInit, config.data)\n                : config.data;\n        // create Dataitems\n        //this.log.debug(JSON.stringify(tempConfig));\n        const tempItem: PageItemDataItems['data'] = (await this.panel.statesControler.createDataItems(\n            tempConfig,\n            this,\n        )) as PageItemDataItems['data'];\n        this.dataItems = { ...config, data: tempItem } as PageItemDataItems;\n    }\n\n    async getPageItemPayload(): Promise<string> {\n        await this.controller.statesControler.activateTrigger(this);\n        this.lastPopupType = undefined;\n        if (this.dataItems && this.config) {\n            this.visibility = false;\n            this.triggerParent = true;\n            const entry = this.dataItems;\n            const message: Partial<MessageItem> = {};\n            message.intNameEntity = this.id;\n            switch (entry.type) {\n                case 'light': {\n                    const item = entry.data;\n                    message.type = 'light';\n\n                    const v = await tools.getValueEntryBoolean(item.entity1);\n                    const dimmer = (item.dimmer && item.dimmer.value && (await item.dimmer.value.getNumber())) ?? null;\n                    let rgb: RGB | null =\n                        (await tools.getRGBfromRGBThree(item)) ??\n                        (item.color && item.color.true && (await item.color.true.getRGBValue())) ??\n                        null;\n                    const nhue = (item.hue && (await item.hue.getNumber())) ?? null;\n                    if (rgb === null && nhue) rgb = Color.hsv2RGB(nhue, 1, 1) ?? null;\n                    message.icon = await tools.getIconEntryValue(item.icon, v, '', '');\n                    message.iconColor =\n                        (rgb && (await tools.GetIconColor(rgb, dimmer !== null ? (dimmer > 20 ? dimmer : 20) : v))) ??\n                        (await tools.GetIconColor(item.icon, dimmer !== null ? (dimmer > 20 ? dimmer : 20) : v)) ??\n                        '';\n                    if (v) {\n                        message.optionalValue = '1';\n                    } else {\n                        message.optionalValue = '0';\n                    }\n                    message.displayName = (await tools.getEntryTextOnOff(item.text1, v)) ?? message.displayName;\n                    return tools.getItemMesssage(message);\n                    break;\n                }\n                case 'shutter': {\n                    const item = entry.data;\n\n                    message.type = 'shutter';\n\n                    const value = await tools.getValueEntryNumber(item.entity1);\n                    if (value === null) {\n                        this.log.warn(`Entity ${this.config.role} has no value!`);\n                        break;\n                    }\n                    message.icon = await tools.getIconEntryValue(item.icon, value < 40, 'window-open');\n                    message.iconColor = await tools.getIconEntryColor(item.icon, value < 40, Color.White);\n                    const optionalValue = item.valueList\n                        ? await item.valueList.getObject()\n                        : [\n                              Icons.GetIcon('arrow-up'), //up\n                              Icons.GetIcon('stop'), //stop\n                              Icons.GetIcon('arrow-down'), //down\n                              'enable', // up status\n                              'enable', // stop status\n                              'enable', // down status\n                          ];\n                    let optionalValueC =\n                        Array.isArray(optionalValue) && optionalValue.every((a) => typeof a === 'string')\n                            ? [...optionalValue]\n                            : ['', '', ''];\n                    optionalValueC = optionalValueC.splice(0, 3);\n                    optionalValueC.forEach((a, i) => {\n                        if (a) optionalValueC[i + 3] = 'enable';\n                        else {\n                            optionalValueC[i] = '';\n                            optionalValueC[i + 3] = 'disable';\n                        }\n                    });\n                    message.optionalValue = optionalValueC.join('|');\n                    message.displayName = (item.headline && (await item.headline.getString())) ?? '';\n                    message.displayName = this.library.getTranslation(message.displayName);\n                    return tools.getItemMesssage(message);\n                    break;\n                } /*\n                case 'text': {\n                    const item = entry.data;\n                    message.type = 'text';\n                    const t =\n                        this.config.role in template &&\n                        (template[this.config.role as keyof typeof template] as PageTypeUnionTemplate | undefined);\n                    if (!t) break;\n                    let value = t.data.entity1 ? await tools.getValueEntryBoolean(item.entity1) : null;\n                    if (value !== null) {\n                        // gate works revese true is closed -> invert value\n                        if (t.data.entity1 === 'invert') value = !value;\n                        let icon = '';\n                        message.iconColor = await tools.GetIconColor(item.icon, value ?? true ? true : false);\n\n                        icon = t.data.icon\n                            ? await tools.getIconEntryValue(\n                                  item.icon,\n                                  value,\n                                  t.data.icon.true.value,\n                                  t.data.icon.false.value,\n                              )\n                            : '';\n                        if (t.data.optionalData) {\n                            if (typeof t.data.optionalData === 'string') {\n                                const arr = t.data.optionalData.split('?');\n                                if (arr.length > 0) {\n                                    message.optionalValue = !value && arr.length > 1 ? arr[1] : arr[0];\n                                }\n                            } else\n                                message.optionalValue = this.library.getTranslation(\n                                    (await tools.getEntryTextOnOff(item.text, value)) ?? '',\n                                );\n                        }\n                        message.displayName =\n                            (t.data.text && (await tools.getEntryTextOnOff(item.text, value))) ?? message.displayName;\n                        message.icon = Icons.GetIcon(icon);\n                        return tools.getItemMesssage(message);\n                    } else {\n                        this.log.error(`Missing data value for ${this.name}-${this.id} role:${this.config.role}`);\n                    }\n                    this.log.debug(JSON.stringify(message));\n                    break;\n                }\n                case 'number': {\n                    const item = entry.data;\n                    break;\n                }*/\n                case 'button': {\n                    /**\n                     * Alles was einen Druckfl\u00E4che sein kann. D\n                     */\n                    const item = entry.data;\n\n                    if (item.entity1 && item.entity1.value) {\n                        /*let value;\n                        if (item.entity1.value.type === 'string') {\n                        } else if (item.entity1.value.type === 'number') {\n                        } else if (item.entity1.value.type === 'boolean') {\n                            value = await tools.getValueEntryBoolean(item.entity1);\n                        }\n                        if (value === undefined) break;\n*/\n                        message.optionalValue = !!(item.setValue1 && (await item.setValue1.getBoolean())) ? '0' : '1';\n                        message.displayName =\n                            (await tools.getEntryTextOnOff(item.text, message.optionalValue === '1')) ?? 'test1';\n\n                        message.icon = await tools.getIconEntryValue(\n                            item.icon,\n                            message.optionalValue === '1',\n                            'home',\n                            'account',\n                        );\n                        message.iconColor = await tools.GetIconColor(item.icon, message.optionalValue === '1');\n                        return tools.getPayload(\n                            'button',\n                            message.intNameEntity,\n                            message.icon,\n                            message.iconColor,\n                            message.displayName,\n                            message.optionalValue,\n                        );\n                    }\n                    break;\n                }\n\n                case 'input_sel': {\n                    const item = entry.data;\n                    message.type = 'input_sel';\n                    const value =\n                        (await tools.getValueEntryNumber(item.entityInSel)) ??\n                        (await tools.getValueEntryBoolean(item.entityInSel));\n                    message.icon = await tools.getIconEntryValue(item.icon, !!(value ?? true), 'gesture-tap-button');\n\n                    message.iconColor =\n                        (await tools.GetIconColor(item.icon, value ?? true, 0, 100, Color.HMIOff)) ?? Color.HMIOn;\n\n                    message.optionalValue = (await tools.getEntryTextOnOff(item.text, !!value)) ?? 'PRESS';\n                    this.log.debug(JSON.stringify(message));\n                    return tools.getItemMesssage(message);\n\n                    break;\n                }\n                //case 'switch':\n                /*case 'volumeGroup': {\n                break;\n            }\n            case 'volume': {\n                break;\n            }\n            case 'info':\n            case 'humidity':\n            case 'temperature':\n            case 'value.temperature':\n            case 'value.humidity':\n            case 'sensor.door':\n            case 'sensor.window':\n            case 'thermostat': {\n                break;\n            }\n            case 'warning': {\n                break;\n            }\n            case 'ct': {\n                break;\n            }\n            case 'cie': {\n                break;\n            }\n            case 'motion': {\n                message.type = 'text';\n                const value = await tools.getValueEntryBoolean(item.data.entity1);\n                if (value !== null) {\n                    message.iconColor = await tools.GetIconColor(item.data.icon, value ?? true ? true : false);\n                    message.icon = await tools.getIconEntryValue(item.data.icon, value, 'motion-sensor');\n                    message.optionalValue = tools.getTranslation(this.library, value ? 'on' : 'off');\n                    message.displayName = (await tools.getEntryTextOnOff(item.data.text, value)) ?? message.displayName;\n                    return this.getItemMesssage(message);\n                } else {\n                    this.log.error(`Missing data value for ${this.name}-${id} role:${item.role}`);\n                }\n                break;\n            }\n\n            case 'button': {\n                let value = (item.data.setValue1 && (await item.data.setValue1.getBoolean())) ?? null;\n                if (value === null && item.role === 'buttonSensor') value = true;\n                if (value !== null) {\n                    message.type = item.role === 'buttonSensor' ? 'input_sel' : 'button';\n                    message.iconColor = await tools.GetIconColor(item.data.icon, value);\n                    message.icon = await tools.getIconEntryValue(item.data.icon, value, 'gesture-tap-button');\n                    message.displayName = (await tools.getEntryTextOnOff(item.data.text, value)) ?? '';\n                    message.optionalValue = (await tools.getValueEntryString(item.data.entity1)) ?? 'PRESS';\n                    return this.getItemMesssage(message);\n                } else {\n                    this.log.error(`Missing set value for ${this.name}-${id} role:${item.role}`);\n                }\n                break;\n            }\n            case 'timer': {\n                const value = (item.data.setValue1 && (await item.data.setValue1.getNumber())) ?? null;\n                if (value !== null) {\n                    message.type = 'timer';\n                    message.iconColor = await tools.GetIconColor(item.data.icon, value);\n                    message.icon = await tools.getIconEntryValue(item.data.icon, true, 'gesture-tap-button');\n                    message.optionalValue = (await tools.getEntryTextOnOff(item.data.text, true)) ?? 'PRESS';\n                    return this.getItemMesssage(message);\n                } else {\n                    this.log.error(`Missing set value for ${this.name}-${id} role:${item.role}`);\n                }\n                break;\n            }\n            case 'value.alarmtime': {\n                const value = (item.data.setValue1 && (await item.data.setValue1.getNumber())) ?? null;\n                if (value !== null) {\n                    message.type = 'timer';\n\n                    // das ist im Grunde wie vorher nur das die Farbe in aus der Konfiguration benutzt wird, wenn vorhanden\n                    message.iconColor =\n                        ((await tools.getValueEntryString(item.data.entity2)) ?? '') == 'paused'\n                            ? await tools.getIconEntryColor(\n                                  item.data.icon,\n                                  true,\n                                  String(Color.rgb_dec565(Color.colorScale10)),\n                              )\n                            : await tools.getIconEntryColor(\n                                  item.data.icon,\n                                  false,\n                                  String(Color.rgb_dec565(Color.colorScale0)),\n                              );\n                    message.displayName = new Date(\n                        ((await tools.getValueEntryNumber(item.data.entity1)) || 0) * 1000,\n                    ).toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit', second: '2-digit' });\n                    message.icon = await tools.getIconEntryValue(item.data.icon, true, 'timer-outline');\n                    message.optionalValue = (await tools.getEntryTextOnOff(item.data.text, true)) ?? 'PRESS';\n                    return this.getItemMesssage(message);\n                } else {\n                    this.log.error(`Missing set value for ${this.name}-${id} role:${item.role}`);\n                }\n                break;\n            }\n\n            case 'level.mode.fan': {\n                message.type = 'fan';\n                const value = (await tools.getValueEntryBoolean(item.data.entity1)) ?? false;\n                message.iconColor = await tools.GetIconColor(item.data.icon, value);\n                message.icon = await tools.getIconEntryValue(item.data.icon, value, 'fan');\n                message.optionalValue = value ? '1' : '0';\n                return this.getItemMesssage(message);\n                break;\n            }\n            case 'media.repeat': {\n                message.type = 'button';\n                const value: number | boolean | null =\n                    item.data.entity1 && item.data.entity1.value && item.data.entity1.value.type === 'number'\n                        ? await tools.getValueEntryNumber(item.data.entity1)\n                        : await tools.getValueEntryBoolean(item.data.entity1);\n                if (value !== null) {\n                    message.iconColor = await tools.GetIconColor(item.data.icon, !!value);\n                    if (value === 2) {\n                        message.icon = 'repeat-once';\n                    } else {\n                        message.icon = await tools.getIconEntryValue(\n                            item.data.icon,\n                            !!value,\n                            'repeat-variant',\n                            'repeat-off',\n                        );\n\n                        message.optionalValue = !!value ? '1' : '0';\n                        return this.getItemMesssage(message);\n                    }\n                }\n                break;\n            }\n            case 'text.list': {\n                message.type = 'input_sel';\n                const value: boolean | null =\n                    (item.data.entity1 &&\n                        item.data.entity1.value &&\n                        (await tools.getValueEntryBoolean(item.data.entity1))) ??\n                    null;\n                message.iconColor = await tools.getIconEntryColor(item.data.icon, value, Color.HMIOn, Color.HMIOff);\n                message.icon = await tools.getIconEntryValue(\n                    item.data.icon,\n                    value,\n                    'clipboard-list',\n                    'clipboard-list-outline',\n                );\n                message.displayName = (await tools.getEntryTextOnOff(item.data.text, value)) ?? '';\n                message.optionalValue = !!value ? '1' : '0';\n                return this.getItemMesssage(message);\n\n                break;\n            }\n            /*case 'lock': {\n                break;\n            }\n            case 'slider': {\n                break;\n            }\n            case 'switch.mode.wlan': {\n                break;\n            }\n            case 'media': {\n                break;\n            }\n            case 'timeTable': {\n                break;\n            }\n            case 'airCondition': {\n                break;\n            }*/\n            }\n        }\n        return '~~~~~';\n    }\n\n    getDetailPayload(message: Partial<entityUpdateDetailMessage>): string {\n        this.triggerParent = false;\n        if (!message.type) return '';\n        switch (message.type) {\n            case '2Sliders': {\n                let result: entityUpdateDetailMessage = {\n                    type: '2Sliders',\n                    icon: '',\n                    entityName: 'test',\n                    slidersColor: 'disable',\n                    buttonState: 'disable',\n                    slider1Pos: 'disable',\n                    slider2Pos: 'disable',\n                    hueMode: false,\n                    hue_translation: '',\n                    slider2Translation: '',\n                    slider1Translation: '',\n                    popup: false,\n                };\n                result = Object.assign(result, message);\n                return tools.getPayload(\n                    'entityUpdateDetail',\n                    result.entityName,\n                    result.icon ?? '',\n                    result.slidersColor,\n                    result.buttonState === 'disable' ? 'disable' : result.buttonState ? '1' : '0',\n                    String(result.slider1Pos),\n                    String(result.slider2Pos),\n                    result.hueMode ? 'enable' : 'disable',\n                    result.hue_translation,\n                    result.slider2Translation,\n                    result.slider1Translation,\n                    result.popup ? 'enable' : 'disable',\n                );\n                break;\n            }\n            case 'insel': {\n                let result: entityUpdateDetailMessage = {\n                    type: 'insel',\n                    entityName: '',\n                    textColor: String(Color.rgb_dec565(Color.White)),\n                    currentState: '',\n                    list: '',\n                };\n                result = Object.assign(result, message);\n                return tools.getPayload(\n                    'entityUpdateDetail2',\n                    result.entityName,\n                    '',\n                    result.textColor,\n                    result.type,\n                    result.currentState,\n                    result.list,\n                );\n                break;\n            }\n            case 'popupThermo': {\n                let result: entityUpdateDetailMessage = {\n                    type: 'popupThermo',\n                    entityName: '',\n                    headline: '',\n                    currentState: '',\n                    list: '',\n                };\n                result = Object.assign(result, message);\n                return tools.getPayload(result.headline, result.entityName, result.currentState, result.list);\n                break;\n            }\n            case 'popupShutter': {\n                let result: entityUpdateDetailMessage = {\n                    type: 'popupShutter',\n                    entityName: '',\n                    pos1: '',\n                    text2: '',\n                    pos1text: '',\n                    icon: '',\n                    iconL1: '',\n                    iconM1: '',\n                    iconR1: '',\n                    statusL1: 'disable',\n                    statusM1: 'disable',\n                    statusR1: 'disable',\n                    pos2text: '',\n                    iconL2: '',\n                    iconM2: '',\n                    iconR2: '',\n                    statusL2: 'disable',\n                    statusM2: 'disable',\n                    statusR2: 'disable',\n                    pos2: '',\n                };\n                result = Object.assign(result, message);\n                return tools.getPayload(\n                    'entityUpdateDetail',\n                    result.entityName,\n                    result.pos1,\n                    result.text2,\n                    result.pos1text,\n                    result.icon,\n                    result.iconL1,\n                    result.iconM1,\n                    result.iconR1,\n                    result.statusL1,\n                    result.statusM1,\n                    result.statusR1,\n                    result.pos2text,\n                    result.iconL2,\n                    result.iconM2,\n                    result.iconR2,\n                    result.statusL2,\n                    result.statusM2,\n                    result.statusR2,\n                    result.pos2,\n                );\n            }\n        }\n        return '';\n    }\n\n    async GeneratePopup(mode: PopupType): Promise<string | null> {\n        if (!this.config || !this.dataItems) return null;\n        const entry = this.dataItems;\n        let message: Partial<entityUpdateDetailMessage> = {};\n        //const template = templatePageItems[mode][this.config.role];\n        message.entityName = this.id;\n        this.visibility = true;\n        this.lastPopupType = mode;\n        switch (mode) {\n            case 'popupLight': {\n                switch (this.config.role) {\n                    case 'light':\n                    case 'socket':\n                    case 'dimmer':\n                    case 'hue':\n                    case 'ct':\n                    case 'rgbSingle':\n                    case 'rgb':\n                    default: {\n                        message.type = '2Sliders';\n                        if (message.type !== '2Sliders' || entry.type !== 'light') return null;\n                        const item = entry.data;\n                        message.buttonState = (await tools.getValueEntryBoolean(item.entity1)) ?? 'disable';\n                        const dimmer = item.dimmer && item.dimmer.value && (await item.dimmer.value.getNumber());\n                        if (dimmer != null && item.dimmer) {\n                            item.dimmer.minScale;\n                            if (item.dimmer.minScale != undefined && item.dimmer.maxScale) {\n                                message.slider1Pos = Math.trunc(\n                                    Color.scale(\n                                        dimmer,\n                                        await item.dimmer.minScale.getNumber(),\n                                        await item.dimmer.maxScale.getNumber(),\n                                        100,\n                                        0,\n                                    ),\n                                );\n                            } else {\n                                message.slider1Pos = dimmer;\n                            }\n                        }\n\n                        message.slidersColor =\n                            (await tools.getIconEntryColor(item.icon, false, Color.White)) ?? 'disable';\n                        let rgb = null;\n                        switch (this.config.role) {\n                            case 'socket':\n                            case 'light':\n                            case 'dimmer':\n                            case 'ct':\n                                break;\n                            case 'hue': {\n                                const nhue = (item.hue && (await item.hue.getNumber())) ?? null;\n                                if (nhue) rgb = Color.hsv2RGB(nhue, 1, 1) ?? null;\n                                break;\n                            }\n                            case 'rgbSingle': {\n                                rgb = (await tools.getRGBfromRGBThree(item)) ?? null;\n                                break;\n                            }\n                            case 'rgb': {\n                                rgb = (item.color && item.color.true && (await item.color.true.getRGBValue())) ?? null;\n                                break;\n                            }\n                        }\n                        if (rgb !== null) {\n                            message.hueMode = true;\n                            message.slidersColor = await tools.GetIconColor(\n                                rgb,\n                                message.slider1Pos !== 'disable' && message.slider1Pos !== undefined\n                                    ? message.slider1Pos > 20\n                                        ? message.slider1Pos\n                                        : 20\n                                    : message.buttonState !== 'disable' && message.buttonState !== false,\n                            );\n                        }\n                        message.slider2Pos = 'disable';\n\n                        if (item.ct && item.ct.value) {\n                            const ct = await tools.getScaledNumber(item.ct);\n                            if (ct) {\n                                message.slider2Pos = Math.trunc(ct);\n                            }\n                        }\n\n                        message.popup = message.slider2Pos !== 'disable' && rgb !== null;\n\n                        message.slider1Translation =\n                            (item.text1 && item.text1.true && (await item.text1.true.getString())) ?? undefined;\n                        message.slider2Translation =\n                            (item.text2 && item.text2.true && (await item.text2.true.getString())) ?? undefined;\n                        message.hue_translation =\n                            (item.text3 && item.text3.true && (await item.text3.true.getString())) ?? undefined;\n\n                        if (message.slider1Translation !== undefined)\n                            message.slider1Translation = this.library.getTranslation(message.slider1Translation);\n                        if (message.slider2Translation !== undefined)\n                            message.slider2Translation = this.library.getTranslation(message.slider2Translation);\n                        if (message.hue_translation !== undefined)\n                            message.hue_translation = this.library.getTranslation(message.hue_translation);\n\n                        break;\n                    }\n                }\n                break;\n            }\n\n            case 'popupFan':\n            case 'popupThermo':\n            case 'popupInSel': {\n                if (entry.type !== 'input_sel' && entry.type !== 'light') break;\n                const item = entry.data;\n                message.type = 'insel';\n                if (!(message.type === 'insel')) return null;\n\n                if (\n                    item.entityInSel &&\n                    item.entityInSel.value &&\n                    ['string', 'number'].indexOf(item.entityInSel.value.trueType() ?? '') &&\n                    item.entityInSel.value.getCommonStates()\n                ) {\n                    const states = item.entityInSel.value.getCommonStates();\n                    const value = await tools.getValueEntryString(item.entityInSel);\n                    if (value !== null && states && states[value] !== undefined) {\n                        message.textColor = await tools.getEntryColor(item.color, !!value, Color.White);\n                        const list: string[] = [];\n                        for (const a in states) {\n                            list.push(this.library.getTranslation(String(states[a])));\n                        }\n                        if (list.length > 0) {\n                            message.list = Array.isArray(list)\n                                ? list.map((a: string) => tools.formatInSelText(a)).join('?')\n                                : '';\n\n                            message.currentState = tools.formatInSelText(this.library.getTranslation(states[value]));\n                            if (mode !== 'popupThermo') break;\n                            message = { ...message, type: 'popupThermo' };\n                            if (message.type === 'popupThermo') {\n                                message.headline = this.library.getTranslation(\n                                    (item.headline && (await item.headline.getString())) ?? '',\n                                );\n                            }\n                            break;\n                        }\n                    }\n                }\n                const value = (await tools.getValueEntryBoolean(item.entityInSel)) ?? true;\n                message.textColor = await tools.getEntryColor(item.color, value, Color.White);\n                message.currentState = this.library.getTranslation(\n                    (item.headline && (await item.headline.getString())) ?? '',\n                );\n                let list = (item.valueList && (await item.valueList.getObject())) ??\n                    (item.valueList && (await item.valueList.getString())) ?? [\n                        '1',\n                        '2',\n                        '3',\n                        '4',\n                        '5',\n                        '6',\n                        '7',\n                        '8',\n                        '9',\n                        '10',\n                        '11',\n                        '12',\n                        '13',\n                    ];\n\n                /**\n                 * die Liste ist entweder ein mit ? getrennt der String oder ein Array\n                 */\n                if (list !== null) {\n                    if (typeof list === 'string') list = list.split('?');\n                } else list = [];\n                message.list = Array.isArray(list) ? list.map((a: string) => tools.formatInSelText(a)).join('?') : '';\n                if (mode !== 'popupThermo') break;\n                message = { ...message, type: 'popupThermo' };\n                if (message.type === 'popupThermo') {\n                    message.headline = this.library.getTranslation(\n                        (item.headline && (await item.headline.getString())) ?? '',\n                    );\n                }\n                break;\n            }\n            case 'popupLightNew':\n            case 'popupNotify':\n            case 'popupShutter': {\n                //entityUpdateDetail~entityName~*sliderPos*~2ndrow~textPosition~icon1~iconUp~iconStop~iconDown~iconUpStatus~iconStopStatus~iconDownStatus\n                //~textTilt~iconTiltLeft~iconTiltStop~iconTiltRight~iconTiltLeftStatus~iconTiltStopStatus~iconTiltLeftStatus~tiltPos\n                if (entry.type !== 'shutter') break;\n                const item = entry.data;\n                message.type = 'popupShutter';\n                if (!(message.type === 'popupShutter')) return null;\n                message.text2 = (item.text && item.text.true && (await item.text.true.getString())) ?? '';\n                message.text2 = this.library.getTranslation(message.text2);\n\n                const pos1 = (await tools.getValueEntryNumber(item.entity1)) ?? undefined;\n                const pos2 = (await tools.getValueEntryNumber(item.entity2)) ?? undefined;\n                if (pos1 !== undefined) message.icon = (await tools.getIconEntryValue(item.icon, pos1 < 40, '')) ?? '';\n                else if (pos2 !== undefined)\n                    message.icon = (await tools.getIconEntryValue(item.icon, pos2 < 40, '')) ?? '';\n                const optionalValue = item.valueList\n                    ? await item.valueList.getObject()\n                    : [\n                          Icons.GetIcon('arrow-up'), //up\n                          Icons.GetIcon('stop'), //stop\n                          Icons.GetIcon('arrow-down'), //down\n                          Icons.GetIcon('arrow-up'), //up\n                          Icons.GetIcon('stop'), //stop\n                          Icons.GetIcon('arrow-down'), //down\n                      ];\n                const arr = [pos1, pos2];\n                for (let index = 0; index < arr.length; index++) {\n                    const pos = arr[index];\n                    if (pos == undefined) continue;\n\n                    const i = index * 3;\n\n                    let optionalValueC =\n                        Array.isArray(optionalValue) && optionalValue.every((a) => typeof a === 'string')\n                            ? [...optionalValue]\n                            : ['', '', ''];\n                    optionalValueC = optionalValueC.splice(i, 3);\n                    optionalValueC.forEach((a, i) => {\n                        if (a) optionalValueC[i + 3] = 'enable';\n                        else {\n                            optionalValueC[i] = '';\n                            optionalValueC[i + 3] = 'disable';\n                        }\n                    });\n                    if (index === 0) {\n                        message.pos1 = String(pos);\n                        message.pos1text = (await tools.getEntryTextOnOff(item.text1, true)) ?? '';\n                        message.pos1text = this.library.getTranslation(message.pos1text);\n                        message.iconL1 = optionalValueC[0];\n                        message.iconM1 = optionalValueC[1];\n                        message.iconR1 = optionalValueC[2];\n                        message.statusL1 = optionalValueC[3];\n                        message.statusM1 = optionalValueC[4];\n                        message.statusR1 = optionalValueC[5];\n                    } else {\n                        message.pos2 = String(pos);\n                        message.pos2text = (await tools.getEntryTextOnOff(item.text2, true)) ?? '';\n                        message.pos2text = this.library.getTranslation(message.pos2text);\n                        message.iconL2 = optionalValueC[0];\n                        message.iconM2 = optionalValueC[1];\n                        message.iconR2 = optionalValueC[2];\n                        message.statusL2 = optionalValueC[3];\n                        message.statusM2 = optionalValueC[4];\n                        message.statusR2 = optionalValueC[5];\n                    }\n                }\n            }\n            case 'popupTimer':\n        }\n\n        //if (template.type !== message.type) {\n        //    throw new Error(`Template ${template.type} is not ${message.type} for role: ${this.config.role}`);\n        //}\n        return this.getDetailPayload(message);\n\n        return null;\n    }\n\n    async delete(): Promise<void> {\n        this.visibility = false;\n        await this.controller.statesControler.deactivateTrigger(this);\n        await super.delete();\n        this.parent = undefined;\n    }\n\n    async onCommand(action: string, value: string): Promise<void> {\n        if (value === undefined || this.dataItems === undefined) return;\n        const entry = this.dataItems;\n        switch (action) {\n            case 'mode-insel':\n                {\n                    /**\n                     * Die Setzliste besteht aus 1 Arrays in Stringform mit trenner | und einem json mit trenner ? { id: t[0], value: t[1] }\n                     * oder { id: t[0], value: t[1], command: t[2]} command bitte in der funktion nachsehen. Hier sind meist nicht alle beschrieben\n                     *\n                     * Standardnutzung, NSPanelauswahl von z.B. Eintrag 2 benutzt das Element 2 aus diesem Array und setzt die ID auf den Wert value\n                     * 'flip': Liest den State mit ID ein, negiert den Wert und schreibt ihn wieder zur\u00FCck. string, number, boolean m\u00F6glich.\n                     */\n                    if (entry.type !== 'input_sel') break;\n\n                    const item = entry.data;\n                    if (\n                        item.entityInSel &&\n                        item.entityInSel.value &&\n                        ['string', 'number'].indexOf(item.entityInSel.value.trueType() ?? '') &&\n                        item.entityInSel.value.getCommonStates() &&\n                        !item.setList\n                    ) {\n                        const states = item.entityInSel.value.getCommonStates();\n                        if (value !== null && states !== undefined) {\n                            const list: string[] = [];\n                            for (const a in states) {\n                                list.push(String(a));\n                            }\n                            if (list[parseInt(value)] !== undefined) {\n                                await item.entityInSel.value.setStateAsync(list[parseInt(value)]);\n                                break;\n                            }\n                        }\n                    }\n\n                    if (!item.setList) return;\n                    const list = await this.getListCommands(item.setList);\n                    const v = value as keyof typeof list;\n                    if (list && list[v]) {\n                        try {\n                            const obj = await this.adapter.getForeignObjectAsync(list[v].id);\n                            if (!obj || !obj.common || obj.type !== 'state') throw new Error('Dont get obj!');\n\n                            const type = obj.common.type;\n                            let newValue: any = null;\n                            switch (list[v].command) {\n                                case 'flip': {\n                                    const state = await this.adapter.getForeignStateAsync(list[v].id);\n                                    if (state) {\n                                        switch (typeof state.val) {\n                                            case 'string': {\n                                                switch (\n                                                    state.val as\n                                                        | 'ON'\n                                                        | 'OFF'\n                                                        | 'TRUE'\n                                                        | 'FALSE'\n                                                        | 'START'\n                                                        | 'STOP'\n                                                        | '0'\n                                                        | '1'\n                                                ) {\n                                                    case 'ON': {\n                                                        newValue = 'OFF';\n                                                        break;\n                                                    }\n                                                    case 'OFF': {\n                                                        newValue = 'ON';\n                                                        break;\n                                                    }\n                                                    case 'TRUE': {\n                                                        newValue = 'FALSE';\n                                                        break;\n                                                    }\n                                                    case 'FALSE': {\n                                                        newValue = 'TRUE';\n                                                        break;\n                                                    }\n                                                    case 'START': {\n                                                        newValue = 'STOP';\n                                                        break;\n                                                    }\n                                                    case 'STOP': {\n                                                        newValue = 'START';\n                                                        break;\n                                                    }\n                                                    case '0': {\n                                                        newValue = '1';\n                                                        break;\n                                                    }\n                                                    case '1': {\n                                                        newValue = '0';\n                                                        break;\n                                                    }\n                                                }\n                                                break;\n                                            }\n                                            case 'number':\n                                            case 'bigint': {\n                                                newValue = state.val === 1 ? 0 : 1;\n                                                break;\n                                            }\n                                            case 'boolean': {\n                                                newValue = !state.val;\n                                                break;\n                                            }\n\n                                            case 'symbol':\n                                            case 'undefined':\n                                            case 'object':\n                                            case 'function':\n                                                return;\n                                        }\n                                    }\n                                    break;\n                                }\n                                case undefined: {\n                                    newValue = this.adapter.library.convertToType(list[v].value, type);\n                                }\n                            }\n\n                            if (newValue !== null) {\n                                await this.adapter.setForeignStateAsync(\n                                    list[v].id,\n                                    newValue,\n                                    list[v].id.startsWith(this.adapter.namespace),\n                                );\n                                this.log.debug(`------------Set dp ${list[v].id} to ${String(newValue)}!`);\n                            } else {\n                                this.log.error(`Try to set a null value to ${list[v].id}!`);\n                            }\n                        } catch (e) {\n                            this.log.error(`Id ${list[v].id} is not valid!`);\n                        }\n                    } else {\n                    }\n                }\n                break;\n            case 'button': {\n                if (entry.type === 'button') {\n                    const item = entry.data;\n                    let value: any = (item.setNavi && (await item.setNavi.getString())) ?? null;\n                    if (value !== null) {\n                        this.panel.navigation.setTargetPageByName(value);\n                        break;\n                    }\n                    value = (item.setValue1 && (await item.setValue1.getBoolean())) ?? null;\n                    if (value !== null) {\n                        await item.setValue1!.setStateFlip();\n                    }\n                    if (this.config && this.parent && this.config.role == 'arrow') {\n                        //this.parent.step\n                        //this.parent.update()\n                    }\n                } else if (entry.type === 'light') {\n                    const item = entry.data;\n                    item.entity1 && item.entity1.value && (await item.entity1.value.setStateFlip());\n                }\n                break;\n            }\n            case 'brightnessSlider': {\n                if (entry.type === 'light') {\n                    const item = entry.data;\n                    if (item && item.dimmer && item.dimmer.value && item.dimmer.value.writeable) {\n                        const dimmer = await tools.getScaledNumber(item.dimmer);\n                        if (dimmer !== null && String(dimmer) != value)\n                            await tools.setScaledNumber(item.dimmer, parseInt(value));\n                    } else {\n                        this.log.warn('Dimmer is not writeable!');\n                    }\n                }\n                break;\n            }\n            case 'OnOff': {\n                if (entry.type === 'light') {\n                    const item = entry.data;\n                    if (item && item.entity1 && item.entity1.value && item.entity1.value.writeable) {\n                        await item.entity1.value.setStateAsync(value === '1');\n                    } else {\n                        this.log.warn('entity1 is not writeable!');\n                    }\n                }\n                break;\n            }\n            case 'colorWheel': {\n                if (entry.type === 'light') {\n                    const item = entry.data;\n                    if (item && this.config && item.entity1 && item.entity1.value && item.entity1.value.writeable) {\n                        switch (this.config.role) {\n                            case 'socket':\n                            case 'light':\n                            case 'dimmer':\n                            case 'ct':\n                                break;\n                            case 'hue':\n                                await tools.setHuefromRGB(item, Color.resultToRgb(value));\n                                break;\n                            case 'rgbSingle': {\n                                const rgb = Color.resultToRgb(value);\n                                await tools.setRGBThreefromRGB(item, rgb);\n                                break;\n                            }\n                            case 'rgb': {\n                                const rgb = Color.resultToRgb(value);\n                                if (Color.isRGB(rgb)) {\n                                    item.color &&\n                                        item.color.true &&\n                                        (await item.color.true.setStateAsync(JSON.stringify(rgb)));\n                                }\n\n                                break;\n                            }\n                        }\n                    } else {\n                        this.log.warn('color value is not writeable!');\n                    }\n                }\n                break;\n            }\n            case 'up':\n            case 'stop':\n            case 'down': {\n                if (entry.type === 'shutter') {\n                    const items = entry.data;\n\n                    const list = await this.getListCommands(items.setList);\n                    if (list !== null && list.length > 2) {\n                        switch (action) {\n                            case 'up': {\n                                await this.adapter.setStateAsync(list[0].id, parseInt(list[0].value));\n                                break;\n                            }\n                            case 'stop': {\n                                await this.adapter.setStateAsync(list[1].id, parseInt(list[1].value));\n                                break;\n                            }\n                            case 'down': {\n                                await this.adapter.setStateAsync(list[2].id, parseInt(list[2].value));\n                                break;\n                            }\n                        }\n                    } else {\n                        if (items.entity1 && items.entity1.value && items.entity1.minScale && items.entity1.maxScale) {\n                            if (items.entity1.value.type === 'number') {\n                                switch (action) {\n                                    case 'up': {\n                                        const value = await items.entity1.maxScale.getNumber();\n                                        if (value !== null) await items.entity1.value.setStateAsync(value);\n                                        break;\n                                    }\n                                    case 'stop': {\n                                        const value = await tools.getValueEntryNumber(items.entity1);\n                                        if (value !== null) await tools.setValueEntryNumber(items.entity1, value);\n                                        break;\n                                    }\n                                    case 'down': {\n                                        const value = await items.entity1.minScale.getNumber();\n                                        if (value !== null) await items.entity1.value.setStateAsync(value);\n                                        break;\n                                    }\n                                }\n                            } else if (items.entity1.value.type === 'boolean') {\n                                if (action !== 'stop') await items.entity1.value.setStateFlip();\n                            }\n                        }\n                    }\n                }\n                break;\n            }\n            /**\n             * zu 100% geschlossen zu 0% geschlossen\n             */\n            case 'positionSlider': {\n                if (entry.type === 'shutter') {\n                    const items = entry.data;\n                    await tools.setValueEntryNumber(items.entity1, parseInt(value));\n                }\n                break;\n            }\n            /**\n             * zu 100% geschlossen zu 0% geschlossen\n             */\n            case 'tiltSlider': {\n                if (entry.type === 'shutter') {\n                    const items = entry.data;\n                    await tools.setValueEntryNumber(items.entity2, parseInt(value));\n                }\n                break;\n            }\n            /*let rgb = null;\n                        switch (this.config.role) {\n                            case 'socket':\n                            case 'light':\n                            case 'dimmer':\n                            case 'ct':\n                                break;\n                            case 'hue':\n                                rgb = (await tools.getDecfromHue(item)) ?? null;\n                                break;\n                            case 'rgbSingle':\n                            case 'rgb':\n                                rgb = (await tools.getDecfromRGBThree(item)) ?? null;\n                                break;\n                        }\n                        if (rgb !== null) {\n                            message.hueMode = true;\n                            message.slidersColor = rgb;\n                        } else {\n                            message.slider2Pos = 'disable';\n                        }\n\n                        if (rgb === null) {\n                            if (item.ct && item.ct.value) {\n                                const ct = await tools.getValueEntryNumber(item.ct);\n                                if (ct) {\n                                    message.slider2Pos = Math.trunc(ct);\n                                }\n                            }\n                        }*/\n        }\n    }\n    protected async onStateTrigger(): Promise<void> {\n        if (this.lastPopupType) {\n            if (this.lastPopupType === 'popupThermo') {\n                this.log.debug(`Trigger from popupThermo `);\n                this.parent && this.parent.onPopupRequest('0', 'popupThermo', '', '');\n            } else {\n                const msg = await this.GeneratePopup(this.lastPopupType);\n                if (msg) this.sendToPanel(msg);\n            }\n        }\n    }\n    async getListCommands(setList: Dataitem | undefined): Promise<listCommand[] | null> {\n        if (!setList) return null;\n        let list: listCommand[] | null = (await setList.getObject()) as listCommand[] | null;\n        if (list === null) {\n            const temp = await setList.getString();\n            if (temp === null) return null;\n            list = temp.split('|').map((a: string): listCommand => {\n                const t = a.split('?');\n                return islistCommandUnion(t[2]) ? { id: t[0], value: t[1], command: t[2] } : { id: t[0], value: t[1] };\n            });\n        }\n        return list;\n    }\n}\n"],
  "mappings": "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",
  "names": ["value", "list", "i"]
}
